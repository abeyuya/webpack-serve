// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`compiler errors 1`] = `
Compiler {
  "_pluginCompat": SyncBailHook {
    "_args": Array [
      "options",
    ],
    "_call": [Function],
    "_callAsync": [Function],
    "_promise": [Function],
    "_x": undefined,
    "call": [Function],
    "callAsync": [Function],
    "interceptors": Array [],
    "promise": [Function],
    "taps": Array [
      Object {
        "fn": [Function],
        "name": "Compiler",
        "type": "sync",
      },
      Object {
        "fn": [Function],
        "name": "Tapable camelCase",
        "stage": 100,
        "type": "sync",
      },
      Object {
        "fn": [Function],
        "name": "Tapable this.hooks",
        "stage": 200,
        "type": "sync",
      },
    ],
  },
  "context": "<PROJECT_ROOT>/test/fixtures/error",
  "contextTimestamps": Map {},
  "dependencies": undefined,
  "fileTimestamps": Map {},
  "hooks": Object {
    "additionalPass": AsyncSeriesHook {
      "_args": Array [],
      "_call": undefined,
      "_callAsync": [Function],
      "_promise": [Function],
      "_x": undefined,
      "call": undefined,
      "callAsync": [Function],
      "interceptors": Array [],
      "promise": [Function],
      "taps": Array [],
    },
    "afterCompile": AsyncSeriesHook {
      "_args": Array [
        "compilation",
      ],
      "_call": undefined,
      "_callAsync": [Function],
      "_promise": [Function],
      "_x": undefined,
      "call": undefined,
      "callAsync": [Function],
      "interceptors": Array [],
      "promise": [Function],
      "taps": Array [],
    },
    "afterEmit": AsyncSeriesHook {
      "_args": Array [
        "compilation",
      ],
      "_call": undefined,
      "_callAsync": [Function],
      "_promise": [Function],
      "_x": undefined,
      "call": undefined,
      "callAsync": [Function],
      "interceptors": Array [],
      "promise": [Function],
      "taps": Array [
        Object {
          "fn": [Function],
          "name": "SizeLimitsPlugin",
          "type": "sync",
        },
      ],
    },
    "afterEnvironment": SyncHook {
      "_args": Array [],
      "_call": [Function],
      "_callAsync": [Function],
      "_promise": [Function],
      "_x": Array [],
      "call": [Function],
      "callAsync": [Function],
      "interceptors": Array [],
      "promise": [Function],
      "taps": Array [],
    },
    "afterPlugins": SyncHook {
      "_args": Array [
        "compiler",
      ],
      "_call": [Function],
      "_callAsync": [Function],
      "_promise": [Function],
      "_x": Array [],
      "call": [Function],
      "callAsync": [Function],
      "interceptors": Array [],
      "promise": [Function],
      "taps": Array [],
    },
    "afterResolvers": SyncHook {
      "_args": Array [
        "compiler",
      ],
      "_call": [Function],
      "_callAsync": [Function],
      "_promise": [Function],
      "_x": Array [
        [Function],
        [Function],
      ],
      "call": [Function],
      "callAsync": [Function],
      "interceptors": Array [],
      "promise": [Function],
      "taps": Array [
        Object {
          "fn": [Function],
          "name": "NodeSourcePlugin",
          "type": "sync",
        },
        Object {
          "fn": [Function],
          "name": "AMDPlugin",
          "type": "sync",
        },
      ],
    },
    "beforeCompile": AsyncSeriesHook {
      "_args": Array [
        "params",
      ],
      "_call": undefined,
      "_callAsync": [Function],
      "_promise": [Function],
      "_x": undefined,
      "call": undefined,
      "callAsync": [Function],
      "interceptors": Array [],
      "promise": [Function],
      "taps": Array [],
    },
    "beforeRun": AsyncSeriesHook {
      "_args": Array [
        "compilation",
      ],
      "_call": undefined,
      "_callAsync": [Function],
      "_promise": [Function],
      "_x": undefined,
      "call": undefined,
      "callAsync": [Function],
      "interceptors": Array [],
      "promise": [Function],
      "taps": Array [
        Object {
          "fn": [Function],
          "name": "NodeEnvironmentPlugin",
          "type": "sync",
        },
      ],
    },
    "compilation": SyncHook {
      "_args": Array [
        "compilation",
        "params",
      ],
      "_call": [Function],
      "_callAsync": [Function],
      "_promise": [Function],
      "_x": undefined,
      "call": [Function],
      "callAsync": [Function],
      "interceptors": Array [],
      "promise": [Function],
      "taps": Array [
        Object {
          "fn": [Function],
          "name": "NamedModulesPlugin",
          "type": "sync",
        },
        Object {
          "fn": [Function],
          "name": "FunctionModulePlugin",
          "type": "sync",
        },
        Object {
          "fn": [Function],
          "name": "NodeSourcePlugin",
          "type": "sync",
        },
        Object {
          "fn": [Function],
          "name": "LoaderTargetPlugin",
          "type": "sync",
        },
        Object {
          "fn": [Function],
          "name": "SourceMapDevToolPlugin",
          "type": "sync",
        },
        Object {
          "fn": [Function],
          "name": "JavascriptModulesPlugin",
          "type": "sync",
        },
        Object {
          "fn": [Function],
          "name": "JsonModulesPlugin",
          "type": "sync",
        },
        Object {
          "fn": [Function],
          "name": "WebAssemblyModulesPlugin",
          "type": "sync",
        },
        Object {
          "fn": [Function],
          "name": "MultiEntryPlugin",
          "type": "sync",
        },
        Object {
          "fn": [Function],
          "name": "CompatibilityPlugin",
          "type": "sync",
        },
        Object {
          "fn": [Function],
          "name": "HarmonyModulesPlugin",
          "type": "sync",
        },
        Object {
          "fn": [Function],
          "name": "AMDPlugin",
          "type": "sync",
        },
        Object {
          "fn": [Function],
          "name": "CommonJsPlugin",
          "type": "sync",
        },
        Object {
          "fn": [Function],
          "name": "LoaderPlugin",
          "type": "sync",
        },
        Object {
          "fn": [Function],
          "name": "LoaderPlugin",
          "type": "sync",
        },
        Object {
          "fn": [Function],
          "name": "NodeStuffPlugin",
          "type": "sync",
        },
        Object {
          "fn": [Function],
          "name": "RequireJsStuffPlugin",
          "type": "sync",
        },
        Object {
          "fn": [Function],
          "name": "APIPlugin",
          "type": "sync",
        },
        Object {
          "fn": [Function],
          "name": "ConstPlugin",
          "type": "sync",
        },
        Object {
          "fn": [Function],
          "name": "UseStrictPlugin",
          "type": "sync",
        },
        Object {
          "fn": [Function],
          "name": "RequireIncludePlugin",
          "type": "sync",
        },
        Object {
          "fn": [Function],
          "name": "RequireEnsurePlugin",
          "type": "sync",
        },
        Object {
          "fn": [Function],
          "name": "RequireContextPlugin",
          "type": "sync",
        },
        Object {
          "fn": [Function],
          "name": "ImportPlugin",
          "type": "sync",
        },
        Object {
          "fn": [Function],
          "name": "SystemPlugin",
          "type": "sync",
        },
        Object {
          "fn": [Function],
          "name": "EnsureChunkConditionsPlugin",
          "type": "sync",
        },
        Object {
          "fn": [Function],
          "name": "RemoveParentModulesPlugin",
          "type": "sync",
        },
        Object {
          "fn": [Function],
          "name": "RemoveEmptyChunksPlugin",
          "type": "sync",
        },
        Object {
          "fn": [Function],
          "name": "MergeDuplicateChunksPlugin",
          "type": "sync",
        },
        Object {
          "fn": [Function],
          "name": "FlagIncludedChunksPlugin",
          "type": "sync",
        },
        Object {
          "fn": [Function],
          "name": "OccurrenceOrderPlugin",
          "type": "sync",
        },
        Object {
          "fn": [Function],
          "name": "SideEffectsFlagPlugin",
          "type": "sync",
        },
        Object {
          "fn": [Function],
          "name": "FlagDependencyExportsPlugin",
          "type": "sync",
        },
        Object {
          "fn": [Function],
          "name": "FlagDependencyUsagePlugin",
          "type": "sync",
        },
        Object {
          "fn": [Function],
          "name": "ModuleConcatenationPlugin",
          "type": "sync",
        },
        Object {
          "fn": [Function],
          "name": "NoEmitOnErrorsPlugin",
          "type": "sync",
        },
        Object {
          "fn": [Function],
          "name": "DefinePlugin",
          "type": "sync",
        },
        Object {
          "fn": [Function],
          "name": "UglifyJSPlugin",
          "type": "sync",
        },
        Object {
          "fn": [Function],
          "name": "TemplatedPathPlugin",
          "type": "sync",
        },
        Object {
          "fn": [Function],
          "name": "RecordIdsPlugin",
          "type": "sync",
        },
        Object {
          "fn": [Function],
          "name": "WarnCaseSensitiveModulesPlugin",
          "type": "sync",
        },
      ],
    },
    "compile": SyncHook {
      "_args": Array [
        "params",
      ],
      "_call": [Function],
      "_callAsync": [Function],
      "_promise": [Function],
      "_x": undefined,
      "call": [Function],
      "callAsync": [Function],
      "interceptors": Array [],
      "promise": [Function],
      "taps": Array [
        Object {
          "fn": [Function],
          "name": "WebpackServe",
          "type": "sync",
        },
      ],
    },
    "contextModuleFactory": SyncHook {
      "_args": Array [
        "contextModulefactory",
      ],
      "_call": [Function],
      "_callAsync": [Function],
      "_promise": [Function],
      "_x": undefined,
      "call": [Function],
      "callAsync": [Function],
      "interceptors": Array [],
      "promise": [Function],
      "taps": Array [],
    },
    "done": AsyncSeriesHook {
      "_args": Array [
        "stats",
      ],
      "_call": undefined,
      "_callAsync": [Function],
      "_promise": [Function],
      "_x": undefined,
      "call": undefined,
      "callAsync": [Function],
      "interceptors": Array [],
      "promise": [Function],
      "taps": Array [
        Object {
          "fn": [Function],
          "name": "WebpackServe",
          "type": "sync",
        },
      ],
    },
    "emit": AsyncSeriesHook {
      "_args": Array [
        "compilation",
      ],
      "_call": undefined,
      "_callAsync": [Function],
      "_promise": [Function],
      "_x": undefined,
      "call": undefined,
      "callAsync": [Function],
      "interceptors": Array [],
      "promise": [Function],
      "taps": Array [],
    },
    "entryOption": SyncBailHook {
      "_args": Array [
        "context",
        "entry",
      ],
      "_call": [Function],
      "_callAsync": [Function],
      "_promise": [Function],
      "_x": Array [
        [Function],
      ],
      "call": [Function],
      "callAsync": [Function],
      "interceptors": Array [],
      "promise": [Function],
      "taps": Array [
        Object {
          "fn": [Function],
          "name": "EntryOptionPlugin",
          "type": "sync",
        },
      ],
    },
    "environment": SyncHook {
      "_args": Array [],
      "_call": [Function],
      "_callAsync": [Function],
      "_promise": [Function],
      "_x": Array [],
      "call": [Function],
      "callAsync": [Function],
      "interceptors": Array [],
      "promise": [Function],
      "taps": Array [],
    },
    "failed": SyncHook {
      "_args": Array [
        "error",
      ],
      "_call": [Function],
      "_callAsync": [Function],
      "_promise": [Function],
      "_x": undefined,
      "call": [Function],
      "callAsync": [Function],
      "interceptors": Array [],
      "promise": [Function],
      "taps": Array [],
    },
    "invalid": SyncHook {
      "_args": Array [
        "filename",
        "changeTime",
      ],
      "_call": [Function],
      "_callAsync": [Function],
      "_promise": [Function],
      "_x": undefined,
      "call": [Function],
      "callAsync": [Function],
      "interceptors": Array [],
      "promise": [Function],
      "taps": Array [],
    },
    "make": AsyncParallelHook {
      "_args": Array [
        "compilation",
      ],
      "_call": undefined,
      "_callAsync": [Function],
      "_promise": [Function],
      "_x": undefined,
      "call": undefined,
      "callAsync": [Function],
      "interceptors": Array [],
      "promise": [Function],
      "taps": Array [
        Object {
          "fn": [Function],
          "name": "MultiEntryPlugin",
          "type": "async",
        },
      ],
    },
    "normalModuleFactory": SyncHook {
      "_args": Array [
        "normalModuleFactory",
      ],
      "_call": [Function],
      "_callAsync": [Function],
      "_promise": [Function],
      "_x": undefined,
      "call": [Function],
      "callAsync": [Function],
      "interceptors": Array [],
      "promise": [Function],
      "taps": Array [
        Object {
          "fn": [Function],
          "name": "SideEffectsFlagPlugin",
          "type": "sync",
        },
      ],
    },
    "run": AsyncSeriesHook {
      "_args": Array [
        "compilation",
      ],
      "_call": undefined,
      "_callAsync": [Function],
      "_promise": [Function],
      "_x": undefined,
      "call": undefined,
      "callAsync": [Function],
      "interceptors": Array [],
      "promise": [Function],
      "taps": Array [],
    },
    "shouldEmit": SyncBailHook {
      "_args": Array [
        "compilation",
      ],
      "_call": [Function],
      "_callAsync": [Function],
      "_promise": [Function],
      "_x": undefined,
      "call": [Function],
      "callAsync": [Function],
      "interceptors": Array [],
      "promise": [Function],
      "taps": Array [
        Object {
          "fn": [Function],
          "name": "NoEmitOnErrorsPlugin",
          "type": "sync",
        },
      ],
    },
    "thisCompilation": SyncHook {
      "_args": Array [
        "compilation",
        "params",
      ],
      "_call": [Function],
      "_callAsync": [Function],
      "_promise": [Function],
      "_x": undefined,
      "call": [Function],
      "callAsync": [Function],
      "interceptors": Array [],
      "promise": [Function],
      "taps": Array [
        Object {
          "fn": [Function],
          "name": "JsonpTemplatePlugin",
          "type": "sync",
        },
        Object {
          "fn": [Function],
          "name": "FetchCompileWasmTemplatePlugin",
          "type": "sync",
        },
        Object {
          "fn": [Function],
          "name": "WarnNoModeSetPlugin",
          "type": "sync",
        },
        Object {
          "fn": [Function],
          "name": "SplitChunksPlugin",
          "type": "sync",
        },
      ],
    },
    "watchClose": SyncHook {
      "_args": Array [],
      "_call": [Function],
      "_callAsync": [Function],
      "_promise": [Function],
      "_x": undefined,
      "call": [Function],
      "callAsync": [Function],
      "interceptors": Array [],
      "promise": [Function],
      "taps": Array [],
    },
    "watchRun": AsyncSeriesHook {
      "_args": Array [
        "compiler",
      ],
      "_call": undefined,
      "_callAsync": [Function],
      "_promise": [Function],
      "_x": undefined,
      "call": undefined,
      "callAsync": [Function],
      "interceptors": Array [],
      "promise": [Function],
      "taps": Array [],
    },
  },
  "inputFileSystem": CachedInputFileSystem {
    "_readFile": [Function],
    "_readFileStorage": Storage {
      "count": 0,
      "data": Map {},
      "duration": 60000,
      "interval": null,
      "levels": Array [
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
      ],
      "needTickCheck": false,
      "nextTick": null,
      "passive": true,
      "running": Map {},
      "tick": [Function],
    },
    "_readFileSync": [Function],
    "_readJson": [Function],
    "_readJsonStorage": Storage {
      "count": 0,
      "data": Map {},
      "duration": 60000,
      "interval": null,
      "levels": Array [
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
      ],
      "needTickCheck": false,
      "nextTick": null,
      "passive": true,
      "running": Map {},
      "tick": [Function],
    },
    "_readJsonSync": [Function],
    "_readdir": [Function],
    "_readdirStorage": Storage {
      "count": 0,
      "data": Map {},
      "duration": 60000,
      "interval": null,
      "levels": Array [
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
      ],
      "needTickCheck": false,
      "nextTick": null,
      "passive": true,
      "running": Map {},
      "tick": [Function],
    },
    "_readdirSync": [Function],
    "_readlink": [Function],
    "_readlinkStorage": Storage {
      "count": 0,
      "data": Map {},
      "duration": 60000,
      "interval": null,
      "levels": Array [
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
      ],
      "needTickCheck": false,
      "nextTick": null,
      "passive": true,
      "running": Map {},
      "tick": [Function],
    },
    "_readlinkSync": [Function],
    "_stat": [Function],
    "_statStorage": Storage {
      "count": 0,
      "data": Map {},
      "duration": 60000,
      "interval": null,
      "levels": Array [
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
      ],
      "needTickCheck": false,
      "nextTick": null,
      "passive": true,
      "running": Map {},
      "tick": [Function],
    },
    "_statSync": [Function],
    "fileSystem": NodeJsInputFileSystem {},
  },
  "name": undefined,
  "options": Object {
    "cache": false,
    "context": "<PROJECT_ROOT>/test/fixtures/error",
    "devtool": "source-map",
    "entry": Array [
      "./app.js",
    ],
    "module": Object {
      "defaultRules": Array [
        Object {
          "resolve": Object {},
          "type": "javascript/auto",
        },
        Object {
          "resolve": Object {
            "mainFields": Array [
              "browser",
              "main",
            ],
          },
          "test": /\\\\\\.mjs\\$/i,
          "type": "javascript/esm",
        },
        Object {
          "test": /\\\\\\.json\\$/i,
          "type": "json",
        },
        Object {
          "test": /\\\\\\.wasm\\$/i,
          "type": "webassembly/experimental",
        },
      ],
      "exprContextCritical": true,
      "exprContextRecursive": true,
      "exprContextRegExp": false,
      "exprContextRequest": ".",
      "rules": Array [],
      "strictExportPresence": false,
      "strictThisContextOnImports": false,
      "unknownContextCritical": true,
      "unknownContextRecursive": true,
      "unknownContextRegExp": false,
      "unknownContextRequest": ".",
      "unsafeCache": false,
      "wrappedContextCritical": false,
      "wrappedContextRecursive": true,
      "wrappedContextRegExp": /\\.\\*/,
    },
    "node": Object {
      "Buffer": true,
      "__dirname": "mock",
      "__filename": "mock",
      "console": false,
      "global": true,
      "process": true,
      "setImmediate": true,
    },
    "optimization": Object {
      "concatenateModules": true,
      "flagIncludedChunks": true,
      "mergeDuplicateChunks": true,
      "minimize": true,
      "minimizer": Array [
        Object {
          "apply": [Function],
        },
      ],
      "namedChunks": false,
      "namedModules": false,
      "noEmitOnErrors": true,
      "nodeEnv": "production",
      "occurrenceOrder": true,
      "portableRecords": false,
      "providedExports": true,
      "removeAvailableModules": true,
      "removeEmptyChunks": true,
      "runtimeChunk": undefined,
      "sideEffects": true,
      "splitChunks": Object {
        "automaticNameDelimiter": "~",
        "cacheGroups": Object {
          "default": Object {
            "minChunks": 2,
            "priority": -20,
            "reuseExistingChunk": true,
          },
          "vendors": Object {
            "priority": -10,
            "test": /\\[\\\\\\\\\\\\/\\]node_modules\\[\\\\\\\\\\\\/\\]/,
          },
        },
        "chunks": "async",
        "maxAsyncRequests": 5,
        "maxInitialRequests": 3,
        "minChunks": 1,
        "minSize": 30000,
        "name": true,
      },
      "usedExports": true,
    },
    "output": Object {
      "chunkCallbackName": "webpackChunk",
      "chunkFilename": "./[id].output.js",
      "chunkLoadTimeout": 120000,
      "crossOriginLoading": false,
      "devtoolLineToLine": false,
      "devtoolNamespace": "",
      "filename": "./output.js",
      "globalObject": "window",
      "hashDigest": "hex",
      "hashDigestLength": 20,
      "hashFunction": "md4",
      "hotUpdateChunkFilename": "[id].[hash].hot-update.js",
      "hotUpdateFunction": "webpackHotUpdate",
      "hotUpdateMainFilename": "[hash].hot-update.json",
      "jsonpFunction": "webpackJsonp",
      "jsonpScriptType": false,
      "library": "",
      "libraryTarget": "var",
      "path": "<PROJECT_ROOT>/test/fixtures/error",
      "pathinfo": false,
      "sourceMapFilename": "[file].map[query]",
      "strictModuleExceptionHandling": false,
      "webassemblyModuleFilename": "[modulehash].module.wasm",
    },
    "performance": Object {
      "hints": "warning",
      "maxAssetSize": 250000,
      "maxEntrypointSize": 250000,
    },
    "plugins": Array [
      NamedModulesPlugin {
        "options": Object {},
      },
    ],
    "resolve": Object {
      "aliasFields": Array [
        "browser",
      ],
      "cacheWithContext": false,
      "extensions": Array [
        ".wasm",
        ".mjs",
        ".js",
        ".json",
      ],
      "mainFields": Array [
        "browser",
        "module",
        "main",
      ],
      "mainFiles": Array [
        "index",
      ],
      "modules": Array [
        "node_modules",
      ],
      "unsafeCache": true,
    },
    "resolveLoader": Object {
      "cacheWithContext": false,
      "extensions": Array [
        ".js",
        ".json",
      ],
      "mainFields": Array [
        "loader",
        "main",
      ],
      "mainFiles": Array [
        "index",
      ],
      "unsafeCache": true,
    },
    "serve": Object {},
    "target": "web",
  },
  "outputFileSystem": NodeOutputFileSystem {
    "join": [Function],
    "mkdir": [Function],
    "mkdirp": [Function],
    "rmdir": [Function],
    "unlink": [Function],
    "writeFile": [Function],
  },
  "outputPath": "<PROJECT_ROOT>/test/fixtures/error",
  "parentCompilation": undefined,
  "records": Object {},
  "recordsInputPath": undefined,
  "recordsOutputPath": undefined,
  "requestShortener": RequestShortener {
    "buildinsAsModule": false,
    "buildinsRegExp": /\\(\\^\\|!\\)\\\\/Users\\\\/powella\\\\/code\\\\/webpack\\\\-serve\\\\/node_modules\\\\/webpack/g,
    "cache": Map {},
    "currentDirectoryRegExp": /\\(\\^\\|!\\)\\\\/Users\\\\/powella\\\\/code\\\\/webpack\\\\-serve\\\\/test\\\\/fixtures\\\\/error/g,
    "parentDirectoryRegExp": /\\(\\^\\|!\\)\\\\/Users\\\\/powella\\\\/code\\\\/webpack\\\\-serve\\\\/test\\\\/fixtures/g,
  },
  "resolverFactory": ResolverFactory {
    "_pluginCompat": SyncBailHook {
      "_args": Array [
        "options",
      ],
      "_call": [Function],
      "_callAsync": [Function],
      "_promise": [Function],
      "_x": undefined,
      "call": [Function],
      "callAsync": [Function],
      "interceptors": Array [],
      "promise": [Function],
      "taps": Array [
        Object {
          "fn": [Function],
          "name": "ResolverFactory",
          "type": "sync",
        },
        Object {
          "fn": [Function],
          "name": "Tapable camelCase",
          "stage": 100,
          "type": "sync",
        },
        Object {
          "fn": [Function],
          "name": "Tapable this.hooks",
          "stage": 200,
          "type": "sync",
        },
      ],
    },
    "cache1": WeakMap {},
    "cache2": Map {},
    "hooks": Object {
      "resolveOptions": HookMap {
        "_factory": [Function],
        "_interceptors": Array [],
        "_map": Map {
          "normal" => SyncWaterfallHook {
            "_args": Array [
              "resolveOptions",
            ],
            "_call": [Function],
            "_callAsync": [Function],
            "_promise": [Function],
            "_x": undefined,
            "call": [Function],
            "callAsync": [Function],
            "interceptors": Array [],
            "promise": [Function],
            "taps": Array [
              Object {
                "fn": [Function],
                "name": "WebpackOptionsApply",
                "type": "sync",
              },
            ],
          },
          "context" => SyncWaterfallHook {
            "_args": Array [
              "resolveOptions",
            ],
            "_call": [Function],
            "_callAsync": [Function],
            "_promise": [Function],
            "_x": undefined,
            "call": [Function],
            "callAsync": [Function],
            "interceptors": Array [],
            "promise": [Function],
            "taps": Array [
              Object {
                "fn": [Function],
                "name": "WebpackOptionsApply",
                "type": "sync",
              },
            ],
          },
          "loader" => SyncWaterfallHook {
            "_args": Array [
              "resolveOptions",
            ],
            "_call": [Function],
            "_callAsync": [Function],
            "_promise": [Function],
            "_x": undefined,
            "call": [Function],
            "callAsync": [Function],
            "interceptors": Array [],
            "promise": [Function],
            "taps": Array [
              Object {
                "fn": [Function],
                "name": "WebpackOptionsApply",
                "type": "sync",
              },
            ],
          },
        },
      },
      "resolver": HookMap {
        "_factory": [Function],
        "_interceptors": Array [],
        "_map": Map {
          "normal" => SyncHook {
            "_args": Array [
              "resolver",
              "resolveOptions",
            ],
            "_call": [Function],
            "_callAsync": [Function],
            "_promise": [Function],
            "_x": undefined,
            "call": [Function],
            "callAsync": [Function],
            "interceptors": Array [],
            "promise": [Function],
            "taps": Array [
              Object {
                "fn": [Function],
                "name": "NodeSourcePlugin",
                "type": "sync",
              },
              Object {
                "fn": [Function],
                "name": "NodeSourcePlugin",
                "type": "sync",
              },
              Object {
                "fn": [Function],
                "name": "NodeSourcePlugin",
                "type": "sync",
              },
              Object {
                "fn": [Function],
                "name": "NodeSourcePlugin",
                "type": "sync",
              },
              Object {
                "fn": [Function],
                "name": "NodeSourcePlugin",
                "type": "sync",
              },
              Object {
                "fn": [Function],
                "name": "NodeSourcePlugin",
                "type": "sync",
              },
              Object {
                "fn": [Function],
                "name": "NodeSourcePlugin",
                "type": "sync",
              },
              Object {
                "fn": [Function],
                "name": "NodeSourcePlugin",
                "type": "sync",
              },
              Object {
                "fn": [Function],
                "name": "NodeSourcePlugin",
                "type": "sync",
              },
              Object {
                "fn": [Function],
                "name": "NodeSourcePlugin",
                "type": "sync",
              },
              Object {
                "fn": [Function],
                "name": "NodeSourcePlugin",
                "type": "sync",
              },
              Object {
                "fn": [Function],
                "name": "NodeSourcePlugin",
                "type": "sync",
              },
              Object {
                "fn": [Function],
                "name": "NodeSourcePlugin",
                "type": "sync",
              },
              Object {
                "fn": [Function],
                "name": "NodeSourcePlugin",
                "type": "sync",
              },
              Object {
                "fn": [Function],
                "name": "NodeSourcePlugin",
                "type": "sync",
              },
              Object {
                "fn": [Function],
                "name": "NodeSourcePlugin",
                "type": "sync",
              },
              Object {
                "fn": [Function],
                "name": "NodeSourcePlugin",
                "type": "sync",
              },
              Object {
                "fn": [Function],
                "name": "NodeSourcePlugin",
                "type": "sync",
              },
              Object {
                "fn": [Function],
                "name": "NodeSourcePlugin",
                "type": "sync",
              },
              Object {
                "fn": [Function],
                "name": "NodeSourcePlugin",
                "type": "sync",
              },
              Object {
                "fn": [Function],
                "name": "NodeSourcePlugin",
                "type": "sync",
              },
              Object {
                "fn": [Function],
                "name": "NodeSourcePlugin",
                "type": "sync",
              },
              Object {
                "fn": [Function],
                "name": "NodeSourcePlugin",
                "type": "sync",
              },
              Object {
                "fn": [Function],
                "name": "NodeSourcePlugin",
                "type": "sync",
              },
              Object {
                "fn": [Function],
                "name": "NodeSourcePlugin",
                "type": "sync",
              },
              Object {
                "fn": [Function],
                "name": "NodeSourcePlugin",
                "type": "sync",
              },
              Object {
                "fn": [Function],
                "name": "NodeSourcePlugin",
                "type": "sync",
              },
              Object {
                "fn": [Function],
                "name": "NodeSourcePlugin",
                "type": "sync",
              },
              Object {
                "fn": [Function],
                "name": "NodeSourcePlugin",
                "type": "sync",
              },
              Object {
                "fn": [Function],
                "name": "NodeSourcePlugin",
                "type": "sync",
              },
              Object {
                "fn": [Function],
                "name": "NodeSourcePlugin",
                "type": "sync",
              },
              Object {
                "fn": [Function],
                "name": "NodeSourcePlugin",
                "type": "sync",
              },
              Object {
                "fn": [Function],
                "name": "NodeSourcePlugin",
                "type": "sync",
              },
              Object {
                "fn": [Function],
                "name": "NodeSourcePlugin",
                "type": "sync",
              },
              Object {
                "fn": [Function],
                "name": "NodeSourcePlugin",
                "type": "sync",
              },
              Object {
                "fn": [Function],
                "name": "NodeSourcePlugin",
                "type": "sync",
              },
              Object {
                "fn": [Function],
                "name": "NodeSourcePlugin",
                "type": "sync",
              },
              Object {
                "fn": [Function],
                "name": "AMDPlugin",
                "type": "sync",
              },
            ],
          },
        },
      },
    },
  },
  "resolvers": Object {
    "context": Object {
      "apply": [Function],
      "plugins": [Function],
    },
    "loader": Object {
      "apply": [Function],
      "plugins": [Function],
    },
    "normal": Object {
      "apply": [Function],
      "plugins": [Function],
    },
  },
  "running": false,
  "watchFileSystem": NodeWatchFileSystem {
    "inputFileSystem": CachedInputFileSystem {
      "_readFile": [Function],
      "_readFileStorage": Storage {
        "count": 0,
        "data": Map {},
        "duration": 60000,
        "interval": null,
        "levels": Array [
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
        ],
        "needTickCheck": false,
        "nextTick": null,
        "passive": true,
        "running": Map {},
        "tick": [Function],
      },
      "_readFileSync": [Function],
      "_readJson": [Function],
      "_readJsonStorage": Storage {
        "count": 0,
        "data": Map {},
        "duration": 60000,
        "interval": null,
        "levels": Array [
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
        ],
        "needTickCheck": false,
        "nextTick": null,
        "passive": true,
        "running": Map {},
        "tick": [Function],
      },
      "_readJsonSync": [Function],
      "_readdir": [Function],
      "_readdirStorage": Storage {
        "count": 0,
        "data": Map {},
        "duration": 60000,
        "interval": null,
        "levels": Array [
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
        ],
        "needTickCheck": false,
        "nextTick": null,
        "passive": true,
        "running": Map {},
        "tick": [Function],
      },
      "_readdirSync": [Function],
      "_readlink": [Function],
      "_readlinkStorage": Storage {
        "count": 0,
        "data": Map {},
        "duration": 60000,
        "interval": null,
        "levels": Array [
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
        ],
        "needTickCheck": false,
        "nextTick": null,
        "passive": true,
        "running": Map {},
        "tick": [Function],
      },
      "_readlinkSync": [Function],
      "_stat": [Function],
      "_statStorage": Storage {
        "count": 0,
        "data": Map {},
        "duration": 60000,
        "interval": null,
        "levels": Array [
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
        ],
        "needTickCheck": false,
        "nextTick": null,
        "passive": true,
        "running": Map {},
        "tick": [Function],
      },
      "_statSync": [Function],
      "fileSystem": NodeJsInputFileSystem {},
    },
    "watcher": EventEmitter {
      "_events": Object {},
      "_eventsCount": 0,
      "_maxListeners": undefined,
      "_onTimeout": [Function],
      "aggregateTimeout": 0,
      "aggregatedChanges": Array [],
      "aggregatedRemovals": Array [],
      "dirWatchers": Array [],
      "fileWatchers": Array [],
      "mtimes": Object {},
      "options": Object {
        "aggregateTimeout": 200,
      },
      "paused": false,
      "watcherOptions": Object {
        "ignored": undefined,
        "poll": undefined,
      },
    },
    "watcherOptions": Object {
      "aggregateTimeout": 200,
    },
  },
}
`;

exports[`compiler errors 2`] = `
Object {
  "assets": Array [
    Object {
      "chunkNames": Array [
        "main",
      ],
      "chunks": Array [
        0,
      ],
      "emitted": undefined,
      "isOverSizeLimit": undefined,
      "name": "./output.js",
      "size": 1125,
    },
    Object {
      "chunkNames": Array [
        "main",
      ],
      "chunks": Array [
        0,
      ],
      "emitted": undefined,
      "isOverSizeLimit": undefined,
      "name": "./output.js.map",
      "size": 4689,
    },
  ],
  "assetsByChunkName": Object {
    "main": Array [
      "./output.js",
      "./output.js.map",
    ],
  },
  "builtAt": /\\\\d\\+/,
  "children": Array [],
  "chunks": Array [
    Object {
      "children": Array [],
      "childrenByOrder": Object {},
      "entry": true,
      "files": Array [
        "./output.js",
        "./output.js.map",
      ],
      "filteredModules": 0,
      "hash": "8cb6468249519f29b2ee",
      "id": 0,
      "initial": true,
      "modules": Array [
        Object {
          "assets": Array [],
          "built": true,
          "cacheable": true,
          "chunks": Array [
            0,
          ],
          "depth": 1,
          "errors": 0,
          "failed": false,
          "id": "./app.js",
          "identifier": "<PROJECT_ROOT>/test/fixtures/error/app.js",
          "index": 1,
          "index2": 0,
          "issuer": "multi ./app.js",
          "issuerId": 0,
          "issuerName": "multi ./app.js",
          "issuerPath": Array [
            Object {
              "id": 0,
              "identifier": "multi ./app.js",
              "name": "multi ./app.js",
              "profile": undefined,
            },
          ],
          "name": "./app.js",
          "optimizationBailout": Array [
            "ModuleConcatenation bailout: Module is not an ECMAScript module",
          ],
          "optional": false,
          "prefetched": false,
          "profile": undefined,
          "providedExports": null,
          "reasons": Array [
            Object {
              "explanation": undefined,
              "loc": "main:100000",
              "module": "multi ./app.js",
              "moduleId": 0,
              "moduleIdentifier": "multi ./app.js",
              "moduleName": "multi ./app.js",
              "type": "single entry",
              "userRequest": "./app.js",
            },
          ],
          "size": 58,
          "source": "/* eslint-disable */

if (!window) {
  require('test');
}
",
          "usedExports": true,
          "warnings": 0,
        },
        Object {
          "assets": Array [],
          "built": true,
          "cacheable": undefined,
          "chunks": Array [
            0,
          ],
          "depth": 0,
          "errors": 0,
          "failed": false,
          "id": 0,
          "identifier": "multi ./app.js",
          "index": 0,
          "index2": 1,
          "issuer": null,
          "issuerId": null,
          "issuerName": null,
          "issuerPath": null,
          "name": "multi ./app.js",
          "optimizationBailout": Array [
            "ModuleConcatenation bailout: Module is not an ECMAScript module",
          ],
          "optional": false,
          "prefetched": false,
          "profile": undefined,
          "providedExports": null,
          "reasons": Array [
            Object {
              "explanation": undefined,
              "module": null,
              "moduleId": null,
              "moduleIdentifier": null,
              "moduleName": null,
              "type": "multi entry",
              "userRequest": undefined,
            },
          ],
          "size": 28,
          "usedExports": true,
          "warnings": 0,
        },
      ],
      "names": Array [
        "main",
      ],
      "origins": Array [
        Object {
          "loc": "main",
          "module": "",
          "moduleId": undefined,
          "moduleIdentifier": "",
          "moduleName": "",
          "reasons": Array [],
          "request": undefined,
        },
      ],
      "parents": Array [],
      "reason": undefined,
      "recorded": undefined,
      "rendered": true,
      "siblings": Array [],
      "size": 86,
    },
  ],
  "entrypoints": Object {
    "main": Object {
      "assets": Array [
        "./output.js",
        "./output.js.map",
      ],
      "childAssets": Object {},
      "children": Object {},
      "chunks": Array [
        0,
      ],
      "isOverSizeLimit": undefined,
    },
  },
  "errors": Array [
    "./app.js
Module not found: Error: Can't resolve 'test' in '<PROJECT_ROOT>/test/fixtures/error'
resolve 'test' in '<PROJECT_ROOT>/test/fixtures/error'
  Parsed request is a module
  using description file: <PROJECT_ROOT>/package.json (relative path: ./test/fixtures/error)
    Field 'browser' doesn't contain a valid alias configuration
    resolve as module
      <PROJECT_ROOT>/test/fixtures/error/node_modules doesn't exist or is not a directory
      <PROJECT_ROOT>/test/fixtures/node_modules doesn't exist or is not a directory
      <PROJECT_ROOT>/test/node_modules doesn't exist or is not a directory
      <HOME_DIR>/code/node_modules doesn't exist or is not a directory
      <HOME_DIR>/node_modules doesn't exist or is not a directory
      /Users/node_modules doesn't exist or is not a directory
      /node_modules doesn't exist or is not a directory
      looking for modules in <PROJECT_ROOT>/node_modules
        using description file: <PROJECT_ROOT>/package.json (relative path: ./node_modules)
          Field 'browser' doesn't contain a valid alias configuration
          using description file: <PROJECT_ROOT>/package.json (relative path: ./node_modules/test)
            no extension
              Field 'browser' doesn't contain a valid alias configuration
              <PROJECT_ROOT>/node_modules/test doesn't exist
            .wasm
              Field 'browser' doesn't contain a valid alias configuration
              <PROJECT_ROOT>/node_modules/test.wasm doesn't exist
            .mjs
              Field 'browser' doesn't contain a valid alias configuration
              <PROJECT_ROOT>/node_modules/test.mjs doesn't exist
            .js
              Field 'browser' doesn't contain a valid alias configuration
              <PROJECT_ROOT>/node_modules/test.js doesn't exist
            .json
              Field 'browser' doesn't contain a valid alias configuration
              <PROJECT_ROOT>/node_modules/test.json doesn't exist
            as directory
              <PROJECT_ROOT>/node_modules/test doesn't exist
[<PROJECT_ROOT>/test/fixtures/error/node_modules]
[<PROJECT_ROOT>/test/fixtures/node_modules]
[<PROJECT_ROOT>/test/node_modules]
[<HOME_DIR>/code/node_modules]
[<HOME_DIR>/node_modules]
[/Users/node_modules]
[/node_modules]
[<PROJECT_ROOT>/node_modules/test]
[<PROJECT_ROOT>/node_modules/test.wasm]
[<PROJECT_ROOT>/node_modules/test.mjs]
[<PROJECT_ROOT>/node_modules/test.js]
[<PROJECT_ROOT>/node_modules/test.json]
 @ ./app.js 4:2-17
 @ multi ./app.js",
  ],
  "filteredAssets": 0,
  "filteredModules": 0,
  "hash": "171dc4ae799d9913730a",
  "modules": Array [
    Object {
      "assets": Array [],
      "built": true,
      "cacheable": true,
      "chunks": Array [
        0,
      ],
      "depth": 1,
      "errors": 0,
      "failed": false,
      "id": "./app.js",
      "identifier": "<PROJECT_ROOT>/test/fixtures/error/app.js",
      "index": 1,
      "index2": 0,
      "issuer": "multi ./app.js",
      "issuerId": 0,
      "issuerName": "multi ./app.js",
      "issuerPath": Array [
        Object {
          "id": 0,
          "identifier": "multi ./app.js",
          "name": "multi ./app.js",
          "profile": undefined,
        },
      ],
      "name": "./app.js",
      "optimizationBailout": Array [
        "ModuleConcatenation bailout: Module is not an ECMAScript module",
      ],
      "optional": false,
      "prefetched": false,
      "profile": undefined,
      "providedExports": null,
      "reasons": Array [
        Object {
          "explanation": undefined,
          "loc": "main:100000",
          "module": "multi ./app.js",
          "moduleId": 0,
          "moduleIdentifier": "multi ./app.js",
          "moduleName": "multi ./app.js",
          "type": "single entry",
          "userRequest": "./app.js",
        },
      ],
      "size": 58,
      "source": "/* eslint-disable */

if (!window) {
  require('test');
}
",
      "usedExports": true,
      "warnings": 0,
    },
    Object {
      "assets": Array [],
      "built": true,
      "cacheable": undefined,
      "chunks": Array [
        0,
      ],
      "depth": 0,
      "errors": 0,
      "failed": false,
      "id": 0,
      "identifier": "multi ./app.js",
      "index": 0,
      "index2": 1,
      "issuer": null,
      "issuerId": null,
      "issuerName": null,
      "issuerPath": null,
      "name": "multi ./app.js",
      "optimizationBailout": Array [
        "ModuleConcatenation bailout: Module is not an ECMAScript module",
      ],
      "optional": false,
      "prefetched": false,
      "profile": undefined,
      "providedExports": null,
      "reasons": Array [
        Object {
          "explanation": undefined,
          "module": null,
          "moduleId": null,
          "moduleIdentifier": null,
          "moduleName": null,
          "type": "multi entry",
          "userRequest": undefined,
        },
      ],
      "size": 28,
      "usedExports": true,
      "warnings": 0,
    },
  ],
  "namedChunkGroups": Object {
    "main": Object {
      "assets": Array [
        "./output.js",
        "./output.js.map",
      ],
      "childAssets": Object {},
      "children": Object {},
      "chunks": Array [
        0,
      ],
      "isOverSizeLimit": undefined,
    },
  },
  "outputPath": "<PROJECT_ROOT>/test/fixtures/error",
  "publicPath": "",
  "time": /\\\\d\\+/,
  "version": "4.10.2",
  "warnings": Array [
    "configuration
The 'mode' option has not been set, webpack will fallback to 'production' for this value. Set 'mode' option to 'development' or 'production' to enable defaults for each environment.
You can also set it to 'none' to disable any default behavior. Learn more: https://webpack.js.org/concepts/mode/",
  ],
}
`;

exports[`compiler errors 3`] = `
Compiler {
  "_pluginCompat": SyncBailHook {
    "_args": Array [
      "options",
    ],
    "_call": [Function],
    "_callAsync": [Function],
    "_promise": [Function],
    "_x": undefined,
    "call": [Function],
    "callAsync": [Function],
    "interceptors": Array [],
    "promise": [Function],
    "taps": Array [
      Object {
        "fn": [Function],
        "name": "Compiler",
        "type": "sync",
      },
      Object {
        "fn": [Function],
        "name": "Tapable camelCase",
        "stage": 100,
        "type": "sync",
      },
      Object {
        "fn": [Function],
        "name": "Tapable this.hooks",
        "stage": 200,
        "type": "sync",
      },
    ],
  },
  "context": "<PROJECT_ROOT>/test/fixtures/warning",
  "contextTimestamps": Map {},
  "dependencies": undefined,
  "fileTimestamps": Map {},
  "hooks": Object {
    "additionalPass": AsyncSeriesHook {
      "_args": Array [],
      "_call": undefined,
      "_callAsync": [Function],
      "_promise": [Function],
      "_x": undefined,
      "call": undefined,
      "callAsync": [Function],
      "interceptors": Array [],
      "promise": [Function],
      "taps": Array [],
    },
    "afterCompile": AsyncSeriesHook {
      "_args": Array [
        "compilation",
      ],
      "_call": undefined,
      "_callAsync": [Function],
      "_promise": [Function],
      "_x": undefined,
      "call": undefined,
      "callAsync": [Function],
      "interceptors": Array [],
      "promise": [Function],
      "taps": Array [],
    },
    "afterEmit": AsyncSeriesHook {
      "_args": Array [
        "compilation",
      ],
      "_call": undefined,
      "_callAsync": [Function],
      "_promise": [Function],
      "_x": undefined,
      "call": undefined,
      "callAsync": [Function],
      "interceptors": Array [],
      "promise": [Function],
      "taps": Array [
        Object {
          "fn": [Function],
          "name": "SizeLimitsPlugin",
          "type": "sync",
        },
      ],
    },
    "afterEnvironment": SyncHook {
      "_args": Array [],
      "_call": [Function],
      "_callAsync": [Function],
      "_promise": [Function],
      "_x": Array [],
      "call": [Function],
      "callAsync": [Function],
      "interceptors": Array [],
      "promise": [Function],
      "taps": Array [],
    },
    "afterPlugins": SyncHook {
      "_args": Array [
        "compiler",
      ],
      "_call": [Function],
      "_callAsync": [Function],
      "_promise": [Function],
      "_x": Array [],
      "call": [Function],
      "callAsync": [Function],
      "interceptors": Array [],
      "promise": [Function],
      "taps": Array [],
    },
    "afterResolvers": SyncHook {
      "_args": Array [
        "compiler",
      ],
      "_call": [Function],
      "_callAsync": [Function],
      "_promise": [Function],
      "_x": Array [
        [Function],
        [Function],
      ],
      "call": [Function],
      "callAsync": [Function],
      "interceptors": Array [],
      "promise": [Function],
      "taps": Array [
        Object {
          "fn": [Function],
          "name": "NodeSourcePlugin",
          "type": "sync",
        },
        Object {
          "fn": [Function],
          "name": "AMDPlugin",
          "type": "sync",
        },
      ],
    },
    "beforeCompile": AsyncSeriesHook {
      "_args": Array [
        "params",
      ],
      "_call": undefined,
      "_callAsync": [Function],
      "_promise": [Function],
      "_x": undefined,
      "call": undefined,
      "callAsync": [Function],
      "interceptors": Array [],
      "promise": [Function],
      "taps": Array [],
    },
    "beforeRun": AsyncSeriesHook {
      "_args": Array [
        "compilation",
      ],
      "_call": undefined,
      "_callAsync": [Function],
      "_promise": [Function],
      "_x": undefined,
      "call": undefined,
      "callAsync": [Function],
      "interceptors": Array [],
      "promise": [Function],
      "taps": Array [
        Object {
          "fn": [Function],
          "name": "NodeEnvironmentPlugin",
          "type": "sync",
        },
      ],
    },
    "compilation": SyncHook {
      "_args": Array [
        "compilation",
        "params",
      ],
      "_call": [Function],
      "_callAsync": [Function],
      "_promise": [Function],
      "_x": undefined,
      "call": [Function],
      "callAsync": [Function],
      "interceptors": Array [],
      "promise": [Function],
      "taps": Array [
        Object {
          "fn": [Function],
          "name": "NamedModulesPlugin",
          "type": "sync",
        },
        Object {
          "fn": [Function],
          "name": "FunctionModulePlugin",
          "type": "sync",
        },
        Object {
          "fn": [Function],
          "name": "NodeSourcePlugin",
          "type": "sync",
        },
        Object {
          "fn": [Function],
          "name": "LoaderTargetPlugin",
          "type": "sync",
        },
        Object {
          "fn": [Function],
          "name": "SourceMapDevToolPlugin",
          "type": "sync",
        },
        Object {
          "fn": [Function],
          "name": "JavascriptModulesPlugin",
          "type": "sync",
        },
        Object {
          "fn": [Function],
          "name": "JsonModulesPlugin",
          "type": "sync",
        },
        Object {
          "fn": [Function],
          "name": "WebAssemblyModulesPlugin",
          "type": "sync",
        },
        Object {
          "fn": [Function],
          "name": "MultiEntryPlugin",
          "type": "sync",
        },
        Object {
          "fn": [Function],
          "name": "CompatibilityPlugin",
          "type": "sync",
        },
        Object {
          "fn": [Function],
          "name": "HarmonyModulesPlugin",
          "type": "sync",
        },
        Object {
          "fn": [Function],
          "name": "AMDPlugin",
          "type": "sync",
        },
        Object {
          "fn": [Function],
          "name": "CommonJsPlugin",
          "type": "sync",
        },
        Object {
          "fn": [Function],
          "name": "LoaderPlugin",
          "type": "sync",
        },
        Object {
          "fn": [Function],
          "name": "LoaderPlugin",
          "type": "sync",
        },
        Object {
          "fn": [Function],
          "name": "NodeStuffPlugin",
          "type": "sync",
        },
        Object {
          "fn": [Function],
          "name": "RequireJsStuffPlugin",
          "type": "sync",
        },
        Object {
          "fn": [Function],
          "name": "APIPlugin",
          "type": "sync",
        },
        Object {
          "fn": [Function],
          "name": "ConstPlugin",
          "type": "sync",
        },
        Object {
          "fn": [Function],
          "name": "UseStrictPlugin",
          "type": "sync",
        },
        Object {
          "fn": [Function],
          "name": "RequireIncludePlugin",
          "type": "sync",
        },
        Object {
          "fn": [Function],
          "name": "RequireEnsurePlugin",
          "type": "sync",
        },
        Object {
          "fn": [Function],
          "name": "RequireContextPlugin",
          "type": "sync",
        },
        Object {
          "fn": [Function],
          "name": "ImportPlugin",
          "type": "sync",
        },
        Object {
          "fn": [Function],
          "name": "SystemPlugin",
          "type": "sync",
        },
        Object {
          "fn": [Function],
          "name": "EnsureChunkConditionsPlugin",
          "type": "sync",
        },
        Object {
          "fn": [Function],
          "name": "RemoveParentModulesPlugin",
          "type": "sync",
        },
        Object {
          "fn": [Function],
          "name": "RemoveEmptyChunksPlugin",
          "type": "sync",
        },
        Object {
          "fn": [Function],
          "name": "MergeDuplicateChunksPlugin",
          "type": "sync",
        },
        Object {
          "fn": [Function],
          "name": "FlagIncludedChunksPlugin",
          "type": "sync",
        },
        Object {
          "fn": [Function],
          "name": "OccurrenceOrderPlugin",
          "type": "sync",
        },
        Object {
          "fn": [Function],
          "name": "SideEffectsFlagPlugin",
          "type": "sync",
        },
        Object {
          "fn": [Function],
          "name": "FlagDependencyExportsPlugin",
          "type": "sync",
        },
        Object {
          "fn": [Function],
          "name": "FlagDependencyUsagePlugin",
          "type": "sync",
        },
        Object {
          "fn": [Function],
          "name": "ModuleConcatenationPlugin",
          "type": "sync",
        },
        Object {
          "fn": [Function],
          "name": "NoEmitOnErrorsPlugin",
          "type": "sync",
        },
        Object {
          "fn": [Function],
          "name": "DefinePlugin",
          "type": "sync",
        },
        Object {
          "fn": [Function],
          "name": "UglifyJSPlugin",
          "type": "sync",
        },
        Object {
          "fn": [Function],
          "name": "TemplatedPathPlugin",
          "type": "sync",
        },
        Object {
          "fn": [Function],
          "name": "RecordIdsPlugin",
          "type": "sync",
        },
        Object {
          "fn": [Function],
          "name": "WarnCaseSensitiveModulesPlugin",
          "type": "sync",
        },
      ],
    },
    "compile": SyncHook {
      "_args": Array [
        "params",
      ],
      "_call": [Function],
      "_callAsync": [Function],
      "_promise": [Function],
      "_x": undefined,
      "call": [Function],
      "callAsync": [Function],
      "interceptors": Array [],
      "promise": [Function],
      "taps": Array [
        Object {
          "fn": [Function],
          "name": "WebpackServe",
          "type": "sync",
        },
      ],
    },
    "contextModuleFactory": SyncHook {
      "_args": Array [
        "contextModulefactory",
      ],
      "_call": [Function],
      "_callAsync": [Function],
      "_promise": [Function],
      "_x": undefined,
      "call": [Function],
      "callAsync": [Function],
      "interceptors": Array [],
      "promise": [Function],
      "taps": Array [],
    },
    "done": AsyncSeriesHook {
      "_args": Array [
        "stats",
      ],
      "_call": undefined,
      "_callAsync": [Function],
      "_promise": [Function],
      "_x": undefined,
      "call": undefined,
      "callAsync": [Function],
      "interceptors": Array [],
      "promise": [Function],
      "taps": Array [
        Object {
          "fn": [Function],
          "name": "WebpackServe",
          "type": "sync",
        },
      ],
    },
    "emit": AsyncSeriesHook {
      "_args": Array [
        "compilation",
      ],
      "_call": undefined,
      "_callAsync": [Function],
      "_promise": [Function],
      "_x": undefined,
      "call": undefined,
      "callAsync": [Function],
      "interceptors": Array [],
      "promise": [Function],
      "taps": Array [],
    },
    "entryOption": SyncBailHook {
      "_args": Array [
        "context",
        "entry",
      ],
      "_call": [Function],
      "_callAsync": [Function],
      "_promise": [Function],
      "_x": Array [
        [Function],
      ],
      "call": [Function],
      "callAsync": [Function],
      "interceptors": Array [],
      "promise": [Function],
      "taps": Array [
        Object {
          "fn": [Function],
          "name": "EntryOptionPlugin",
          "type": "sync",
        },
      ],
    },
    "environment": SyncHook {
      "_args": Array [],
      "_call": [Function],
      "_callAsync": [Function],
      "_promise": [Function],
      "_x": Array [],
      "call": [Function],
      "callAsync": [Function],
      "interceptors": Array [],
      "promise": [Function],
      "taps": Array [],
    },
    "failed": SyncHook {
      "_args": Array [
        "error",
      ],
      "_call": [Function],
      "_callAsync": [Function],
      "_promise": [Function],
      "_x": undefined,
      "call": [Function],
      "callAsync": [Function],
      "interceptors": Array [],
      "promise": [Function],
      "taps": Array [],
    },
    "invalid": SyncHook {
      "_args": Array [
        "filename",
        "changeTime",
      ],
      "_call": [Function],
      "_callAsync": [Function],
      "_promise": [Function],
      "_x": undefined,
      "call": [Function],
      "callAsync": [Function],
      "interceptors": Array [],
      "promise": [Function],
      "taps": Array [],
    },
    "make": AsyncParallelHook {
      "_args": Array [
        "compilation",
      ],
      "_call": undefined,
      "_callAsync": [Function],
      "_promise": [Function],
      "_x": undefined,
      "call": undefined,
      "callAsync": [Function],
      "interceptors": Array [],
      "promise": [Function],
      "taps": Array [
        Object {
          "fn": [Function],
          "name": "MultiEntryPlugin",
          "type": "async",
        },
      ],
    },
    "normalModuleFactory": SyncHook {
      "_args": Array [
        "normalModuleFactory",
      ],
      "_call": [Function],
      "_callAsync": [Function],
      "_promise": [Function],
      "_x": undefined,
      "call": [Function],
      "callAsync": [Function],
      "interceptors": Array [],
      "promise": [Function],
      "taps": Array [
        Object {
          "fn": [Function],
          "name": "SideEffectsFlagPlugin",
          "type": "sync",
        },
      ],
    },
    "run": AsyncSeriesHook {
      "_args": Array [
        "compilation",
      ],
      "_call": undefined,
      "_callAsync": [Function],
      "_promise": [Function],
      "_x": undefined,
      "call": undefined,
      "callAsync": [Function],
      "interceptors": Array [],
      "promise": [Function],
      "taps": Array [],
    },
    "shouldEmit": SyncBailHook {
      "_args": Array [
        "compilation",
      ],
      "_call": [Function],
      "_callAsync": [Function],
      "_promise": [Function],
      "_x": undefined,
      "call": [Function],
      "callAsync": [Function],
      "interceptors": Array [],
      "promise": [Function],
      "taps": Array [
        Object {
          "fn": [Function],
          "name": "NoEmitOnErrorsPlugin",
          "type": "sync",
        },
      ],
    },
    "thisCompilation": SyncHook {
      "_args": Array [
        "compilation",
        "params",
      ],
      "_call": [Function],
      "_callAsync": [Function],
      "_promise": [Function],
      "_x": undefined,
      "call": [Function],
      "callAsync": [Function],
      "interceptors": Array [],
      "promise": [Function],
      "taps": Array [
        Object {
          "fn": [Function],
          "name": "JsonpTemplatePlugin",
          "type": "sync",
        },
        Object {
          "fn": [Function],
          "name": "FetchCompileWasmTemplatePlugin",
          "type": "sync",
        },
        Object {
          "fn": [Function],
          "name": "WarnNoModeSetPlugin",
          "type": "sync",
        },
        Object {
          "fn": [Function],
          "name": "SplitChunksPlugin",
          "type": "sync",
        },
      ],
    },
    "watchClose": SyncHook {
      "_args": Array [],
      "_call": [Function],
      "_callAsync": [Function],
      "_promise": [Function],
      "_x": undefined,
      "call": [Function],
      "callAsync": [Function],
      "interceptors": Array [],
      "promise": [Function],
      "taps": Array [],
    },
    "watchRun": AsyncSeriesHook {
      "_args": Array [
        "compiler",
      ],
      "_call": undefined,
      "_callAsync": [Function],
      "_promise": [Function],
      "_x": undefined,
      "call": undefined,
      "callAsync": [Function],
      "interceptors": Array [],
      "promise": [Function],
      "taps": Array [],
    },
  },
  "inputFileSystem": CachedInputFileSystem {
    "_readFile": [Function],
    "_readFileStorage": Storage {
      "count": 0,
      "data": Map {},
      "duration": 60000,
      "interval": null,
      "levels": Array [
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
      ],
      "needTickCheck": false,
      "nextTick": null,
      "passive": true,
      "running": Map {},
      "tick": [Function],
    },
    "_readFileSync": [Function],
    "_readJson": [Function],
    "_readJsonStorage": Storage {
      "count": 0,
      "data": Map {},
      "duration": 60000,
      "interval": null,
      "levels": Array [
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
      ],
      "needTickCheck": false,
      "nextTick": null,
      "passive": true,
      "running": Map {},
      "tick": [Function],
    },
    "_readJsonSync": [Function],
    "_readdir": [Function],
    "_readdirStorage": Storage {
      "count": 0,
      "data": Map {},
      "duration": 60000,
      "interval": null,
      "levels": Array [
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
      ],
      "needTickCheck": false,
      "nextTick": null,
      "passive": true,
      "running": Map {},
      "tick": [Function],
    },
    "_readdirSync": [Function],
    "_readlink": [Function],
    "_readlinkStorage": Storage {
      "count": 0,
      "data": Map {},
      "duration": 60000,
      "interval": null,
      "levels": Array [
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
      ],
      "needTickCheck": false,
      "nextTick": null,
      "passive": true,
      "running": Map {},
      "tick": [Function],
    },
    "_readlinkSync": [Function],
    "_stat": [Function],
    "_statStorage": Storage {
      "count": 0,
      "data": Map {},
      "duration": 60000,
      "interval": null,
      "levels": Array [
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
      ],
      "needTickCheck": false,
      "nextTick": null,
      "passive": true,
      "running": Map {},
      "tick": [Function],
    },
    "_statSync": [Function],
    "fileSystem": NodeJsInputFileSystem {},
  },
  "name": undefined,
  "options": Object {
    "cache": false,
    "context": "<PROJECT_ROOT>/test/fixtures/warning",
    "devtool": "source-map",
    "entry": Array [
      "./app.js",
    ],
    "module": Object {
      "defaultRules": Array [
        Object {
          "resolve": Object {},
          "type": "javascript/auto",
        },
        Object {
          "resolve": Object {
            "mainFields": Array [
              "browser",
              "main",
            ],
          },
          "test": /\\\\\\.mjs\\$/i,
          "type": "javascript/esm",
        },
        Object {
          "test": /\\\\\\.json\\$/i,
          "type": "json",
        },
        Object {
          "test": /\\\\\\.wasm\\$/i,
          "type": "webassembly/experimental",
        },
      ],
      "exprContextCritical": true,
      "exprContextRecursive": true,
      "exprContextRegExp": false,
      "exprContextRequest": ".",
      "rules": Array [],
      "strictExportPresence": false,
      "strictThisContextOnImports": false,
      "unknownContextCritical": true,
      "unknownContextRecursive": true,
      "unknownContextRegExp": false,
      "unknownContextRequest": ".",
      "unsafeCache": false,
      "wrappedContextCritical": false,
      "wrappedContextRecursive": true,
      "wrappedContextRegExp": /\\.\\*/,
    },
    "node": Object {
      "Buffer": true,
      "__dirname": "mock",
      "__filename": "mock",
      "console": false,
      "global": true,
      "process": true,
      "setImmediate": true,
    },
    "optimization": Object {
      "concatenateModules": true,
      "flagIncludedChunks": true,
      "mergeDuplicateChunks": true,
      "minimize": true,
      "minimizer": Array [
        Object {
          "apply": [Function],
        },
      ],
      "namedChunks": false,
      "namedModules": false,
      "noEmitOnErrors": true,
      "nodeEnv": "production",
      "occurrenceOrder": true,
      "portableRecords": false,
      "providedExports": true,
      "removeAvailableModules": true,
      "removeEmptyChunks": true,
      "runtimeChunk": undefined,
      "sideEffects": true,
      "splitChunks": Object {
        "automaticNameDelimiter": "~",
        "cacheGroups": Object {
          "default": Object {
            "minChunks": 2,
            "priority": -20,
            "reuseExistingChunk": true,
          },
          "vendors": Object {
            "priority": -10,
            "test": /\\[\\\\\\\\\\\\/\\]node_modules\\[\\\\\\\\\\\\/\\]/,
          },
        },
        "chunks": "async",
        "maxAsyncRequests": 5,
        "maxInitialRequests": 3,
        "minChunks": 1,
        "minSize": 30000,
        "name": true,
      },
      "usedExports": true,
    },
    "output": Object {
      "chunkCallbackName": "webpackChunk",
      "chunkFilename": "./[id].output.js",
      "chunkLoadTimeout": 120000,
      "crossOriginLoading": false,
      "devtoolLineToLine": false,
      "devtoolNamespace": "",
      "filename": "./output.js",
      "globalObject": "window",
      "hashDigest": "hex",
      "hashDigestLength": 20,
      "hashFunction": "md4",
      "hotUpdateChunkFilename": "[id].[hash].hot-update.js",
      "hotUpdateFunction": "webpackHotUpdate",
      "hotUpdateMainFilename": "[hash].hot-update.json",
      "jsonpFunction": "webpackJsonp",
      "jsonpScriptType": false,
      "library": "",
      "libraryTarget": "var",
      "path": "<PROJECT_ROOT>/test/fixtures/warning",
      "pathinfo": false,
      "sourceMapFilename": "[file].map[query]",
      "strictModuleExceptionHandling": false,
      "webassemblyModuleFilename": "[modulehash].module.wasm",
    },
    "performance": Object {
      "hints": "warning",
      "maxAssetSize": 250000,
      "maxEntrypointSize": 250000,
    },
    "plugins": Array [
      NamedModulesPlugin {
        "options": Object {},
      },
    ],
    "resolve": Object {
      "aliasFields": Array [
        "browser",
      ],
      "cacheWithContext": false,
      "extensions": Array [
        ".wasm",
        ".mjs",
        ".js",
        ".json",
      ],
      "mainFields": Array [
        "browser",
        "module",
        "main",
      ],
      "mainFiles": Array [
        "index",
      ],
      "modules": Array [
        "node_modules",
      ],
      "unsafeCache": true,
    },
    "resolveLoader": Object {
      "cacheWithContext": false,
      "extensions": Array [
        ".js",
        ".json",
      ],
      "mainFields": Array [
        "loader",
        "main",
      ],
      "mainFiles": Array [
        "index",
      ],
      "unsafeCache": true,
    },
    "serve": Object {},
    "target": "web",
  },
  "outputFileSystem": NodeOutputFileSystem {
    "join": [Function],
    "mkdir": [Function],
    "mkdirp": [Function],
    "rmdir": [Function],
    "unlink": [Function],
    "writeFile": [Function],
  },
  "outputPath": "<PROJECT_ROOT>/test/fixtures/warning",
  "parentCompilation": undefined,
  "records": Object {},
  "recordsInputPath": undefined,
  "recordsOutputPath": undefined,
  "requestShortener": RequestShortener {
    "buildinsAsModule": false,
    "buildinsRegExp": /\\(\\^\\|!\\)\\\\/Users\\\\/powella\\\\/code\\\\/webpack\\\\-serve\\\\/node_modules\\\\/webpack/g,
    "cache": Map {},
    "currentDirectoryRegExp": /\\(\\^\\|!\\)\\\\/Users\\\\/powella\\\\/code\\\\/webpack\\\\-serve\\\\/test\\\\/fixtures\\\\/warning/g,
    "parentDirectoryRegExp": /\\(\\^\\|!\\)\\\\/Users\\\\/powella\\\\/code\\\\/webpack\\\\-serve\\\\/test\\\\/fixtures/g,
  },
  "resolverFactory": ResolverFactory {
    "_pluginCompat": SyncBailHook {
      "_args": Array [
        "options",
      ],
      "_call": [Function],
      "_callAsync": [Function],
      "_promise": [Function],
      "_x": undefined,
      "call": [Function],
      "callAsync": [Function],
      "interceptors": Array [],
      "promise": [Function],
      "taps": Array [
        Object {
          "fn": [Function],
          "name": "ResolverFactory",
          "type": "sync",
        },
        Object {
          "fn": [Function],
          "name": "Tapable camelCase",
          "stage": 100,
          "type": "sync",
        },
        Object {
          "fn": [Function],
          "name": "Tapable this.hooks",
          "stage": 200,
          "type": "sync",
        },
      ],
    },
    "cache1": WeakMap {},
    "cache2": Map {},
    "hooks": Object {
      "resolveOptions": HookMap {
        "_factory": [Function],
        "_interceptors": Array [],
        "_map": Map {
          "normal" => SyncWaterfallHook {
            "_args": Array [
              "resolveOptions",
            ],
            "_call": [Function],
            "_callAsync": [Function],
            "_promise": [Function],
            "_x": undefined,
            "call": [Function],
            "callAsync": [Function],
            "interceptors": Array [],
            "promise": [Function],
            "taps": Array [
              Object {
                "fn": [Function],
                "name": "WebpackOptionsApply",
                "type": "sync",
              },
            ],
          },
          "context" => SyncWaterfallHook {
            "_args": Array [
              "resolveOptions",
            ],
            "_call": [Function],
            "_callAsync": [Function],
            "_promise": [Function],
            "_x": undefined,
            "call": [Function],
            "callAsync": [Function],
            "interceptors": Array [],
            "promise": [Function],
            "taps": Array [
              Object {
                "fn": [Function],
                "name": "WebpackOptionsApply",
                "type": "sync",
              },
            ],
          },
          "loader" => SyncWaterfallHook {
            "_args": Array [
              "resolveOptions",
            ],
            "_call": [Function],
            "_callAsync": [Function],
            "_promise": [Function],
            "_x": undefined,
            "call": [Function],
            "callAsync": [Function],
            "interceptors": Array [],
            "promise": [Function],
            "taps": Array [
              Object {
                "fn": [Function],
                "name": "WebpackOptionsApply",
                "type": "sync",
              },
            ],
          },
        },
      },
      "resolver": HookMap {
        "_factory": [Function],
        "_interceptors": Array [],
        "_map": Map {
          "normal" => SyncHook {
            "_args": Array [
              "resolver",
              "resolveOptions",
            ],
            "_call": [Function],
            "_callAsync": [Function],
            "_promise": [Function],
            "_x": undefined,
            "call": [Function],
            "callAsync": [Function],
            "interceptors": Array [],
            "promise": [Function],
            "taps": Array [
              Object {
                "fn": [Function],
                "name": "NodeSourcePlugin",
                "type": "sync",
              },
              Object {
                "fn": [Function],
                "name": "NodeSourcePlugin",
                "type": "sync",
              },
              Object {
                "fn": [Function],
                "name": "NodeSourcePlugin",
                "type": "sync",
              },
              Object {
                "fn": [Function],
                "name": "NodeSourcePlugin",
                "type": "sync",
              },
              Object {
                "fn": [Function],
                "name": "NodeSourcePlugin",
                "type": "sync",
              },
              Object {
                "fn": [Function],
                "name": "NodeSourcePlugin",
                "type": "sync",
              },
              Object {
                "fn": [Function],
                "name": "NodeSourcePlugin",
                "type": "sync",
              },
              Object {
                "fn": [Function],
                "name": "NodeSourcePlugin",
                "type": "sync",
              },
              Object {
                "fn": [Function],
                "name": "NodeSourcePlugin",
                "type": "sync",
              },
              Object {
                "fn": [Function],
                "name": "NodeSourcePlugin",
                "type": "sync",
              },
              Object {
                "fn": [Function],
                "name": "NodeSourcePlugin",
                "type": "sync",
              },
              Object {
                "fn": [Function],
                "name": "NodeSourcePlugin",
                "type": "sync",
              },
              Object {
                "fn": [Function],
                "name": "NodeSourcePlugin",
                "type": "sync",
              },
              Object {
                "fn": [Function],
                "name": "NodeSourcePlugin",
                "type": "sync",
              },
              Object {
                "fn": [Function],
                "name": "NodeSourcePlugin",
                "type": "sync",
              },
              Object {
                "fn": [Function],
                "name": "NodeSourcePlugin",
                "type": "sync",
              },
              Object {
                "fn": [Function],
                "name": "NodeSourcePlugin",
                "type": "sync",
              },
              Object {
                "fn": [Function],
                "name": "NodeSourcePlugin",
                "type": "sync",
              },
              Object {
                "fn": [Function],
                "name": "NodeSourcePlugin",
                "type": "sync",
              },
              Object {
                "fn": [Function],
                "name": "NodeSourcePlugin",
                "type": "sync",
              },
              Object {
                "fn": [Function],
                "name": "NodeSourcePlugin",
                "type": "sync",
              },
              Object {
                "fn": [Function],
                "name": "NodeSourcePlugin",
                "type": "sync",
              },
              Object {
                "fn": [Function],
                "name": "NodeSourcePlugin",
                "type": "sync",
              },
              Object {
                "fn": [Function],
                "name": "NodeSourcePlugin",
                "type": "sync",
              },
              Object {
                "fn": [Function],
                "name": "NodeSourcePlugin",
                "type": "sync",
              },
              Object {
                "fn": [Function],
                "name": "NodeSourcePlugin",
                "type": "sync",
              },
              Object {
                "fn": [Function],
                "name": "NodeSourcePlugin",
                "type": "sync",
              },
              Object {
                "fn": [Function],
                "name": "NodeSourcePlugin",
                "type": "sync",
              },
              Object {
                "fn": [Function],
                "name": "NodeSourcePlugin",
                "type": "sync",
              },
              Object {
                "fn": [Function],
                "name": "NodeSourcePlugin",
                "type": "sync",
              },
              Object {
                "fn": [Function],
                "name": "NodeSourcePlugin",
                "type": "sync",
              },
              Object {
                "fn": [Function],
                "name": "NodeSourcePlugin",
                "type": "sync",
              },
              Object {
                "fn": [Function],
                "name": "NodeSourcePlugin",
                "type": "sync",
              },
              Object {
                "fn": [Function],
                "name": "NodeSourcePlugin",
                "type": "sync",
              },
              Object {
                "fn": [Function],
                "name": "NodeSourcePlugin",
                "type": "sync",
              },
              Object {
                "fn": [Function],
                "name": "NodeSourcePlugin",
                "type": "sync",
              },
              Object {
                "fn": [Function],
                "name": "NodeSourcePlugin",
                "type": "sync",
              },
              Object {
                "fn": [Function],
                "name": "AMDPlugin",
                "type": "sync",
              },
            ],
          },
        },
      },
    },
  },
  "resolvers": Object {
    "context": Object {
      "apply": [Function],
      "plugins": [Function],
    },
    "loader": Object {
      "apply": [Function],
      "plugins": [Function],
    },
    "normal": Object {
      "apply": [Function],
      "plugins": [Function],
    },
  },
  "running": false,
  "watchFileSystem": NodeWatchFileSystem {
    "inputFileSystem": CachedInputFileSystem {
      "_readFile": [Function],
      "_readFileStorage": Storage {
        "count": 0,
        "data": Map {},
        "duration": 60000,
        "interval": null,
        "levels": Array [
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
        ],
        "needTickCheck": false,
        "nextTick": null,
        "passive": true,
        "running": Map {},
        "tick": [Function],
      },
      "_readFileSync": [Function],
      "_readJson": [Function],
      "_readJsonStorage": Storage {
        "count": 0,
        "data": Map {},
        "duration": 60000,
        "interval": null,
        "levels": Array [
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
        ],
        "needTickCheck": false,
        "nextTick": null,
        "passive": true,
        "running": Map {},
        "tick": [Function],
      },
      "_readJsonSync": [Function],
      "_readdir": [Function],
      "_readdirStorage": Storage {
        "count": 0,
        "data": Map {},
        "duration": 60000,
        "interval": null,
        "levels": Array [
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
        ],
        "needTickCheck": false,
        "nextTick": null,
        "passive": true,
        "running": Map {},
        "tick": [Function],
      },
      "_readdirSync": [Function],
      "_readlink": [Function],
      "_readlinkStorage": Storage {
        "count": 0,
        "data": Map {},
        "duration": 60000,
        "interval": null,
        "levels": Array [
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
        ],
        "needTickCheck": false,
        "nextTick": null,
        "passive": true,
        "running": Map {},
        "tick": [Function],
      },
      "_readlinkSync": [Function],
      "_stat": [Function],
      "_statStorage": Storage {
        "count": 0,
        "data": Map {},
        "duration": 60000,
        "interval": null,
        "levels": Array [
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
        ],
        "needTickCheck": false,
        "nextTick": null,
        "passive": true,
        "running": Map {},
        "tick": [Function],
      },
      "_statSync": [Function],
      "fileSystem": NodeJsInputFileSystem {},
    },
    "watcher": EventEmitter {
      "_events": Object {},
      "_eventsCount": 0,
      "_maxListeners": undefined,
      "_onTimeout": [Function],
      "aggregateTimeout": 0,
      "aggregatedChanges": Array [],
      "aggregatedRemovals": Array [],
      "dirWatchers": Array [],
      "fileWatchers": Array [],
      "mtimes": Object {},
      "options": Object {
        "aggregateTimeout": 200,
      },
      "paused": false,
      "watcherOptions": Object {
        "ignored": undefined,
        "poll": undefined,
      },
    },
    "watcherOptions": Object {
      "aggregateTimeout": 200,
    },
  },
}
`;

exports[`compiler errors 4`] = `
Object {
  "assets": Array [
    Object {
      "chunkNames": Array [
        "main",
      ],
      "chunks": Array [
        0,
      ],
      "emitted": true,
      "isOverSizeLimit": undefined,
      "name": "./output.js",
      "size": 1262,
    },
    Object {
      "chunkNames": Array [
        "main",
      ],
      "chunks": Array [
        0,
      ],
      "emitted": true,
      "isOverSizeLimit": undefined,
      "name": "./output.js.map",
      "size": 5218,
    },
  ],
  "assetsByChunkName": Object {
    "main": Array [
      "./output.js",
      "./output.js.map",
    ],
  },
  "builtAt": /\\\\d\\+/,
  "children": Array [],
  "chunks": Array [
    Object {
      "children": Array [],
      "childrenByOrder": Object {},
      "entry": true,
      "files": Array [
        "./output.js",
        "./output.js.map",
      ],
      "filteredModules": 0,
      "hash": "1b8586e59528cce494a5",
      "id": 0,
      "initial": true,
      "modules": Array [
        Object {
          "assets": Array [],
          "built": true,
          "cacheable": undefined,
          "chunks": Array [
            0,
          ],
          "depth": 2,
          "errors": 0,
          "failed": false,
          "id": "./ sync recursive",
          "identifier": "<PROJECT_ROOT>/test/fixtures/warning sync",
          "index": 2,
          "index2": 0,
          "issuer": "<PROJECT_ROOT>/test/fixtures/warning/app.js",
          "issuerId": "./app.js",
          "issuerName": "./app.js",
          "issuerPath": Array [
            Object {
              "id": 0,
              "identifier": "multi ./app.js",
              "name": "multi ./app.js",
              "profile": undefined,
            },
            Object {
              "id": "./app.js",
              "identifier": "<PROJECT_ROOT>/test/fixtures/warning/app.js",
              "name": "./app.js",
              "profile": undefined,
            },
          ],
          "name": ". sync",
          "optimizationBailout": Array [
            "ModuleConcatenation bailout: Module is not an ECMAScript module",
          ],
          "optional": false,
          "prefetched": false,
          "profile": undefined,
          "providedExports": null,
          "reasons": Array [
            Object {
              "explanation": undefined,
              "loc": "3:12-19",
              "module": "./app.js",
              "moduleId": "./app.js",
              "moduleIdentifier": "<PROJECT_ROOT>/test/fixtures/warning/app.js",
              "moduleName": "./app.js",
              "type": "cjs require context",
              "userRequest": ".",
            },
          ],
          "size": 160,
          "usedExports": true,
          "warnings": 0,
        },
        Object {
          "assets": Array [],
          "built": true,
          "cacheable": true,
          "chunks": Array [
            0,
          ],
          "depth": 1,
          "errors": 0,
          "failed": false,
          "id": "./app.js",
          "identifier": "<PROJECT_ROOT>/test/fixtures/warning/app.js",
          "index": 1,
          "index2": 1,
          "issuer": "multi ./app.js",
          "issuerId": 0,
          "issuerName": "multi ./app.js",
          "issuerPath": Array [
            Object {
              "id": 0,
              "identifier": "multi ./app.js",
              "name": "multi ./app.js",
              "profile": undefined,
            },
          ],
          "name": "./app.js",
          "optimizationBailout": Array [
            "ModuleConcatenation bailout: Module is not an ECMAScript module",
          ],
          "optional": false,
          "prefetched": false,
          "profile": undefined,
          "providedExports": null,
          "reasons": Array [
            Object {
              "explanation": undefined,
              "loc": "main:100000",
              "module": "multi ./app.js",
              "moduleId": 0,
              "moduleIdentifier": "multi ./app.js",
              "moduleName": "multi ./app.js",
              "type": "single entry",
              "userRequest": "./app.js",
            },
          ],
          "size": 52,
          "source": "/* eslint no-console: off */

console.log(require);
",
          "usedExports": true,
          "warnings": 0,
        },
        Object {
          "assets": Array [],
          "built": true,
          "cacheable": undefined,
          "chunks": Array [
            0,
          ],
          "depth": 0,
          "errors": 0,
          "failed": false,
          "id": 0,
          "identifier": "multi ./app.js",
          "index": 0,
          "index2": 2,
          "issuer": null,
          "issuerId": null,
          "issuerName": null,
          "issuerPath": null,
          "name": "multi ./app.js",
          "optimizationBailout": Array [
            "ModuleConcatenation bailout: Module is not an ECMAScript module",
          ],
          "optional": false,
          "prefetched": false,
          "profile": undefined,
          "providedExports": null,
          "reasons": Array [
            Object {
              "explanation": undefined,
              "module": null,
              "moduleId": null,
              "moduleIdentifier": null,
              "moduleName": null,
              "type": "multi entry",
              "userRequest": undefined,
            },
          ],
          "size": 28,
          "usedExports": true,
          "warnings": 0,
        },
      ],
      "names": Array [
        "main",
      ],
      "origins": Array [
        Object {
          "loc": "main",
          "module": "",
          "moduleId": undefined,
          "moduleIdentifier": "",
          "moduleName": "",
          "reasons": Array [],
          "request": undefined,
        },
      ],
      "parents": Array [],
      "reason": undefined,
      "recorded": undefined,
      "rendered": true,
      "siblings": Array [],
      "size": 240,
    },
  ],
  "entrypoints": Object {
    "main": Object {
      "assets": Array [
        "./output.js",
        "./output.js.map",
      ],
      "childAssets": Object {},
      "children": Object {},
      "chunks": Array [
        0,
      ],
      "isOverSizeLimit": undefined,
    },
  },
  "errors": Array [],
  "filteredAssets": 0,
  "filteredModules": 0,
  "hash": "f54d9493ed38e0b3c253",
  "modules": Array [
    Object {
      "assets": Array [],
      "built": true,
      "cacheable": undefined,
      "chunks": Array [
        0,
      ],
      "depth": 2,
      "errors": 0,
      "failed": false,
      "id": "./ sync recursive",
      "identifier": "<PROJECT_ROOT>/test/fixtures/warning sync",
      "index": 2,
      "index2": 0,
      "issuer": "<PROJECT_ROOT>/test/fixtures/warning/app.js",
      "issuerId": "./app.js",
      "issuerName": "./app.js",
      "issuerPath": Array [
        Object {
          "id": 0,
          "identifier": "multi ./app.js",
          "name": "multi ./app.js",
          "profile": undefined,
        },
        Object {
          "id": "./app.js",
          "identifier": "<PROJECT_ROOT>/test/fixtures/warning/app.js",
          "name": "./app.js",
          "profile": undefined,
        },
      ],
      "name": ". sync",
      "optimizationBailout": Array [
        "ModuleConcatenation bailout: Module is not an ECMAScript module",
      ],
      "optional": false,
      "prefetched": false,
      "profile": undefined,
      "providedExports": null,
      "reasons": Array [
        Object {
          "explanation": undefined,
          "loc": "3:12-19",
          "module": "./app.js",
          "moduleId": "./app.js",
          "moduleIdentifier": "<PROJECT_ROOT>/test/fixtures/warning/app.js",
          "moduleName": "./app.js",
          "type": "cjs require context",
          "userRequest": ".",
        },
      ],
      "size": 160,
      "usedExports": true,
      "warnings": 0,
    },
    Object {
      "assets": Array [],
      "built": true,
      "cacheable": true,
      "chunks": Array [
        0,
      ],
      "depth": 1,
      "errors": 0,
      "failed": false,
      "id": "./app.js",
      "identifier": "<PROJECT_ROOT>/test/fixtures/warning/app.js",
      "index": 1,
      "index2": 1,
      "issuer": "multi ./app.js",
      "issuerId": 0,
      "issuerName": "multi ./app.js",
      "issuerPath": Array [
        Object {
          "id": 0,
          "identifier": "multi ./app.js",
          "name": "multi ./app.js",
          "profile": undefined,
        },
      ],
      "name": "./app.js",
      "optimizationBailout": Array [
        "ModuleConcatenation bailout: Module is not an ECMAScript module",
      ],
      "optional": false,
      "prefetched": false,
      "profile": undefined,
      "providedExports": null,
      "reasons": Array [
        Object {
          "explanation": undefined,
          "loc": "main:100000",
          "module": "multi ./app.js",
          "moduleId": 0,
          "moduleIdentifier": "multi ./app.js",
          "moduleName": "multi ./app.js",
          "type": "single entry",
          "userRequest": "./app.js",
        },
      ],
      "size": 52,
      "source": "/* eslint no-console: off */

console.log(require);
",
      "usedExports": true,
      "warnings": 0,
    },
    Object {
      "assets": Array [],
      "built": true,
      "cacheable": undefined,
      "chunks": Array [
        0,
      ],
      "depth": 0,
      "errors": 0,
      "failed": false,
      "id": 0,
      "identifier": "multi ./app.js",
      "index": 0,
      "index2": 2,
      "issuer": null,
      "issuerId": null,
      "issuerName": null,
      "issuerPath": null,
      "name": "multi ./app.js",
      "optimizationBailout": Array [
        "ModuleConcatenation bailout: Module is not an ECMAScript module",
      ],
      "optional": false,
      "prefetched": false,
      "profile": undefined,
      "providedExports": null,
      "reasons": Array [
        Object {
          "explanation": undefined,
          "module": null,
          "moduleId": null,
          "moduleIdentifier": null,
          "moduleName": null,
          "type": "multi entry",
          "userRequest": undefined,
        },
      ],
      "size": 28,
      "usedExports": true,
      "warnings": 0,
    },
  ],
  "namedChunkGroups": Object {
    "main": Object {
      "assets": Array [
        "./output.js",
        "./output.js.map",
      ],
      "childAssets": Object {},
      "children": Object {},
      "chunks": Array [
        0,
      ],
      "isOverSizeLimit": undefined,
    },
  },
  "outputPath": "<PROJECT_ROOT>/test/fixtures/warning",
  "publicPath": "",
  "time": /\\\\d\\+/,
  "version": "4.10.2",
  "warnings": Array [
    "./app.js
3:12-19 Critical dependency: require function is used in a way in which dependencies cannot be statically extracted
    at CommonJsRequireContextDependency.getWarnings (<PROJECT_ROOT>/node_modules/webpack/lib/dependencies/ContextDependency.js:40:18)
    at Compilation.reportDependencyErrorsAndWarnings (<PROJECT_ROOT>/node_modules/webpack/lib/Compilation.js:1004:24)
    at Compilation.finish (<PROJECT_ROOT>/node_modules/webpack/lib/Compilation.js:831:9)
    at hooks.make.callAsync.err (<PROJECT_ROOT>/node_modules/webpack/lib/Compiler.js:492:17)
    at _err0 (eval at create (<PROJECT_ROOT>/node_modules/tapable/lib/HookCodeFactory.js:24:12), <anonymous>:11:1)
    at _addModuleChain (<PROJECT_ROOT>/node_modules/webpack/lib/Compilation.js:770:12)
    at processModuleDependencies.err (<PROJECT_ROOT>/node_modules/webpack/lib/Compilation.js:709:9)
    at process._tickCallback (internal/process/next_tick.js:61:11)
 @ ./app.js
 @ multi ./app.js",
    "configuration
The 'mode' option has not been set, webpack will fallback to 'production' for this value. Set 'mode' option to 'development' or 'production' to enable defaults for each environment.
You can also set it to 'none' to disable any default behavior. Learn more: https://webpack.js.org/concepts/mode/",
  ],
}
`;

exports[`compiler getCompiler 1`] = `
Compiler {
  "_pluginCompat": SyncBailHook {
    "_args": Array [
      "options",
    ],
    "_call": [Function],
    "_callAsync": [Function],
    "_promise": [Function],
    "_x": undefined,
    "call": [Function],
    "callAsync": [Function],
    "interceptors": Array [],
    "promise": [Function],
    "taps": Array [
      Object {
        "fn": [Function],
        "name": "Compiler",
        "type": "sync",
      },
      Object {
        "fn": [Function],
        "name": "Tapable camelCase",
        "stage": 100,
        "type": "sync",
      },
      Object {
        "fn": [Function],
        "name": "Tapable this.hooks",
        "stage": 200,
        "type": "sync",
      },
    ],
  },
  "context": "<PROJECT_ROOT>/test/fixtures/basic",
  "contextTimestamps": Map {},
  "dependencies": undefined,
  "fileTimestamps": Map {},
  "hooks": Object {
    "additionalPass": AsyncSeriesHook {
      "_args": Array [],
      "_call": undefined,
      "_callAsync": [Function],
      "_promise": [Function],
      "_x": undefined,
      "call": undefined,
      "callAsync": [Function],
      "interceptors": Array [],
      "promise": [Function],
      "taps": Array [],
    },
    "afterCompile": AsyncSeriesHook {
      "_args": Array [
        "compilation",
      ],
      "_call": undefined,
      "_callAsync": [Function],
      "_promise": [Function],
      "_x": undefined,
      "call": undefined,
      "callAsync": [Function],
      "interceptors": Array [],
      "promise": [Function],
      "taps": Array [],
    },
    "afterEmit": AsyncSeriesHook {
      "_args": Array [
        "compilation",
      ],
      "_call": undefined,
      "_callAsync": [Function],
      "_promise": [Function],
      "_x": undefined,
      "call": undefined,
      "callAsync": [Function],
      "interceptors": Array [],
      "promise": [Function],
      "taps": Array [
        Object {
          "fn": [Function],
          "name": "SizeLimitsPlugin",
          "type": "sync",
        },
      ],
    },
    "afterEnvironment": SyncHook {
      "_args": Array [],
      "_call": [Function],
      "_callAsync": [Function],
      "_promise": [Function],
      "_x": Array [],
      "call": [Function],
      "callAsync": [Function],
      "interceptors": Array [],
      "promise": [Function],
      "taps": Array [],
    },
    "afterPlugins": SyncHook {
      "_args": Array [
        "compiler",
      ],
      "_call": [Function],
      "_callAsync": [Function],
      "_promise": [Function],
      "_x": Array [],
      "call": [Function],
      "callAsync": [Function],
      "interceptors": Array [],
      "promise": [Function],
      "taps": Array [],
    },
    "afterResolvers": SyncHook {
      "_args": Array [
        "compiler",
      ],
      "_call": [Function],
      "_callAsync": [Function],
      "_promise": [Function],
      "_x": Array [
        [Function],
        [Function],
      ],
      "call": [Function],
      "callAsync": [Function],
      "interceptors": Array [],
      "promise": [Function],
      "taps": Array [
        Object {
          "fn": [Function],
          "name": "NodeSourcePlugin",
          "type": "sync",
        },
        Object {
          "fn": [Function],
          "name": "AMDPlugin",
          "type": "sync",
        },
      ],
    },
    "beforeCompile": AsyncSeriesHook {
      "_args": Array [
        "params",
      ],
      "_call": undefined,
      "_callAsync": [Function],
      "_promise": [Function],
      "_x": undefined,
      "call": undefined,
      "callAsync": [Function],
      "interceptors": Array [],
      "promise": [Function],
      "taps": Array [],
    },
    "beforeRun": AsyncSeriesHook {
      "_args": Array [
        "compilation",
      ],
      "_call": undefined,
      "_callAsync": [Function],
      "_promise": [Function],
      "_x": undefined,
      "call": undefined,
      "callAsync": [Function],
      "interceptors": Array [],
      "promise": [Function],
      "taps": Array [
        Object {
          "fn": [Function],
          "name": "NodeEnvironmentPlugin",
          "type": "sync",
        },
      ],
    },
    "compilation": SyncHook {
      "_args": Array [
        "compilation",
        "params",
      ],
      "_call": [Function],
      "_callAsync": [Function],
      "_promise": [Function],
      "_x": undefined,
      "call": [Function],
      "callAsync": [Function],
      "interceptors": Array [],
      "promise": [Function],
      "taps": Array [
        Object {
          "fn": [Function],
          "name": "NamedModulesPlugin",
          "type": "sync",
        },
        Object {
          "fn": [Function],
          "name": "FunctionModulePlugin",
          "type": "sync",
        },
        Object {
          "fn": [Function],
          "name": "NodeSourcePlugin",
          "type": "sync",
        },
        Object {
          "fn": [Function],
          "name": "LoaderTargetPlugin",
          "type": "sync",
        },
        Object {
          "fn": [Function],
          "name": "SourceMapDevToolPlugin",
          "type": "sync",
        },
        Object {
          "fn": [Function],
          "name": "JavascriptModulesPlugin",
          "type": "sync",
        },
        Object {
          "fn": [Function],
          "name": "JsonModulesPlugin",
          "type": "sync",
        },
        Object {
          "fn": [Function],
          "name": "WebAssemblyModulesPlugin",
          "type": "sync",
        },
        Object {
          "fn": [Function],
          "name": "MultiEntryPlugin",
          "type": "sync",
        },
        Object {
          "fn": [Function],
          "name": "CompatibilityPlugin",
          "type": "sync",
        },
        Object {
          "fn": [Function],
          "name": "HarmonyModulesPlugin",
          "type": "sync",
        },
        Object {
          "fn": [Function],
          "name": "AMDPlugin",
          "type": "sync",
        },
        Object {
          "fn": [Function],
          "name": "CommonJsPlugin",
          "type": "sync",
        },
        Object {
          "fn": [Function],
          "name": "LoaderPlugin",
          "type": "sync",
        },
        Object {
          "fn": [Function],
          "name": "LoaderPlugin",
          "type": "sync",
        },
        Object {
          "fn": [Function],
          "name": "NodeStuffPlugin",
          "type": "sync",
        },
        Object {
          "fn": [Function],
          "name": "RequireJsStuffPlugin",
          "type": "sync",
        },
        Object {
          "fn": [Function],
          "name": "APIPlugin",
          "type": "sync",
        },
        Object {
          "fn": [Function],
          "name": "ConstPlugin",
          "type": "sync",
        },
        Object {
          "fn": [Function],
          "name": "UseStrictPlugin",
          "type": "sync",
        },
        Object {
          "fn": [Function],
          "name": "RequireIncludePlugin",
          "type": "sync",
        },
        Object {
          "fn": [Function],
          "name": "RequireEnsurePlugin",
          "type": "sync",
        },
        Object {
          "fn": [Function],
          "name": "RequireContextPlugin",
          "type": "sync",
        },
        Object {
          "fn": [Function],
          "name": "ImportPlugin",
          "type": "sync",
        },
        Object {
          "fn": [Function],
          "name": "SystemPlugin",
          "type": "sync",
        },
        Object {
          "fn": [Function],
          "name": "EnsureChunkConditionsPlugin",
          "type": "sync",
        },
        Object {
          "fn": [Function],
          "name": "RemoveParentModulesPlugin",
          "type": "sync",
        },
        Object {
          "fn": [Function],
          "name": "RemoveEmptyChunksPlugin",
          "type": "sync",
        },
        Object {
          "fn": [Function],
          "name": "MergeDuplicateChunksPlugin",
          "type": "sync",
        },
        Object {
          "fn": [Function],
          "name": "FlagIncludedChunksPlugin",
          "type": "sync",
        },
        Object {
          "fn": [Function],
          "name": "OccurrenceOrderPlugin",
          "type": "sync",
        },
        Object {
          "fn": [Function],
          "name": "SideEffectsFlagPlugin",
          "type": "sync",
        },
        Object {
          "fn": [Function],
          "name": "FlagDependencyExportsPlugin",
          "type": "sync",
        },
        Object {
          "fn": [Function],
          "name": "FlagDependencyUsagePlugin",
          "type": "sync",
        },
        Object {
          "fn": [Function],
          "name": "ModuleConcatenationPlugin",
          "type": "sync",
        },
        Object {
          "fn": [Function],
          "name": "NoEmitOnErrorsPlugin",
          "type": "sync",
        },
        Object {
          "fn": [Function],
          "name": "DefinePlugin",
          "type": "sync",
        },
        Object {
          "fn": [Function],
          "name": "UglifyJSPlugin",
          "type": "sync",
        },
        Object {
          "fn": [Function],
          "name": "TemplatedPathPlugin",
          "type": "sync",
        },
        Object {
          "fn": [Function],
          "name": "RecordIdsPlugin",
          "type": "sync",
        },
        Object {
          "fn": [Function],
          "name": "WarnCaseSensitiveModulesPlugin",
          "type": "sync",
        },
      ],
    },
    "compile": SyncHook {
      "_args": Array [
        "params",
      ],
      "_call": [Function],
      "_callAsync": [Function],
      "_promise": [Function],
      "_x": undefined,
      "call": [Function],
      "callAsync": [Function],
      "interceptors": Array [],
      "promise": [Function],
      "taps": Array [
        Object {
          "fn": [Function],
          "name": "WebpackServe",
          "type": "sync",
        },
      ],
    },
    "contextModuleFactory": SyncHook {
      "_args": Array [
        "contextModulefactory",
      ],
      "_call": [Function],
      "_callAsync": [Function],
      "_promise": [Function],
      "_x": undefined,
      "call": [Function],
      "callAsync": [Function],
      "interceptors": Array [],
      "promise": [Function],
      "taps": Array [],
    },
    "done": AsyncSeriesHook {
      "_args": Array [
        "stats",
      ],
      "_call": undefined,
      "_callAsync": [Function],
      "_promise": [Function],
      "_x": undefined,
      "call": undefined,
      "callAsync": [Function],
      "interceptors": Array [],
      "promise": [Function],
      "taps": Array [
        Object {
          "fn": [Function],
          "name": "WebpackServe",
          "type": "sync",
        },
      ],
    },
    "emit": AsyncSeriesHook {
      "_args": Array [
        "compilation",
      ],
      "_call": undefined,
      "_callAsync": [Function],
      "_promise": [Function],
      "_x": undefined,
      "call": undefined,
      "callAsync": [Function],
      "interceptors": Array [],
      "promise": [Function],
      "taps": Array [],
    },
    "entryOption": SyncBailHook {
      "_args": Array [
        "context",
        "entry",
      ],
      "_call": [Function],
      "_callAsync": [Function],
      "_promise": [Function],
      "_x": Array [
        [Function],
      ],
      "call": [Function],
      "callAsync": [Function],
      "interceptors": Array [],
      "promise": [Function],
      "taps": Array [
        Object {
          "fn": [Function],
          "name": "EntryOptionPlugin",
          "type": "sync",
        },
      ],
    },
    "environment": SyncHook {
      "_args": Array [],
      "_call": [Function],
      "_callAsync": [Function],
      "_promise": [Function],
      "_x": Array [],
      "call": [Function],
      "callAsync": [Function],
      "interceptors": Array [],
      "promise": [Function],
      "taps": Array [],
    },
    "failed": SyncHook {
      "_args": Array [
        "error",
      ],
      "_call": [Function],
      "_callAsync": [Function],
      "_promise": [Function],
      "_x": undefined,
      "call": [Function],
      "callAsync": [Function],
      "interceptors": Array [],
      "promise": [Function],
      "taps": Array [],
    },
    "invalid": SyncHook {
      "_args": Array [
        "filename",
        "changeTime",
      ],
      "_call": [Function],
      "_callAsync": [Function],
      "_promise": [Function],
      "_x": undefined,
      "call": [Function],
      "callAsync": [Function],
      "interceptors": Array [],
      "promise": [Function],
      "taps": Array [],
    },
    "make": AsyncParallelHook {
      "_args": Array [
        "compilation",
      ],
      "_call": undefined,
      "_callAsync": [Function],
      "_promise": [Function],
      "_x": undefined,
      "call": undefined,
      "callAsync": [Function],
      "interceptors": Array [],
      "promise": [Function],
      "taps": Array [
        Object {
          "fn": [Function],
          "name": "MultiEntryPlugin",
          "type": "async",
        },
      ],
    },
    "normalModuleFactory": SyncHook {
      "_args": Array [
        "normalModuleFactory",
      ],
      "_call": [Function],
      "_callAsync": [Function],
      "_promise": [Function],
      "_x": undefined,
      "call": [Function],
      "callAsync": [Function],
      "interceptors": Array [],
      "promise": [Function],
      "taps": Array [
        Object {
          "fn": [Function],
          "name": "SideEffectsFlagPlugin",
          "type": "sync",
        },
      ],
    },
    "run": AsyncSeriesHook {
      "_args": Array [
        "compilation",
      ],
      "_call": undefined,
      "_callAsync": [Function],
      "_promise": [Function],
      "_x": undefined,
      "call": undefined,
      "callAsync": [Function],
      "interceptors": Array [],
      "promise": [Function],
      "taps": Array [],
    },
    "shouldEmit": SyncBailHook {
      "_args": Array [
        "compilation",
      ],
      "_call": [Function],
      "_callAsync": [Function],
      "_promise": [Function],
      "_x": undefined,
      "call": [Function],
      "callAsync": [Function],
      "interceptors": Array [],
      "promise": [Function],
      "taps": Array [
        Object {
          "fn": [Function],
          "name": "NoEmitOnErrorsPlugin",
          "type": "sync",
        },
      ],
    },
    "thisCompilation": SyncHook {
      "_args": Array [
        "compilation",
        "params",
      ],
      "_call": [Function],
      "_callAsync": [Function],
      "_promise": [Function],
      "_x": undefined,
      "call": [Function],
      "callAsync": [Function],
      "interceptors": Array [],
      "promise": [Function],
      "taps": Array [
        Object {
          "fn": [Function],
          "name": "JsonpTemplatePlugin",
          "type": "sync",
        },
        Object {
          "fn": [Function],
          "name": "FetchCompileWasmTemplatePlugin",
          "type": "sync",
        },
        Object {
          "fn": [Function],
          "name": "WarnNoModeSetPlugin",
          "type": "sync",
        },
        Object {
          "fn": [Function],
          "name": "SplitChunksPlugin",
          "type": "sync",
        },
      ],
    },
    "watchClose": SyncHook {
      "_args": Array [],
      "_call": [Function],
      "_callAsync": [Function],
      "_promise": [Function],
      "_x": undefined,
      "call": [Function],
      "callAsync": [Function],
      "interceptors": Array [],
      "promise": [Function],
      "taps": Array [],
    },
    "watchRun": AsyncSeriesHook {
      "_args": Array [
        "compiler",
      ],
      "_call": undefined,
      "_callAsync": [Function],
      "_promise": [Function],
      "_x": undefined,
      "call": undefined,
      "callAsync": [Function],
      "interceptors": Array [],
      "promise": [Function],
      "taps": Array [],
    },
  },
  "inputFileSystem": CachedInputFileSystem {
    "_readFile": [Function],
    "_readFileStorage": Storage {
      "count": 0,
      "data": Map {},
      "duration": 60000,
      "interval": null,
      "levels": Array [
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
      ],
      "needTickCheck": false,
      "nextTick": null,
      "passive": true,
      "running": Map {},
      "tick": [Function],
    },
    "_readFileSync": [Function],
    "_readJson": [Function],
    "_readJsonStorage": Storage {
      "count": 0,
      "data": Map {},
      "duration": 60000,
      "interval": null,
      "levels": Array [
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
      ],
      "needTickCheck": false,
      "nextTick": null,
      "passive": true,
      "running": Map {},
      "tick": [Function],
    },
    "_readJsonSync": [Function],
    "_readdir": [Function],
    "_readdirStorage": Storage {
      "count": 0,
      "data": Map {},
      "duration": 60000,
      "interval": null,
      "levels": Array [
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
      ],
      "needTickCheck": false,
      "nextTick": null,
      "passive": true,
      "running": Map {},
      "tick": [Function],
    },
    "_readdirSync": [Function],
    "_readlink": [Function],
    "_readlinkStorage": Storage {
      "count": 0,
      "data": Map {},
      "duration": 60000,
      "interval": null,
      "levels": Array [
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
      ],
      "needTickCheck": false,
      "nextTick": null,
      "passive": true,
      "running": Map {},
      "tick": [Function],
    },
    "_readlinkSync": [Function],
    "_stat": [Function],
    "_statStorage": Storage {
      "count": 0,
      "data": Map {},
      "duration": 60000,
      "interval": null,
      "levels": Array [
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
      ],
      "needTickCheck": false,
      "nextTick": null,
      "passive": true,
      "running": Map {},
      "tick": [Function],
    },
    "_statSync": [Function],
    "fileSystem": NodeJsInputFileSystem {},
  },
  "name": undefined,
  "options": Object {
    "cache": false,
    "context": "<PROJECT_ROOT>/test/fixtures/basic",
    "devtool": "source-map",
    "entry": Array [
      "./app.js",
    ],
    "module": Object {
      "defaultRules": Array [
        Object {
          "resolve": Object {},
          "type": "javascript/auto",
        },
        Object {
          "resolve": Object {
            "mainFields": Array [
              "browser",
              "main",
            ],
          },
          "test": /\\\\\\.mjs\\$/i,
          "type": "javascript/esm",
        },
        Object {
          "test": /\\\\\\.json\\$/i,
          "type": "json",
        },
        Object {
          "test": /\\\\\\.wasm\\$/i,
          "type": "webassembly/experimental",
        },
      ],
      "exprContextCritical": true,
      "exprContextRecursive": true,
      "exprContextRegExp": false,
      "exprContextRequest": ".",
      "rules": Array [],
      "strictExportPresence": false,
      "strictThisContextOnImports": false,
      "unknownContextCritical": true,
      "unknownContextRecursive": true,
      "unknownContextRegExp": false,
      "unknownContextRequest": ".",
      "unsafeCache": false,
      "wrappedContextCritical": false,
      "wrappedContextRecursive": true,
      "wrappedContextRegExp": /\\.\\*/,
    },
    "node": Object {
      "Buffer": true,
      "__dirname": "mock",
      "__filename": "mock",
      "console": false,
      "global": true,
      "process": true,
      "setImmediate": true,
    },
    "optimization": Object {
      "concatenateModules": true,
      "flagIncludedChunks": true,
      "mergeDuplicateChunks": true,
      "minimize": true,
      "minimizer": Array [
        Object {
          "apply": [Function],
        },
      ],
      "namedChunks": false,
      "namedModules": false,
      "noEmitOnErrors": true,
      "nodeEnv": "production",
      "occurrenceOrder": true,
      "portableRecords": false,
      "providedExports": true,
      "removeAvailableModules": true,
      "removeEmptyChunks": true,
      "runtimeChunk": undefined,
      "sideEffects": true,
      "splitChunks": Object {
        "automaticNameDelimiter": "~",
        "cacheGroups": Object {
          "default": Object {
            "minChunks": 2,
            "priority": -20,
            "reuseExistingChunk": true,
          },
          "vendors": Object {
            "priority": -10,
            "test": /\\[\\\\\\\\\\\\/\\]node_modules\\[\\\\\\\\\\\\/\\]/,
          },
        },
        "chunks": "async",
        "maxAsyncRequests": 5,
        "maxInitialRequests": 3,
        "minChunks": 1,
        "minSize": 30000,
        "name": true,
      },
      "usedExports": true,
    },
    "output": Object {
      "chunkCallbackName": "webpackChunk",
      "chunkFilename": "./[id].output.js",
      "chunkLoadTimeout": 120000,
      "crossOriginLoading": false,
      "devtoolLineToLine": false,
      "devtoolNamespace": "",
      "filename": "./output.js",
      "globalObject": "window",
      "hashDigest": "hex",
      "hashDigestLength": 20,
      "hashFunction": "md4",
      "hotUpdateChunkFilename": "[id].[hash].hot-update.js",
      "hotUpdateFunction": "webpackHotUpdate",
      "hotUpdateMainFilename": "[hash].hot-update.json",
      "jsonpFunction": "webpackJsonp",
      "jsonpScriptType": false,
      "library": "",
      "libraryTarget": "var",
      "path": "<PROJECT_ROOT>/test/fixtures/basic",
      "pathinfo": false,
      "sourceMapFilename": "[file].map[query]",
      "strictModuleExceptionHandling": false,
      "webassemblyModuleFilename": "[modulehash].module.wasm",
    },
    "performance": Object {
      "hints": "warning",
      "maxAssetSize": 250000,
      "maxEntrypointSize": 250000,
    },
    "plugins": Array [
      NamedModulesPlugin {
        "options": Object {},
      },
    ],
    "resolve": Object {
      "aliasFields": Array [
        "browser",
      ],
      "cacheWithContext": false,
      "extensions": Array [
        ".wasm",
        ".mjs",
        ".js",
        ".json",
      ],
      "mainFields": Array [
        "browser",
        "module",
        "main",
      ],
      "mainFiles": Array [
        "index",
      ],
      "modules": Array [
        "node_modules",
      ],
      "unsafeCache": true,
    },
    "resolveLoader": Object {
      "cacheWithContext": false,
      "extensions": Array [
        ".js",
        ".json",
      ],
      "mainFields": Array [
        "loader",
        "main",
      ],
      "mainFiles": Array [
        "index",
      ],
      "unsafeCache": true,
    },
    "serve": Object {},
    "target": "web",
  },
  "outputFileSystem": NodeOutputFileSystem {
    "join": [Function],
    "mkdir": [Function],
    "mkdirp": [Function],
    "rmdir": [Function],
    "unlink": [Function],
    "writeFile": [Function],
  },
  "outputPath": "<PROJECT_ROOT>/test/fixtures/basic",
  "parentCompilation": undefined,
  "records": Object {},
  "recordsInputPath": undefined,
  "recordsOutputPath": undefined,
  "requestShortener": RequestShortener {
    "buildinsAsModule": false,
    "buildinsRegExp": /\\(\\^\\|!\\)\\\\/Users\\\\/powella\\\\/code\\\\/webpack\\\\-serve\\\\/node_modules\\\\/webpack/g,
    "cache": Map {},
    "currentDirectoryRegExp": /\\(\\^\\|!\\)\\\\/Users\\\\/powella\\\\/code\\\\/webpack\\\\-serve\\\\/test\\\\/fixtures\\\\/basic/g,
    "parentDirectoryRegExp": /\\(\\^\\|!\\)\\\\/Users\\\\/powella\\\\/code\\\\/webpack\\\\-serve\\\\/test\\\\/fixtures/g,
  },
  "resolverFactory": ResolverFactory {
    "_pluginCompat": SyncBailHook {
      "_args": Array [
        "options",
      ],
      "_call": [Function],
      "_callAsync": [Function],
      "_promise": [Function],
      "_x": undefined,
      "call": [Function],
      "callAsync": [Function],
      "interceptors": Array [],
      "promise": [Function],
      "taps": Array [
        Object {
          "fn": [Function],
          "name": "ResolverFactory",
          "type": "sync",
        },
        Object {
          "fn": [Function],
          "name": "Tapable camelCase",
          "stage": 100,
          "type": "sync",
        },
        Object {
          "fn": [Function],
          "name": "Tapable this.hooks",
          "stage": 200,
          "type": "sync",
        },
      ],
    },
    "cache1": WeakMap {},
    "cache2": Map {},
    "hooks": Object {
      "resolveOptions": HookMap {
        "_factory": [Function],
        "_interceptors": Array [],
        "_map": Map {
          "normal" => SyncWaterfallHook {
            "_args": Array [
              "resolveOptions",
            ],
            "_call": [Function],
            "_callAsync": [Function],
            "_promise": [Function],
            "_x": undefined,
            "call": [Function],
            "callAsync": [Function],
            "interceptors": Array [],
            "promise": [Function],
            "taps": Array [
              Object {
                "fn": [Function],
                "name": "WebpackOptionsApply",
                "type": "sync",
              },
            ],
          },
          "context" => SyncWaterfallHook {
            "_args": Array [
              "resolveOptions",
            ],
            "_call": [Function],
            "_callAsync": [Function],
            "_promise": [Function],
            "_x": undefined,
            "call": [Function],
            "callAsync": [Function],
            "interceptors": Array [],
            "promise": [Function],
            "taps": Array [
              Object {
                "fn": [Function],
                "name": "WebpackOptionsApply",
                "type": "sync",
              },
            ],
          },
          "loader" => SyncWaterfallHook {
            "_args": Array [
              "resolveOptions",
            ],
            "_call": [Function],
            "_callAsync": [Function],
            "_promise": [Function],
            "_x": undefined,
            "call": [Function],
            "callAsync": [Function],
            "interceptors": Array [],
            "promise": [Function],
            "taps": Array [
              Object {
                "fn": [Function],
                "name": "WebpackOptionsApply",
                "type": "sync",
              },
            ],
          },
        },
      },
      "resolver": HookMap {
        "_factory": [Function],
        "_interceptors": Array [],
        "_map": Map {
          "normal" => SyncHook {
            "_args": Array [
              "resolver",
              "resolveOptions",
            ],
            "_call": [Function],
            "_callAsync": [Function],
            "_promise": [Function],
            "_x": undefined,
            "call": [Function],
            "callAsync": [Function],
            "interceptors": Array [],
            "promise": [Function],
            "taps": Array [
              Object {
                "fn": [Function],
                "name": "NodeSourcePlugin",
                "type": "sync",
              },
              Object {
                "fn": [Function],
                "name": "NodeSourcePlugin",
                "type": "sync",
              },
              Object {
                "fn": [Function],
                "name": "NodeSourcePlugin",
                "type": "sync",
              },
              Object {
                "fn": [Function],
                "name": "NodeSourcePlugin",
                "type": "sync",
              },
              Object {
                "fn": [Function],
                "name": "NodeSourcePlugin",
                "type": "sync",
              },
              Object {
                "fn": [Function],
                "name": "NodeSourcePlugin",
                "type": "sync",
              },
              Object {
                "fn": [Function],
                "name": "NodeSourcePlugin",
                "type": "sync",
              },
              Object {
                "fn": [Function],
                "name": "NodeSourcePlugin",
                "type": "sync",
              },
              Object {
                "fn": [Function],
                "name": "NodeSourcePlugin",
                "type": "sync",
              },
              Object {
                "fn": [Function],
                "name": "NodeSourcePlugin",
                "type": "sync",
              },
              Object {
                "fn": [Function],
                "name": "NodeSourcePlugin",
                "type": "sync",
              },
              Object {
                "fn": [Function],
                "name": "NodeSourcePlugin",
                "type": "sync",
              },
              Object {
                "fn": [Function],
                "name": "NodeSourcePlugin",
                "type": "sync",
              },
              Object {
                "fn": [Function],
                "name": "NodeSourcePlugin",
                "type": "sync",
              },
              Object {
                "fn": [Function],
                "name": "NodeSourcePlugin",
                "type": "sync",
              },
              Object {
                "fn": [Function],
                "name": "NodeSourcePlugin",
                "type": "sync",
              },
              Object {
                "fn": [Function],
                "name": "NodeSourcePlugin",
                "type": "sync",
              },
              Object {
                "fn": [Function],
                "name": "NodeSourcePlugin",
                "type": "sync",
              },
              Object {
                "fn": [Function],
                "name": "NodeSourcePlugin",
                "type": "sync",
              },
              Object {
                "fn": [Function],
                "name": "NodeSourcePlugin",
                "type": "sync",
              },
              Object {
                "fn": [Function],
                "name": "NodeSourcePlugin",
                "type": "sync",
              },
              Object {
                "fn": [Function],
                "name": "NodeSourcePlugin",
                "type": "sync",
              },
              Object {
                "fn": [Function],
                "name": "NodeSourcePlugin",
                "type": "sync",
              },
              Object {
                "fn": [Function],
                "name": "NodeSourcePlugin",
                "type": "sync",
              },
              Object {
                "fn": [Function],
                "name": "NodeSourcePlugin",
                "type": "sync",
              },
              Object {
                "fn": [Function],
                "name": "NodeSourcePlugin",
                "type": "sync",
              },
              Object {
                "fn": [Function],
                "name": "NodeSourcePlugin",
                "type": "sync",
              },
              Object {
                "fn": [Function],
                "name": "NodeSourcePlugin",
                "type": "sync",
              },
              Object {
                "fn": [Function],
                "name": "NodeSourcePlugin",
                "type": "sync",
              },
              Object {
                "fn": [Function],
                "name": "NodeSourcePlugin",
                "type": "sync",
              },
              Object {
                "fn": [Function],
                "name": "NodeSourcePlugin",
                "type": "sync",
              },
              Object {
                "fn": [Function],
                "name": "NodeSourcePlugin",
                "type": "sync",
              },
              Object {
                "fn": [Function],
                "name": "NodeSourcePlugin",
                "type": "sync",
              },
              Object {
                "fn": [Function],
                "name": "NodeSourcePlugin",
                "type": "sync",
              },
              Object {
                "fn": [Function],
                "name": "NodeSourcePlugin",
                "type": "sync",
              },
              Object {
                "fn": [Function],
                "name": "NodeSourcePlugin",
                "type": "sync",
              },
              Object {
                "fn": [Function],
                "name": "NodeSourcePlugin",
                "type": "sync",
              },
              Object {
                "fn": [Function],
                "name": "AMDPlugin",
                "type": "sync",
              },
            ],
          },
        },
      },
    },
  },
  "resolvers": Object {
    "context": Object {
      "apply": [Function],
      "plugins": [Function],
    },
    "loader": Object {
      "apply": [Function],
      "plugins": [Function],
    },
    "normal": Object {
      "apply": [Function],
      "plugins": [Function],
    },
  },
  "running": false,
  "watchFileSystem": NodeWatchFileSystem {
    "inputFileSystem": CachedInputFileSystem {
      "_readFile": [Function],
      "_readFileStorage": Storage {
        "count": 0,
        "data": Map {},
        "duration": 60000,
        "interval": null,
        "levels": Array [
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
        ],
        "needTickCheck": false,
        "nextTick": null,
        "passive": true,
        "running": Map {},
        "tick": [Function],
      },
      "_readFileSync": [Function],
      "_readJson": [Function],
      "_readJsonStorage": Storage {
        "count": 0,
        "data": Map {},
        "duration": 60000,
        "interval": null,
        "levels": Array [
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
        ],
        "needTickCheck": false,
        "nextTick": null,
        "passive": true,
        "running": Map {},
        "tick": [Function],
      },
      "_readJsonSync": [Function],
      "_readdir": [Function],
      "_readdirStorage": Storage {
        "count": 0,
        "data": Map {},
        "duration": 60000,
        "interval": null,
        "levels": Array [
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
        ],
        "needTickCheck": false,
        "nextTick": null,
        "passive": true,
        "running": Map {},
        "tick": [Function],
      },
      "_readdirSync": [Function],
      "_readlink": [Function],
      "_readlinkStorage": Storage {
        "count": 0,
        "data": Map {},
        "duration": 60000,
        "interval": null,
        "levels": Array [
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
        ],
        "needTickCheck": false,
        "nextTick": null,
        "passive": true,
        "running": Map {},
        "tick": [Function],
      },
      "_readlinkSync": [Function],
      "_stat": [Function],
      "_statStorage": Storage {
        "count": 0,
        "data": Map {},
        "duration": 60000,
        "interval": null,
        "levels": Array [
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
        ],
        "needTickCheck": false,
        "nextTick": null,
        "passive": true,
        "running": Map {},
        "tick": [Function],
      },
      "_statSync": [Function],
      "fileSystem": NodeJsInputFileSystem {},
    },
    "watcher": EventEmitter {
      "_events": Object {},
      "_eventsCount": 0,
      "_maxListeners": undefined,
      "_onTimeout": [Function],
      "aggregateTimeout": 0,
      "aggregatedChanges": Array [],
      "aggregatedRemovals": Array [],
      "dirWatchers": Array [],
      "fileWatchers": Array [],
      "mtimes": Object {},
      "options": Object {
        "aggregateTimeout": 200,
      },
      "paused": false,
      "watcherOptions": Object {
        "ignored": undefined,
        "poll": undefined,
      },
    },
    "watcherOptions": Object {
      "aggregateTimeout": 200,
    },
  },
}
`;

exports[`compiler getCompiler 2`] = `
Object {
  "compiler": Compiler {
    "_pluginCompat": SyncBailHook {
      "_args": Array [
        "options",
      ],
      "_call": [Function],
      "_callAsync": [Function],
      "_promise": [Function],
      "_x": undefined,
      "call": [Function],
      "callAsync": [Function],
      "interceptors": Array [],
      "promise": [Function],
      "taps": Array [
        Object {
          "fn": [Function],
          "name": "Compiler",
          "type": "sync",
        },
        Object {
          "fn": [Function],
          "name": "Tapable camelCase",
          "stage": 100,
          "type": "sync",
        },
        Object {
          "fn": [Function],
          "name": "Tapable this.hooks",
          "stage": 200,
          "type": "sync",
        },
      ],
    },
    "context": "<PROJECT_ROOT>/test/fixtures/basic",
    "contextTimestamps": Map {},
    "dependencies": undefined,
    "fileTimestamps": Map {},
    "hooks": Object {
      "additionalPass": AsyncSeriesHook {
        "_args": Array [],
        "_call": undefined,
        "_callAsync": [Function],
        "_promise": [Function],
        "_x": undefined,
        "call": undefined,
        "callAsync": [Function],
        "interceptors": Array [],
        "promise": [Function],
        "taps": Array [],
      },
      "afterCompile": AsyncSeriesHook {
        "_args": Array [
          "compilation",
        ],
        "_call": undefined,
        "_callAsync": [Function],
        "_promise": [Function],
        "_x": undefined,
        "call": undefined,
        "callAsync": [Function],
        "interceptors": Array [],
        "promise": [Function],
        "taps": Array [],
      },
      "afterEmit": AsyncSeriesHook {
        "_args": Array [
          "compilation",
        ],
        "_call": undefined,
        "_callAsync": [Function],
        "_promise": [Function],
        "_x": undefined,
        "call": undefined,
        "callAsync": [Function],
        "interceptors": Array [],
        "promise": [Function],
        "taps": Array [
          Object {
            "fn": [Function],
            "name": "SizeLimitsPlugin",
            "type": "sync",
          },
        ],
      },
      "afterEnvironment": SyncHook {
        "_args": Array [],
        "_call": [Function],
        "_callAsync": [Function],
        "_promise": [Function],
        "_x": Array [],
        "call": [Function],
        "callAsync": [Function],
        "interceptors": Array [],
        "promise": [Function],
        "taps": Array [],
      },
      "afterPlugins": SyncHook {
        "_args": Array [
          "compiler",
        ],
        "_call": [Function],
        "_callAsync": [Function],
        "_promise": [Function],
        "_x": Array [],
        "call": [Function],
        "callAsync": [Function],
        "interceptors": Array [],
        "promise": [Function],
        "taps": Array [],
      },
      "afterResolvers": SyncHook {
        "_args": Array [
          "compiler",
        ],
        "_call": [Function],
        "_callAsync": [Function],
        "_promise": [Function],
        "_x": Array [
          [Function],
          [Function],
        ],
        "call": [Function],
        "callAsync": [Function],
        "interceptors": Array [],
        "promise": [Function],
        "taps": Array [
          Object {
            "fn": [Function],
            "name": "NodeSourcePlugin",
            "type": "sync",
          },
          Object {
            "fn": [Function],
            "name": "AMDPlugin",
            "type": "sync",
          },
        ],
      },
      "beforeCompile": AsyncSeriesHook {
        "_args": Array [
          "params",
        ],
        "_call": undefined,
        "_callAsync": [Function],
        "_promise": [Function],
        "_x": Array [],
        "call": undefined,
        "callAsync": [Function],
        "interceptors": Array [],
        "promise": [Function],
        "taps": Array [],
      },
      "beforeRun": AsyncSeriesHook {
        "_args": Array [
          "compilation",
        ],
        "_call": undefined,
        "_callAsync": [Function],
        "_promise": [Function],
        "_x": Array [
          [Function],
        ],
        "call": undefined,
        "callAsync": [Function],
        "interceptors": Array [],
        "promise": [Function],
        "taps": Array [
          Object {
            "fn": [Function],
            "name": "NodeEnvironmentPlugin",
            "type": "sync",
          },
        ],
      },
      "compilation": SyncHook {
        "_args": Array [
          "compilation",
          "params",
        ],
        "_call": [Function],
        "_callAsync": [Function],
        "_promise": [Function],
        "_x": Array [
          [Function],
          [Function],
          [Function],
          [Function],
          [Function],
          [Function],
          [Function],
          [Function],
          [Function],
          [Function],
          [Function],
          [Function],
          [Function],
          [Function],
          [Function],
          [Function],
          [Function],
          [Function],
          [Function],
          [Function],
          [Function],
          [Function],
          [Function],
          [Function],
          [Function],
          [Function],
          [Function],
          [Function],
          [Function],
          [Function],
          [Function],
          [Function],
          [Function],
          [Function],
          [Function],
          [Function],
          [Function],
          [Function],
          [Function],
          [Function],
          [Function],
        ],
        "call": [Function],
        "callAsync": [Function],
        "interceptors": Array [],
        "promise": [Function],
        "taps": Array [
          Object {
            "fn": [Function],
            "name": "NamedModulesPlugin",
            "type": "sync",
          },
          Object {
            "fn": [Function],
            "name": "FunctionModulePlugin",
            "type": "sync",
          },
          Object {
            "fn": [Function],
            "name": "NodeSourcePlugin",
            "type": "sync",
          },
          Object {
            "fn": [Function],
            "name": "LoaderTargetPlugin",
            "type": "sync",
          },
          Object {
            "fn": [Function],
            "name": "SourceMapDevToolPlugin",
            "type": "sync",
          },
          Object {
            "fn": [Function],
            "name": "JavascriptModulesPlugin",
            "type": "sync",
          },
          Object {
            "fn": [Function],
            "name": "JsonModulesPlugin",
            "type": "sync",
          },
          Object {
            "fn": [Function],
            "name": "WebAssemblyModulesPlugin",
            "type": "sync",
          },
          Object {
            "fn": [Function],
            "name": "MultiEntryPlugin",
            "type": "sync",
          },
          Object {
            "fn": [Function],
            "name": "CompatibilityPlugin",
            "type": "sync",
          },
          Object {
            "fn": [Function],
            "name": "HarmonyModulesPlugin",
            "type": "sync",
          },
          Object {
            "fn": [Function],
            "name": "AMDPlugin",
            "type": "sync",
          },
          Object {
            "fn": [Function],
            "name": "CommonJsPlugin",
            "type": "sync",
          },
          Object {
            "fn": [Function],
            "name": "LoaderPlugin",
            "type": "sync",
          },
          Object {
            "fn": [Function],
            "name": "LoaderPlugin",
            "type": "sync",
          },
          Object {
            "fn": [Function],
            "name": "NodeStuffPlugin",
            "type": "sync",
          },
          Object {
            "fn": [Function],
            "name": "RequireJsStuffPlugin",
            "type": "sync",
          },
          Object {
            "fn": [Function],
            "name": "APIPlugin",
            "type": "sync",
          },
          Object {
            "fn": [Function],
            "name": "ConstPlugin",
            "type": "sync",
          },
          Object {
            "fn": [Function],
            "name": "UseStrictPlugin",
            "type": "sync",
          },
          Object {
            "fn": [Function],
            "name": "RequireIncludePlugin",
            "type": "sync",
          },
          Object {
            "fn": [Function],
            "name": "RequireEnsurePlugin",
            "type": "sync",
          },
          Object {
            "fn": [Function],
            "name": "RequireContextPlugin",
            "type": "sync",
          },
          Object {
            "fn": [Function],
            "name": "ImportPlugin",
            "type": "sync",
          },
          Object {
            "fn": [Function],
            "name": "SystemPlugin",
            "type": "sync",
          },
          Object {
            "fn": [Function],
            "name": "EnsureChunkConditionsPlugin",
            "type": "sync",
          },
          Object {
            "fn": [Function],
            "name": "RemoveParentModulesPlugin",
            "type": "sync",
          },
          Object {
            "fn": [Function],
            "name": "RemoveEmptyChunksPlugin",
            "type": "sync",
          },
          Object {
            "fn": [Function],
            "name": "MergeDuplicateChunksPlugin",
            "type": "sync",
          },
          Object {
            "fn": [Function],
            "name": "FlagIncludedChunksPlugin",
            "type": "sync",
          },
          Object {
            "fn": [Function],
            "name": "OccurrenceOrderPlugin",
            "type": "sync",
          },
          Object {
            "fn": [Function],
            "name": "SideEffectsFlagPlugin",
            "type": "sync",
          },
          Object {
            "fn": [Function],
            "name": "FlagDependencyExportsPlugin",
            "type": "sync",
          },
          Object {
            "fn": [Function],
            "name": "FlagDependencyUsagePlugin",
            "type": "sync",
          },
          Object {
            "fn": [Function],
            "name": "ModuleConcatenationPlugin",
            "type": "sync",
          },
          Object {
            "fn": [Function],
            "name": "NoEmitOnErrorsPlugin",
            "type": "sync",
          },
          Object {
            "fn": [Function],
            "name": "DefinePlugin",
            "type": "sync",
          },
          Object {
            "fn": [Function],
            "name": "UglifyJSPlugin",
            "type": "sync",
          },
          Object {
            "fn": [Function],
            "name": "TemplatedPathPlugin",
            "type": "sync",
          },
          Object {
            "fn": [Function],
            "name": "RecordIdsPlugin",
            "type": "sync",
          },
          Object {
            "fn": [Function],
            "name": "WarnCaseSensitiveModulesPlugin",
            "type": "sync",
          },
        ],
      },
      "compile": SyncHook {
        "_args": Array [
          "params",
        ],
        "_call": [Function],
        "_callAsync": [Function],
        "_promise": [Function],
        "_x": Array [
          [Function],
        ],
        "call": [Function],
        "callAsync": [Function],
        "interceptors": Array [],
        "promise": [Function],
        "taps": Array [
          Object {
            "fn": [Function],
            "name": "WebpackServe",
            "type": "sync",
          },
        ],
      },
      "contextModuleFactory": SyncHook {
        "_args": Array [
          "contextModulefactory",
        ],
        "_call": [Function],
        "_callAsync": [Function],
        "_promise": [Function],
        "_x": Array [],
        "call": [Function],
        "callAsync": [Function],
        "interceptors": Array [],
        "promise": [Function],
        "taps": Array [],
      },
      "done": AsyncSeriesHook {
        "_args": Array [
          "stats",
        ],
        "_call": undefined,
        "_callAsync": [Function],
        "_promise": [Function],
        "_x": undefined,
        "call": undefined,
        "callAsync": [Function],
        "interceptors": Array [],
        "promise": [Function],
        "taps": Array [
          Object {
            "fn": [Function],
            "name": "WebpackServe",
            "type": "sync",
          },
        ],
      },
      "emit": AsyncSeriesHook {
        "_args": Array [
          "compilation",
        ],
        "_call": undefined,
        "_callAsync": [Function],
        "_promise": [Function],
        "_x": undefined,
        "call": undefined,
        "callAsync": [Function],
        "interceptors": Array [],
        "promise": [Function],
        "taps": Array [],
      },
      "entryOption": SyncBailHook {
        "_args": Array [
          "context",
          "entry",
        ],
        "_call": [Function],
        "_callAsync": [Function],
        "_promise": [Function],
        "_x": Array [
          [Function],
        ],
        "call": [Function],
        "callAsync": [Function],
        "interceptors": Array [],
        "promise": [Function],
        "taps": Array [
          Object {
            "fn": [Function],
            "name": "EntryOptionPlugin",
            "type": "sync",
          },
        ],
      },
      "environment": SyncHook {
        "_args": Array [],
        "_call": [Function],
        "_callAsync": [Function],
        "_promise": [Function],
        "_x": Array [],
        "call": [Function],
        "callAsync": [Function],
        "interceptors": Array [],
        "promise": [Function],
        "taps": Array [],
      },
      "failed": SyncHook {
        "_args": Array [
          "error",
        ],
        "_call": [Function],
        "_callAsync": [Function],
        "_promise": [Function],
        "_x": undefined,
        "call": [Function],
        "callAsync": [Function],
        "interceptors": Array [],
        "promise": [Function],
        "taps": Array [],
      },
      "invalid": SyncHook {
        "_args": Array [
          "filename",
          "changeTime",
        ],
        "_call": [Function],
        "_callAsync": [Function],
        "_promise": [Function],
        "_x": undefined,
        "call": [Function],
        "callAsync": [Function],
        "interceptors": Array [],
        "promise": [Function],
        "taps": Array [],
      },
      "make": AsyncParallelHook {
        "_args": Array [
          "compilation",
        ],
        "_call": undefined,
        "_callAsync": [Function],
        "_promise": [Function],
        "_x": Array [
          [Function],
        ],
        "call": undefined,
        "callAsync": [Function],
        "interceptors": Array [],
        "promise": [Function],
        "taps": Array [
          Object {
            "fn": [Function],
            "name": "MultiEntryPlugin",
            "type": "async",
          },
        ],
      },
      "normalModuleFactory": SyncHook {
        "_args": Array [
          "normalModuleFactory",
        ],
        "_call": [Function],
        "_callAsync": [Function],
        "_promise": [Function],
        "_x": Array [
          [Function],
        ],
        "call": [Function],
        "callAsync": [Function],
        "interceptors": Array [],
        "promise": [Function],
        "taps": Array [
          Object {
            "fn": [Function],
            "name": "SideEffectsFlagPlugin",
            "type": "sync",
          },
        ],
      },
      "run": AsyncSeriesHook {
        "_args": Array [
          "compilation",
        ],
        "_call": undefined,
        "_callAsync": [Function],
        "_promise": [Function],
        "_x": Array [],
        "call": undefined,
        "callAsync": [Function],
        "interceptors": Array [],
        "promise": [Function],
        "taps": Array [],
      },
      "shouldEmit": SyncBailHook {
        "_args": Array [
          "compilation",
        ],
        "_call": [Function],
        "_callAsync": [Function],
        "_promise": [Function],
        "_x": undefined,
        "call": [Function],
        "callAsync": [Function],
        "interceptors": Array [],
        "promise": [Function],
        "taps": Array [
          Object {
            "fn": [Function],
            "name": "NoEmitOnErrorsPlugin",
            "type": "sync",
          },
        ],
      },
      "thisCompilation": SyncHook {
        "_args": Array [
          "compilation",
          "params",
        ],
        "_call": [Function],
        "_callAsync": [Function],
        "_promise": [Function],
        "_x": Array [
          [Function],
          [Function],
          [Function],
          [Function],
        ],
        "call": [Function],
        "callAsync": [Function],
        "interceptors": Array [],
        "promise": [Function],
        "taps": Array [
          Object {
            "fn": [Function],
            "name": "JsonpTemplatePlugin",
            "type": "sync",
          },
          Object {
            "fn": [Function],
            "name": "FetchCompileWasmTemplatePlugin",
            "type": "sync",
          },
          Object {
            "fn": [Function],
            "name": "WarnNoModeSetPlugin",
            "type": "sync",
          },
          Object {
            "fn": [Function],
            "name": "SplitChunksPlugin",
            "type": "sync",
          },
        ],
      },
      "watchClose": SyncHook {
        "_args": Array [],
        "_call": [Function],
        "_callAsync": [Function],
        "_promise": [Function],
        "_x": undefined,
        "call": [Function],
        "callAsync": [Function],
        "interceptors": Array [],
        "promise": [Function],
        "taps": Array [],
      },
      "watchRun": AsyncSeriesHook {
        "_args": Array [
          "compiler",
        ],
        "_call": undefined,
        "_callAsync": [Function],
        "_promise": [Function],
        "_x": undefined,
        "call": undefined,
        "callAsync": [Function],
        "interceptors": Array [],
        "promise": [Function],
        "taps": Array [],
      },
    },
    "inputFileSystem": CachedInputFileSystem {
      "_readFile": [Function],
      "_readFileStorage": Storage {
        "count": 0,
        "data": Map {},
        "duration": 60000,
        "interval": null,
        "levels": Array [
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
        ],
        "needTickCheck": false,
        "nextTick": null,
        "passive": false,
        "running": Map {
          "<PROJECT_ROOT>/test/fixtures/basic/package.json" => Array [
            [Function],
          ],
        },
        "tick": [Function],
      },
      "_readFileSync": [Function],
      "_readJson": [Function],
      "_readJsonStorage": Storage {
        "count": 0,
        "data": Map {},
        "duration": 60000,
        "interval": null,
        "levels": Array [
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
        ],
        "needTickCheck": false,
        "nextTick": null,
        "passive": false,
        "running": Map {
          "<PROJECT_ROOT>/test/fixtures/basic/package.json" => Array [
            [Function],
          ],
        },
        "tick": [Function],
      },
      "_readJsonSync": [Function],
      "_readdir": [Function],
      "_readdirStorage": Storage {
        "count": 0,
        "data": Map {},
        "duration": 60000,
        "interval": null,
        "levels": Array [
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
        ],
        "needTickCheck": false,
        "nextTick": null,
        "passive": true,
        "running": Map {},
        "tick": [Function],
      },
      "_readdirSync": [Function],
      "_readlink": [Function],
      "_readlinkStorage": Storage {
        "count": 0,
        "data": Map {},
        "duration": 60000,
        "interval": null,
        "levels": Array [
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
        ],
        "needTickCheck": false,
        "nextTick": null,
        "passive": true,
        "running": Map {},
        "tick": [Function],
      },
      "_readlinkSync": [Function],
      "_stat": [Function],
      "_statStorage": Storage {
        "count": 0,
        "data": Map {},
        "duration": 60000,
        "interval": null,
        "levels": Array [
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
        ],
        "needTickCheck": false,
        "nextTick": null,
        "passive": true,
        "running": Map {},
        "tick": [Function],
      },
      "_statSync": [Function],
      "fileSystem": NodeJsInputFileSystem {},
    },
    "name": undefined,
    "options": Object {
      "cache": false,
      "context": "<PROJECT_ROOT>/test/fixtures/basic",
      "devtool": "source-map",
      "entry": Array [
        "./app.js",
      ],
      "module": Object {
        "defaultRules": Array [
          Object {
            "resolve": Object {},
            "type": "javascript/auto",
          },
          Object {
            "resolve": Object {
              "mainFields": Array [
                "browser",
                "main",
              ],
            },
            "test": /\\\\\\.mjs\\$/i,
            "type": "javascript/esm",
          },
          Object {
            "test": /\\\\\\.json\\$/i,
            "type": "json",
          },
          Object {
            "test": /\\\\\\.wasm\\$/i,
            "type": "webassembly/experimental",
          },
        ],
        "exprContextCritical": true,
        "exprContextRecursive": true,
        "exprContextRegExp": false,
        "exprContextRequest": ".",
        "rules": Array [],
        "strictExportPresence": false,
        "strictThisContextOnImports": false,
        "unknownContextCritical": true,
        "unknownContextRecursive": true,
        "unknownContextRegExp": false,
        "unknownContextRequest": ".",
        "unsafeCache": false,
        "wrappedContextCritical": false,
        "wrappedContextRecursive": true,
        "wrappedContextRegExp": /\\.\\*/,
      },
      "node": Object {
        "Buffer": true,
        "__dirname": "mock",
        "__filename": "mock",
        "console": false,
        "global": true,
        "process": true,
        "setImmediate": true,
      },
      "optimization": Object {
        "concatenateModules": true,
        "flagIncludedChunks": true,
        "mergeDuplicateChunks": true,
        "minimize": true,
        "minimizer": Array [
          Object {
            "apply": [Function],
          },
        ],
        "namedChunks": false,
        "namedModules": false,
        "noEmitOnErrors": true,
        "nodeEnv": "production",
        "occurrenceOrder": true,
        "portableRecords": false,
        "providedExports": true,
        "removeAvailableModules": true,
        "removeEmptyChunks": true,
        "runtimeChunk": undefined,
        "sideEffects": true,
        "splitChunks": Object {
          "automaticNameDelimiter": "~",
          "cacheGroups": Object {
            "default": Object {
              "minChunks": 2,
              "priority": -20,
              "reuseExistingChunk": true,
            },
            "vendors": Object {
              "priority": -10,
              "test": /\\[\\\\\\\\\\\\/\\]node_modules\\[\\\\\\\\\\\\/\\]/,
            },
          },
          "chunks": "async",
          "maxAsyncRequests": 5,
          "maxInitialRequests": 3,
          "minChunks": 1,
          "minSize": 30000,
          "name": true,
        },
        "usedExports": true,
      },
      "output": Object {
        "chunkCallbackName": "webpackChunk",
        "chunkFilename": "./[id].output.js",
        "chunkLoadTimeout": 120000,
        "crossOriginLoading": false,
        "devtoolLineToLine": false,
        "devtoolNamespace": "",
        "filename": "./output.js",
        "globalObject": "window",
        "hashDigest": "hex",
        "hashDigestLength": 20,
        "hashFunction": "md4",
        "hotUpdateChunkFilename": "[id].[hash].hot-update.js",
        "hotUpdateFunction": "webpackHotUpdate",
        "hotUpdateMainFilename": "[hash].hot-update.json",
        "jsonpFunction": "webpackJsonp",
        "jsonpScriptType": false,
        "library": "",
        "libraryTarget": "var",
        "path": "<PROJECT_ROOT>/test/fixtures/basic",
        "pathinfo": false,
        "sourceMapFilename": "[file].map[query]",
        "strictModuleExceptionHandling": false,
        "webassemblyModuleFilename": "[modulehash].module.wasm",
      },
      "performance": Object {
        "hints": "warning",
        "maxAssetSize": 250000,
        "maxEntrypointSize": 250000,
      },
      "plugins": Array [
        NamedModulesPlugin {
          "options": Object {},
        },
      ],
      "resolve": Object {
        "aliasFields": Array [
          "browser",
        ],
        "cacheWithContext": false,
        "extensions": Array [
          ".wasm",
          ".mjs",
          ".js",
          ".json",
        ],
        "mainFields": Array [
          "browser",
          "module",
          "main",
        ],
        "mainFiles": Array [
          "index",
        ],
        "modules": Array [
          "node_modules",
        ],
        "unsafeCache": true,
      },
      "resolveLoader": Object {
        "cacheWithContext": false,
        "extensions": Array [
          ".js",
          ".json",
        ],
        "mainFields": Array [
          "loader",
          "main",
        ],
        "mainFiles": Array [
          "index",
        ],
        "unsafeCache": true,
      },
      "serve": Object {},
      "target": "web",
    },
    "outputFileSystem": NodeOutputFileSystem {
      "join": [Function],
      "mkdir": [Function],
      "mkdirp": [Function],
      "rmdir": [Function],
      "unlink": [Function],
      "writeFile": [Function],
    },
    "outputPath": "<PROJECT_ROOT>/test/fixtures/basic",
    "parentCompilation": undefined,
    "records": Object {},
    "recordsInputPath": undefined,
    "recordsOutputPath": undefined,
    "requestShortener": RequestShortener {
      "buildinsAsModule": false,
      "buildinsRegExp": /\\(\\^\\|!\\)\\\\/Users\\\\/powella\\\\/code\\\\/webpack\\\\-serve\\\\/node_modules\\\\/webpack/g,
      "cache": Map {},
      "currentDirectoryRegExp": /\\(\\^\\|!\\)\\\\/Users\\\\/powella\\\\/code\\\\/webpack\\\\-serve\\\\/test\\\\/fixtures\\\\/basic/g,
      "parentDirectoryRegExp": /\\(\\^\\|!\\)\\\\/Users\\\\/powella\\\\/code\\\\/webpack\\\\-serve\\\\/test\\\\/fixtures/g,
    },
    "resolverFactory": ResolverFactory {
      "_pluginCompat": SyncBailHook {
        "_args": Array [
          "options",
        ],
        "_call": [Function],
        "_callAsync": [Function],
        "_promise": [Function],
        "_x": undefined,
        "call": [Function],
        "callAsync": [Function],
        "interceptors": Array [],
        "promise": [Function],
        "taps": Array [
          Object {
            "fn": [Function],
            "name": "ResolverFactory",
            "type": "sync",
          },
          Object {
            "fn": [Function],
            "name": "Tapable camelCase",
            "stage": 100,
            "type": "sync",
          },
          Object {
            "fn": [Function],
            "name": "Tapable this.hooks",
            "stage": 200,
            "type": "sync",
          },
        ],
      },
      "cache1": WeakMap {},
      "cache2": Map {
        "normal|{}" => Resolver {
          "_pluginCompat": SyncBailHook {
            "_args": Array [
              "options",
            ],
            "_call": [Function],
            "_callAsync": [Function],
            "_promise": [Function],
            "_x": undefined,
            "call": [Function],
            "callAsync": [Function],
            "interceptors": Array [],
            "promise": [Function],
            "taps": Array [
              Object {
                "fn": [Function],
                "name": "Resolver: before/after",
                "type": "sync",
              },
              Object {
                "fn": [Function],
                "name": "Resolver: step hooks",
                "type": "sync",
              },
              Object {
                "fn": [Function],
                "name": "Tapable camelCase",
                "stage": 100,
                "type": "sync",
              },
              Object {
                "fn": [Function],
                "name": "Tapable this.hooks",
                "stage": 200,
                "type": "sync",
              },
            ],
          },
          "fileSystem": CachedInputFileSystem {
            "_readFile": [Function],
            "_readFileStorage": Storage {
              "count": 0,
              "data": Map {},
              "duration": 60000,
              "interval": null,
              "levels": Array [
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
              ],
              "needTickCheck": false,
              "nextTick": null,
              "passive": false,
              "running": Map {
                "<PROJECT_ROOT>/test/fixtures/basic/package.json" => Array [
                  [Function],
                ],
              },
              "tick": [Function],
            },
            "_readFileSync": [Function],
            "_readJson": [Function],
            "_readJsonStorage": Storage {
              "count": 0,
              "data": Map {},
              "duration": 60000,
              "interval": null,
              "levels": Array [
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
              ],
              "needTickCheck": false,
              "nextTick": null,
              "passive": false,
              "running": Map {
                "<PROJECT_ROOT>/test/fixtures/basic/package.json" => Array [
                  [Function],
                ],
              },
              "tick": [Function],
            },
            "_readJsonSync": [Function],
            "_readdir": [Function],
            "_readdirStorage": Storage {
              "count": 0,
              "data": Map {},
              "duration": 60000,
              "interval": null,
              "levels": Array [
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
              ],
              "needTickCheck": false,
              "nextTick": null,
              "passive": true,
              "running": Map {},
              "tick": [Function],
            },
            "_readdirSync": [Function],
            "_readlink": [Function],
            "_readlinkStorage": Storage {
              "count": 0,
              "data": Map {},
              "duration": 60000,
              "interval": null,
              "levels": Array [
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
              ],
              "needTickCheck": false,
              "nextTick": null,
              "passive": true,
              "running": Map {},
              "tick": [Function],
            },
            "_readlinkSync": [Function],
            "_stat": [Function],
            "_statStorage": Storage {
              "count": 0,
              "data": Map {},
              "duration": 60000,
              "interval": null,
              "levels": Array [
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
              ],
              "needTickCheck": false,
              "nextTick": null,
              "passive": true,
              "running": Map {},
              "tick": [Function],
            },
            "_statSync": [Function],
            "fileSystem": NodeJsInputFileSystem {},
          },
          "hooks": Object {
            "describedRelative": AsyncSeriesBailHook {
              "_args": Array [
                "request",
                "resolveContext",
              ],
              "_call": undefined,
              "_callAsync": [Function],
              "_promise": [Function],
              "_x": undefined,
              "call": undefined,
              "callAsync": [Function],
              "interceptors": Array [],
              "name": "describedRelative",
              "promise": [Function],
              "taps": Array [
                Object {
                  "fn": [Function],
                  "name": "FileKindPlugin",
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "TryNextPlugin",
                  "type": "async",
                },
              ],
            },
            "describedResolve": AsyncSeriesBailHook {
              "_args": Array [
                "request",
                "resolveContext",
              ],
              "_call": undefined,
              "_callAsync": [Function],
              "_promise": [Function],
              "_x": undefined,
              "call": undefined,
              "callAsync": [Function],
              "interceptors": Array [],
              "name": "describedResolve",
              "promise": [Function],
              "taps": Array [
                Object {
                  "fn": [Function],
                  "name": "AliasFieldPlugin",
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "AliasPlugin",
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "AliasPlugin",
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "AliasPlugin",
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "AliasPlugin",
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "AliasPlugin",
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "AliasPlugin",
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "AliasPlugin",
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "AliasPlugin",
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "AliasPlugin",
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "AliasPlugin",
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "AliasPlugin",
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "AliasPlugin",
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "AliasPlugin",
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "AliasPlugin",
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "AliasPlugin",
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "AliasPlugin",
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "AliasPlugin",
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "AliasPlugin",
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "AliasPlugin",
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "AliasPlugin",
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "AliasPlugin",
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "AliasPlugin",
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "AliasPlugin",
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "AliasPlugin",
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "AliasPlugin",
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "AliasPlugin",
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "AliasPlugin",
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "AliasPlugin",
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "AliasPlugin",
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "AliasPlugin",
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "AliasPlugin",
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "AliasPlugin",
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "AliasPlugin",
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "AliasPlugin",
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "AliasPlugin",
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "AliasPlugin",
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "AliasPlugin",
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "AliasPlugin",
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "AliasPlugin",
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "AliasPlugin",
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "ModuleKindPlugin",
                  "stage": 10,
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "JoinRequestPlugin",
                  "stage": 10,
                  "type": "async",
                },
              ],
            },
            "directory": AsyncSeriesBailHook {
              "_args": Array [
                "request",
                "resolveContext",
              ],
              "_call": undefined,
              "_callAsync": [Function],
              "_promise": [Function],
              "_x": undefined,
              "call": undefined,
              "callAsync": [Function],
              "interceptors": Array [],
              "name": "directory",
              "promise": [Function],
              "taps": Array [
                Object {
                  "fn": [Function],
                  "name": "DirectoryExistsPlugin",
                  "type": "async",
                },
              ],
            },
            "existingDirectory": AsyncSeriesBailHook {
              "_args": Array [
                "request",
                "resolveContext",
              ],
              "_call": undefined,
              "_callAsync": [Function],
              "_promise": [Function],
              "_x": undefined,
              "call": undefined,
              "callAsync": [Function],
              "interceptors": Array [],
              "name": "existingDirectory",
              "promise": [Function],
              "taps": Array [
                Object {
                  "fn": [Function],
                  "name": "MainFieldPlugin",
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "MainFieldPlugin",
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "MainFieldPlugin",
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "UseFilePlugin",
                  "type": "async",
                },
              ],
            },
            "existingFile": AsyncSeriesBailHook {
              "_args": Array [
                "request",
                "resolveContext",
              ],
              "_call": undefined,
              "_callAsync": [Function],
              "_promise": [Function],
              "_x": undefined,
              "call": undefined,
              "callAsync": [Function],
              "interceptors": Array [],
              "name": "existingFile",
              "promise": [Function],
              "taps": Array [
                Object {
                  "fn": [Function],
                  "name": "NextPlugin",
                  "type": "async",
                },
              ],
            },
            "file": AsyncSeriesBailHook {
              "_args": Array [
                "request",
                "resolveContext",
              ],
              "_call": undefined,
              "_callAsync": [Function],
              "_promise": [Function],
              "_x": undefined,
              "call": undefined,
              "callAsync": [Function],
              "interceptors": Array [],
              "name": "file",
              "promise": [Function],
              "taps": Array [
                Object {
                  "fn": [Function],
                  "name": "AliasFieldPlugin",
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "SymlinkPlugin",
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "FileExistsPlugin",
                  "type": "async",
                },
              ],
            },
            "module": AsyncSeriesBailHook {
              "_args": Array [
                "request",
                "resolveContext",
              ],
              "_call": undefined,
              "_callAsync": [Function],
              "_promise": [Function],
              "_x": undefined,
              "call": undefined,
              "callAsync": [Function],
              "interceptors": Array [],
              "name": "module",
              "promise": [Function],
              "taps": Array [
                Object {
                  "fn": [Function],
                  "name": "ModulesInHierachicDirectoriesPlugin",
                  "type": "async",
                },
              ],
            },
            "newResolve": AsyncSeriesBailHook {
              "_args": Array [
                "request",
                "resolveContext",
              ],
              "_call": undefined,
              "_callAsync": [Function],
              "_promise": [Function],
              "_x": Array [
                [Function],
              ],
              "call": undefined,
              "callAsync": [Function],
              "interceptors": Array [],
              "name": "newResolve",
              "promise": [Function],
              "taps": Array [
                Object {
                  "fn": [Function],
                  "name": "ParsePlugin",
                  "type": "async",
                },
              ],
            },
            "noResolve": SyncHook {
              "_args": Array [
                "request",
                "error",
              ],
              "_call": [Function],
              "_callAsync": [Function],
              "_promise": [Function],
              "_x": undefined,
              "call": [Function],
              "callAsync": [Function],
              "interceptors": Array [],
              "name": "noResolve",
              "promise": [Function],
              "taps": Array [],
            },
            "parsedResolve": AsyncSeriesBailHook {
              "_args": Array [
                "request",
                "resolveContext",
              ],
              "_call": undefined,
              "_callAsync": [Function],
              "_promise": [Function],
              "_x": Array [
                [Function],
                [Function],
              ],
              "call": undefined,
              "callAsync": [Function],
              "interceptors": Array [],
              "name": "parsedResolve",
              "promise": [Function],
              "taps": Array [
                Object {
                  "fn": [Function],
                  "name": "DescriptionFilePlugin",
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "NextPlugin",
                  "stage": 10,
                  "type": "async",
                },
              ],
            },
            "rawFile": AsyncSeriesBailHook {
              "_args": Array [
                "request",
                "resolveContext",
              ],
              "_call": undefined,
              "_callAsync": [Function],
              "_promise": [Function],
              "_x": undefined,
              "call": undefined,
              "callAsync": [Function],
              "interceptors": Array [],
              "name": "rawFile",
              "promise": [Function],
              "taps": Array [
                Object {
                  "fn": [Function],
                  "name": "TryNextPlugin",
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "AppendPlugin",
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "AppendPlugin",
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "AppendPlugin",
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "AppendPlugin",
                  "type": "async",
                },
              ],
            },
            "rawModule": AsyncSeriesBailHook {
              "_args": Array [
                "request",
                "resolveContext",
              ],
              "_call": undefined,
              "_callAsync": [Function],
              "_promise": [Function],
              "_x": undefined,
              "call": undefined,
              "callAsync": [Function],
              "interceptors": Array [],
              "name": "rawModule",
              "promise": [Function],
              "taps": Array [
                Object {
                  "fn": [Function],
                  "name": "TryNextPlugin",
                  "type": "async",
                },
              ],
            },
            "relative": AsyncSeriesBailHook {
              "_args": Array [
                "request",
                "resolveContext",
              ],
              "_call": undefined,
              "_callAsync": [Function],
              "_promise": [Function],
              "_x": undefined,
              "call": undefined,
              "callAsync": [Function],
              "interceptors": Array [],
              "name": "relative",
              "promise": [Function],
              "taps": Array [
                Object {
                  "fn": [Function],
                  "name": "DescriptionFilePlugin",
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "NextPlugin",
                  "stage": 10,
                  "type": "async",
                },
              ],
            },
            "resolve": AsyncSeriesBailHook {
              "_args": Array [
                "request",
                "resolveContext",
              ],
              "_call": undefined,
              "_callAsync": [Function],
              "_promise": [Function],
              "_x": Array [
                [Function],
              ],
              "call": undefined,
              "callAsync": [Function],
              "interceptors": Array [],
              "name": "resolve",
              "promise": [Function],
              "taps": Array [
                Object {
                  "fn": [Function],
                  "name": "UnsafeCachePlugin",
                  "type": "async",
                },
              ],
            },
            "resolveStep": SyncHook {
              "_args": Array [
                "hook",
                "request",
              ],
              "_call": [Function],
              "_callAsync": [Function],
              "_promise": [Function],
              "_x": Array [],
              "call": [Function],
              "callAsync": [Function],
              "interceptors": Array [],
              "name": "resolveStep",
              "promise": [Function],
              "taps": Array [],
            },
            "resolved": AsyncSeriesBailHook {
              "_args": Array [
                "request",
                "resolveContext",
              ],
              "_call": undefined,
              "_callAsync": [Function],
              "_promise": [Function],
              "_x": undefined,
              "call": undefined,
              "callAsync": [Function],
              "interceptors": Array [],
              "name": "resolved",
              "promise": [Function],
              "taps": Array [
                Object {
                  "fn": [Function],
                  "name": "ResultPlugin",
                  "type": "async",
                },
              ],
            },
            "result": AsyncSeriesHook {
              "_args": Array [
                "result",
                "resolveContext",
              ],
              "_call": undefined,
              "_callAsync": [Function],
              "_promise": [Function],
              "_x": undefined,
              "call": undefined,
              "callAsync": [Function],
              "interceptors": Array [],
              "promise": [Function],
              "taps": Array [],
            },
            "undescribedRawFile": AsyncSeriesBailHook {
              "_args": Array [
                "request",
                "resolveContext",
              ],
              "_call": undefined,
              "_callAsync": [Function],
              "_promise": [Function],
              "_x": undefined,
              "call": undefined,
              "callAsync": [Function],
              "interceptors": Array [],
              "name": "undescribedRawFile",
              "promise": [Function],
              "taps": Array [
                Object {
                  "fn": [Function],
                  "name": "DescriptionFilePlugin",
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "NextPlugin",
                  "stage": 10,
                  "type": "async",
                },
              ],
            },
          },
        },
        "loader|{}" => Resolver {
          "_pluginCompat": SyncBailHook {
            "_args": Array [
              "options",
            ],
            "_call": [Function],
            "_callAsync": [Function],
            "_promise": [Function],
            "_x": undefined,
            "call": [Function],
            "callAsync": [Function],
            "interceptors": Array [],
            "promise": [Function],
            "taps": Array [
              Object {
                "fn": [Function],
                "name": "Resolver: before/after",
                "type": "sync",
              },
              Object {
                "fn": [Function],
                "name": "Resolver: step hooks",
                "type": "sync",
              },
              Object {
                "fn": [Function],
                "name": "Tapable camelCase",
                "stage": 100,
                "type": "sync",
              },
              Object {
                "fn": [Function],
                "name": "Tapable this.hooks",
                "stage": 200,
                "type": "sync",
              },
            ],
          },
          "fileSystem": CachedInputFileSystem {
            "_readFile": [Function],
            "_readFileStorage": Storage {
              "count": 0,
              "data": Map {},
              "duration": 60000,
              "interval": null,
              "levels": Array [
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
              ],
              "needTickCheck": false,
              "nextTick": null,
              "passive": false,
              "running": Map {
                "<PROJECT_ROOT>/test/fixtures/basic/package.json" => Array [
                  [Function],
                ],
              },
              "tick": [Function],
            },
            "_readFileSync": [Function],
            "_readJson": [Function],
            "_readJsonStorage": Storage {
              "count": 0,
              "data": Map {},
              "duration": 60000,
              "interval": null,
              "levels": Array [
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
              ],
              "needTickCheck": false,
              "nextTick": null,
              "passive": false,
              "running": Map {
                "<PROJECT_ROOT>/test/fixtures/basic/package.json" => Array [
                  [Function],
                ],
              },
              "tick": [Function],
            },
            "_readJsonSync": [Function],
            "_readdir": [Function],
            "_readdirStorage": Storage {
              "count": 0,
              "data": Map {},
              "duration": 60000,
              "interval": null,
              "levels": Array [
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
              ],
              "needTickCheck": false,
              "nextTick": null,
              "passive": true,
              "running": Map {},
              "tick": [Function],
            },
            "_readdirSync": [Function],
            "_readlink": [Function],
            "_readlinkStorage": Storage {
              "count": 0,
              "data": Map {},
              "duration": 60000,
              "interval": null,
              "levels": Array [
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
              ],
              "needTickCheck": false,
              "nextTick": null,
              "passive": true,
              "running": Map {},
              "tick": [Function],
            },
            "_readlinkSync": [Function],
            "_stat": [Function],
            "_statStorage": Storage {
              "count": 0,
              "data": Map {},
              "duration": 60000,
              "interval": null,
              "levels": Array [
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
              ],
              "needTickCheck": false,
              "nextTick": null,
              "passive": true,
              "running": Map {},
              "tick": [Function],
            },
            "_statSync": [Function],
            "fileSystem": NodeJsInputFileSystem {},
          },
          "hooks": Object {
            "describedRelative": AsyncSeriesBailHook {
              "_args": Array [
                "request",
                "resolveContext",
              ],
              "_call": undefined,
              "_callAsync": [Function],
              "_promise": [Function],
              "_x": undefined,
              "call": undefined,
              "callAsync": [Function],
              "interceptors": Array [],
              "name": "describedRelative",
              "promise": [Function],
              "taps": Array [
                Object {
                  "fn": [Function],
                  "name": "FileKindPlugin",
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "TryNextPlugin",
                  "type": "async",
                },
              ],
            },
            "describedResolve": AsyncSeriesBailHook {
              "_args": Array [
                "request",
                "resolveContext",
              ],
              "_call": undefined,
              "_callAsync": [Function],
              "_promise": [Function],
              "_x": undefined,
              "call": undefined,
              "callAsync": [Function],
              "interceptors": Array [],
              "name": "describedResolve",
              "promise": [Function],
              "taps": Array [
                Object {
                  "fn": [Function],
                  "name": "ModuleKindPlugin",
                  "stage": 10,
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "JoinRequestPlugin",
                  "stage": 10,
                  "type": "async",
                },
              ],
            },
            "directory": AsyncSeriesBailHook {
              "_args": Array [
                "request",
                "resolveContext",
              ],
              "_call": undefined,
              "_callAsync": [Function],
              "_promise": [Function],
              "_x": undefined,
              "call": undefined,
              "callAsync": [Function],
              "interceptors": Array [],
              "name": "directory",
              "promise": [Function],
              "taps": Array [
                Object {
                  "fn": [Function],
                  "name": "DirectoryExistsPlugin",
                  "type": "async",
                },
              ],
            },
            "existingDirectory": AsyncSeriesBailHook {
              "_args": Array [
                "request",
                "resolveContext",
              ],
              "_call": undefined,
              "_callAsync": [Function],
              "_promise": [Function],
              "_x": undefined,
              "call": undefined,
              "callAsync": [Function],
              "interceptors": Array [],
              "name": "existingDirectory",
              "promise": [Function],
              "taps": Array [
                Object {
                  "fn": [Function],
                  "name": "MainFieldPlugin",
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "MainFieldPlugin",
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "UseFilePlugin",
                  "type": "async",
                },
              ],
            },
            "existingFile": AsyncSeriesBailHook {
              "_args": Array [
                "request",
                "resolveContext",
              ],
              "_call": undefined,
              "_callAsync": [Function],
              "_promise": [Function],
              "_x": undefined,
              "call": undefined,
              "callAsync": [Function],
              "interceptors": Array [],
              "name": "existingFile",
              "promise": [Function],
              "taps": Array [
                Object {
                  "fn": [Function],
                  "name": "NextPlugin",
                  "type": "async",
                },
              ],
            },
            "file": AsyncSeriesBailHook {
              "_args": Array [
                "request",
                "resolveContext",
              ],
              "_call": undefined,
              "_callAsync": [Function],
              "_promise": [Function],
              "_x": undefined,
              "call": undefined,
              "callAsync": [Function],
              "interceptors": Array [],
              "name": "file",
              "promise": [Function],
              "taps": Array [
                Object {
                  "fn": [Function],
                  "name": "SymlinkPlugin",
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "FileExistsPlugin",
                  "type": "async",
                },
              ],
            },
            "module": AsyncSeriesBailHook {
              "_args": Array [
                "request",
                "resolveContext",
              ],
              "_call": undefined,
              "_callAsync": [Function],
              "_promise": [Function],
              "_x": undefined,
              "call": undefined,
              "callAsync": [Function],
              "interceptors": Array [],
              "name": "module",
              "promise": [Function],
              "taps": Array [
                Object {
                  "fn": [Function],
                  "name": "ModulesInHierachicDirectoriesPlugin",
                  "type": "async",
                },
              ],
            },
            "newResolve": AsyncSeriesBailHook {
              "_args": Array [
                "request",
                "resolveContext",
              ],
              "_call": undefined,
              "_callAsync": [Function],
              "_promise": [Function],
              "_x": undefined,
              "call": undefined,
              "callAsync": [Function],
              "interceptors": Array [],
              "name": "newResolve",
              "promise": [Function],
              "taps": Array [
                Object {
                  "fn": [Function],
                  "name": "ParsePlugin",
                  "type": "async",
                },
              ],
            },
            "noResolve": SyncHook {
              "_args": Array [
                "request",
                "error",
              ],
              "_call": [Function],
              "_callAsync": [Function],
              "_promise": [Function],
              "_x": undefined,
              "call": [Function],
              "callAsync": [Function],
              "interceptors": Array [],
              "name": "noResolve",
              "promise": [Function],
              "taps": Array [],
            },
            "parsedResolve": AsyncSeriesBailHook {
              "_args": Array [
                "request",
                "resolveContext",
              ],
              "_call": undefined,
              "_callAsync": [Function],
              "_promise": [Function],
              "_x": undefined,
              "call": undefined,
              "callAsync": [Function],
              "interceptors": Array [],
              "name": "parsedResolve",
              "promise": [Function],
              "taps": Array [
                Object {
                  "fn": [Function],
                  "name": "DescriptionFilePlugin",
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "NextPlugin",
                  "stage": 10,
                  "type": "async",
                },
              ],
            },
            "rawFile": AsyncSeriesBailHook {
              "_args": Array [
                "request",
                "resolveContext",
              ],
              "_call": undefined,
              "_callAsync": [Function],
              "_promise": [Function],
              "_x": undefined,
              "call": undefined,
              "callAsync": [Function],
              "interceptors": Array [],
              "name": "rawFile",
              "promise": [Function],
              "taps": Array [
                Object {
                  "fn": [Function],
                  "name": "TryNextPlugin",
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "AppendPlugin",
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "AppendPlugin",
                  "type": "async",
                },
              ],
            },
            "rawModule": AsyncSeriesBailHook {
              "_args": Array [
                "request",
                "resolveContext",
              ],
              "_call": undefined,
              "_callAsync": [Function],
              "_promise": [Function],
              "_x": undefined,
              "call": undefined,
              "callAsync": [Function],
              "interceptors": Array [],
              "name": "rawModule",
              "promise": [Function],
              "taps": Array [
                Object {
                  "fn": [Function],
                  "name": "TryNextPlugin",
                  "type": "async",
                },
              ],
            },
            "relative": AsyncSeriesBailHook {
              "_args": Array [
                "request",
                "resolveContext",
              ],
              "_call": undefined,
              "_callAsync": [Function],
              "_promise": [Function],
              "_x": undefined,
              "call": undefined,
              "callAsync": [Function],
              "interceptors": Array [],
              "name": "relative",
              "promise": [Function],
              "taps": Array [
                Object {
                  "fn": [Function],
                  "name": "DescriptionFilePlugin",
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "NextPlugin",
                  "stage": 10,
                  "type": "async",
                },
              ],
            },
            "resolve": AsyncSeriesBailHook {
              "_args": Array [
                "request",
                "resolveContext",
              ],
              "_call": undefined,
              "_callAsync": [Function],
              "_promise": [Function],
              "_x": undefined,
              "call": undefined,
              "callAsync": [Function],
              "interceptors": Array [],
              "name": "resolve",
              "promise": [Function],
              "taps": Array [
                Object {
                  "fn": [Function],
                  "name": "UnsafeCachePlugin",
                  "type": "async",
                },
              ],
            },
            "resolveStep": SyncHook {
              "_args": Array [
                "hook",
                "request",
              ],
              "_call": [Function],
              "_callAsync": [Function],
              "_promise": [Function],
              "_x": undefined,
              "call": [Function],
              "callAsync": [Function],
              "interceptors": Array [],
              "name": "resolveStep",
              "promise": [Function],
              "taps": Array [],
            },
            "resolved": AsyncSeriesBailHook {
              "_args": Array [
                "request",
                "resolveContext",
              ],
              "_call": undefined,
              "_callAsync": [Function],
              "_promise": [Function],
              "_x": undefined,
              "call": undefined,
              "callAsync": [Function],
              "interceptors": Array [],
              "name": "resolved",
              "promise": [Function],
              "taps": Array [
                Object {
                  "fn": [Function],
                  "name": "ResultPlugin",
                  "type": "async",
                },
              ],
            },
            "result": AsyncSeriesHook {
              "_args": Array [
                "result",
                "resolveContext",
              ],
              "_call": undefined,
              "_callAsync": [Function],
              "_promise": [Function],
              "_x": undefined,
              "call": undefined,
              "callAsync": [Function],
              "interceptors": Array [],
              "promise": [Function],
              "taps": Array [],
            },
            "undescribedRawFile": AsyncSeriesBailHook {
              "_args": Array [
                "request",
                "resolveContext",
              ],
              "_call": undefined,
              "_callAsync": [Function],
              "_promise": [Function],
              "_x": undefined,
              "call": undefined,
              "callAsync": [Function],
              "interceptors": Array [],
              "name": "undescribedRawFile",
              "promise": [Function],
              "taps": Array [
                Object {
                  "fn": [Function],
                  "name": "DescriptionFilePlugin",
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "NextPlugin",
                  "stage": 10,
                  "type": "async",
                },
              ],
            },
          },
        },
      },
      "hooks": Object {
        "resolveOptions": HookMap {
          "_factory": [Function],
          "_interceptors": Array [],
          "_map": Map {
            "normal" => SyncWaterfallHook {
              "_args": Array [
                "resolveOptions",
              ],
              "_call": [Function],
              "_callAsync": [Function],
              "_promise": [Function],
              "_x": Array [
                [Function],
              ],
              "call": [Function],
              "callAsync": [Function],
              "interceptors": Array [],
              "promise": [Function],
              "taps": Array [
                Object {
                  "fn": [Function],
                  "name": "WebpackOptionsApply",
                  "type": "sync",
                },
              ],
            },
            "context" => SyncWaterfallHook {
              "_args": Array [
                "resolveOptions",
              ],
              "_call": [Function],
              "_callAsync": [Function],
              "_promise": [Function],
              "_x": undefined,
              "call": [Function],
              "callAsync": [Function],
              "interceptors": Array [],
              "promise": [Function],
              "taps": Array [
                Object {
                  "fn": [Function],
                  "name": "WebpackOptionsApply",
                  "type": "sync",
                },
              ],
            },
            "loader" => SyncWaterfallHook {
              "_args": Array [
                "resolveOptions",
              ],
              "_call": [Function],
              "_callAsync": [Function],
              "_promise": [Function],
              "_x": Array [
                [Function],
              ],
              "call": [Function],
              "callAsync": [Function],
              "interceptors": Array [],
              "promise": [Function],
              "taps": Array [
                Object {
                  "fn": [Function],
                  "name": "WebpackOptionsApply",
                  "type": "sync",
                },
              ],
            },
          },
        },
        "resolver": HookMap {
          "_factory": [Function],
          "_interceptors": Array [],
          "_map": Map {
            "normal" => SyncHook {
              "_args": Array [
                "resolver",
                "resolveOptions",
              ],
              "_call": [Function],
              "_callAsync": [Function],
              "_promise": [Function],
              "_x": Array [
                [Function],
                [Function],
                [Function],
                [Function],
                [Function],
                [Function],
                [Function],
                [Function],
                [Function],
                [Function],
                [Function],
                [Function],
                [Function],
                [Function],
                [Function],
                [Function],
                [Function],
                [Function],
                [Function],
                [Function],
                [Function],
                [Function],
                [Function],
                [Function],
                [Function],
                [Function],
                [Function],
                [Function],
                [Function],
                [Function],
                [Function],
                [Function],
                [Function],
                [Function],
                [Function],
                [Function],
                [Function],
                [Function],
              ],
              "call": [Function],
              "callAsync": [Function],
              "interceptors": Array [],
              "promise": [Function],
              "taps": Array [
                Object {
                  "fn": [Function],
                  "name": "NodeSourcePlugin",
                  "type": "sync",
                },
                Object {
                  "fn": [Function],
                  "name": "NodeSourcePlugin",
                  "type": "sync",
                },
                Object {
                  "fn": [Function],
                  "name": "NodeSourcePlugin",
                  "type": "sync",
                },
                Object {
                  "fn": [Function],
                  "name": "NodeSourcePlugin",
                  "type": "sync",
                },
                Object {
                  "fn": [Function],
                  "name": "NodeSourcePlugin",
                  "type": "sync",
                },
                Object {
                  "fn": [Function],
                  "name": "NodeSourcePlugin",
                  "type": "sync",
                },
                Object {
                  "fn": [Function],
                  "name": "NodeSourcePlugin",
                  "type": "sync",
                },
                Object {
                  "fn": [Function],
                  "name": "NodeSourcePlugin",
                  "type": "sync",
                },
                Object {
                  "fn": [Function],
                  "name": "NodeSourcePlugin",
                  "type": "sync",
                },
                Object {
                  "fn": [Function],
                  "name": "NodeSourcePlugin",
                  "type": "sync",
                },
                Object {
                  "fn": [Function],
                  "name": "NodeSourcePlugin",
                  "type": "sync",
                },
                Object {
                  "fn": [Function],
                  "name": "NodeSourcePlugin",
                  "type": "sync",
                },
                Object {
                  "fn": [Function],
                  "name": "NodeSourcePlugin",
                  "type": "sync",
                },
                Object {
                  "fn": [Function],
                  "name": "NodeSourcePlugin",
                  "type": "sync",
                },
                Object {
                  "fn": [Function],
                  "name": "NodeSourcePlugin",
                  "type": "sync",
                },
                Object {
                  "fn": [Function],
                  "name": "NodeSourcePlugin",
                  "type": "sync",
                },
                Object {
                  "fn": [Function],
                  "name": "NodeSourcePlugin",
                  "type": "sync",
                },
                Object {
                  "fn": [Function],
                  "name": "NodeSourcePlugin",
                  "type": "sync",
                },
                Object {
                  "fn": [Function],
                  "name": "NodeSourcePlugin",
                  "type": "sync",
                },
                Object {
                  "fn": [Function],
                  "name": "NodeSourcePlugin",
                  "type": "sync",
                },
                Object {
                  "fn": [Function],
                  "name": "NodeSourcePlugin",
                  "type": "sync",
                },
                Object {
                  "fn": [Function],
                  "name": "NodeSourcePlugin",
                  "type": "sync",
                },
                Object {
                  "fn": [Function],
                  "name": "NodeSourcePlugin",
                  "type": "sync",
                },
                Object {
                  "fn": [Function],
                  "name": "NodeSourcePlugin",
                  "type": "sync",
                },
                Object {
                  "fn": [Function],
                  "name": "NodeSourcePlugin",
                  "type": "sync",
                },
                Object {
                  "fn": [Function],
                  "name": "NodeSourcePlugin",
                  "type": "sync",
                },
                Object {
                  "fn": [Function],
                  "name": "NodeSourcePlugin",
                  "type": "sync",
                },
                Object {
                  "fn": [Function],
                  "name": "NodeSourcePlugin",
                  "type": "sync",
                },
                Object {
                  "fn": [Function],
                  "name": "NodeSourcePlugin",
                  "type": "sync",
                },
                Object {
                  "fn": [Function],
                  "name": "NodeSourcePlugin",
                  "type": "sync",
                },
                Object {
                  "fn": [Function],
                  "name": "NodeSourcePlugin",
                  "type": "sync",
                },
                Object {
                  "fn": [Function],
                  "name": "NodeSourcePlugin",
                  "type": "sync",
                },
                Object {
                  "fn": [Function],
                  "name": "NodeSourcePlugin",
                  "type": "sync",
                },
                Object {
                  "fn": [Function],
                  "name": "NodeSourcePlugin",
                  "type": "sync",
                },
                Object {
                  "fn": [Function],
                  "name": "NodeSourcePlugin",
                  "type": "sync",
                },
                Object {
                  "fn": [Function],
                  "name": "NodeSourcePlugin",
                  "type": "sync",
                },
                Object {
                  "fn": [Function],
                  "name": "NodeSourcePlugin",
                  "type": "sync",
                },
                Object {
                  "fn": [Function],
                  "name": "AMDPlugin",
                  "type": "sync",
                },
              ],
            },
            "loader" => SyncHook {
              "_args": Array [
                "resolver",
                "resolveOptions",
              ],
              "_call": [Function],
              "_callAsync": [Function],
              "_promise": [Function],
              "_x": Array [],
              "call": [Function],
              "callAsync": [Function],
              "interceptors": Array [],
              "promise": [Function],
              "taps": Array [],
            },
          },
        },
      },
    },
    "resolvers": Object {
      "context": Object {
        "apply": [Function],
        "plugins": [Function],
      },
      "loader": Object {
        "apply": [Function],
        "plugins": [Function],
      },
      "normal": Object {
        "apply": [Function],
        "plugins": [Function],
      },
    },
    "running": true,
    "watchFileSystem": NodeWatchFileSystem {
      "inputFileSystem": CachedInputFileSystem {
        "_readFile": [Function],
        "_readFileStorage": Storage {
          "count": 0,
          "data": Map {},
          "duration": 60000,
          "interval": null,
          "levels": Array [
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
          ],
          "needTickCheck": false,
          "nextTick": null,
          "passive": false,
          "running": Map {
            "<PROJECT_ROOT>/test/fixtures/basic/package.json" => Array [
              [Function],
            ],
          },
          "tick": [Function],
        },
        "_readFileSync": [Function],
        "_readJson": [Function],
        "_readJsonStorage": Storage {
          "count": 0,
          "data": Map {},
          "duration": 60000,
          "interval": null,
          "levels": Array [
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
          ],
          "needTickCheck": false,
          "nextTick": null,
          "passive": false,
          "running": Map {
            "<PROJECT_ROOT>/test/fixtures/basic/package.json" => Array [
              [Function],
            ],
          },
          "tick": [Function],
        },
        "_readJsonSync": [Function],
        "_readdir": [Function],
        "_readdirStorage": Storage {
          "count": 0,
          "data": Map {},
          "duration": 60000,
          "interval": null,
          "levels": Array [
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
          ],
          "needTickCheck": false,
          "nextTick": null,
          "passive": true,
          "running": Map {},
          "tick": [Function],
        },
        "_readdirSync": [Function],
        "_readlink": [Function],
        "_readlinkStorage": Storage {
          "count": 0,
          "data": Map {},
          "duration": 60000,
          "interval": null,
          "levels": Array [
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
          ],
          "needTickCheck": false,
          "nextTick": null,
          "passive": true,
          "running": Map {},
          "tick": [Function],
        },
        "_readlinkSync": [Function],
        "_stat": [Function],
        "_statStorage": Storage {
          "count": 0,
          "data": Map {},
          "duration": 60000,
          "interval": null,
          "levels": Array [
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
          ],
          "needTickCheck": false,
          "nextTick": null,
          "passive": true,
          "running": Map {},
          "tick": [Function],
        },
        "_statSync": [Function],
        "fileSystem": NodeJsInputFileSystem {},
      },
      "watcher": EventEmitter {
        "_events": Object {},
        "_eventsCount": 0,
        "_maxListeners": undefined,
        "_onTimeout": [Function],
        "aggregateTimeout": 0,
        "aggregatedChanges": Array [],
        "aggregatedRemovals": Array [],
        "dirWatchers": Array [],
        "fileWatchers": Array [],
        "mtimes": Object {},
        "options": Object {
          "aggregateTimeout": 200,
        },
        "paused": false,
        "watcherOptions": Object {
          "ignored": undefined,
          "poll": undefined,
        },
      },
      "watcherOptions": Object {
        "aggregateTimeout": 200,
      },
    },
  },
}
`;

exports[`compiler getCompiler 3`] = `
Object {
  "assets": Array [
    Object {
      "chunkNames": Array [
        "main",
      ],
      "chunks": Array [
        0,
      ],
      "emitted": true,
      "isOverSizeLimit": undefined,
      "name": "./output.js",
      "size": 1652,
    },
    Object {
      "chunkNames": Array [
        "main",
      ],
      "chunks": Array [
        0,
      ],
      "emitted": true,
      "isOverSizeLimit": undefined,
      "name": "./output.js.map",
      "size": 6012,
    },
  ],
  "assetsByChunkName": Object {
    "main": Array [
      "./output.js",
      "./output.js.map",
    ],
  },
  "builtAt": /\\\\d\\+/,
  "children": Array [],
  "chunks": Array [
    Object {
      "children": Array [],
      "childrenByOrder": Object {},
      "entry": true,
      "files": Array [
        "./output.js",
        "./output.js.map",
      ],
      "filteredModules": 0,
      "hash": "f41570492dc66df80eee",
      "id": 0,
      "initial": true,
      "modules": Array [
        Object {
          "assets": Array [],
          "built": true,
          "cacheable": true,
          "chunks": Array [
            0,
          ],
          "depth": 2,
          "errors": 0,
          "failed": false,
          "id": "../../../node_modules/webpack/buildin/module.js",
          "identifier": "<PROJECT_ROOT>/node_modules/webpack/buildin/module.js",
          "index": 2,
          "index2": 0,
          "issuer": "<PROJECT_ROOT>/test/fixtures/basic/app.js",
          "issuerId": "./app.js",
          "issuerName": "./app.js",
          "issuerPath": Array [
            Object {
              "id": 0,
              "identifier": "multi ./app.js",
              "name": "multi ./app.js",
              "profile": undefined,
            },
            Object {
              "id": "./app.js",
              "identifier": "<PROJECT_ROOT>/test/fixtures/basic/app.js",
              "name": "./app.js",
              "profile": undefined,
            },
          ],
          "name": "(webpack)/buildin/module.js",
          "optimizationBailout": Array [
            "ModuleConcatenation bailout: Module is not an ECMAScript module",
          ],
          "optional": false,
          "prefetched": false,
          "profile": undefined,
          "providedExports": null,
          "reasons": Array [
            Object {
              "explanation": undefined,
              "loc": "1:0-60",
              "module": "./app.js",
              "moduleId": "./app.js",
              "moduleIdentifier": "<PROJECT_ROOT>/test/fixtures/basic/app.js",
              "moduleName": "./app.js",
              "type": "cjs require",
              "userRequest": "module",
            },
          ],
          "size": 497,
          "source": "module.exports = function(module) {
	if (!module.webpackPolyfill) {
		module.deprecate = function() {};
		module.paths = [];
		// module.parent = undefined by default
		if (!module.children) module.children = [];
		Object.defineProperty(module, \\"loaded\\", {
			enumerable: true,
			get: function() {
				return module.l;
			}
		});
		Object.defineProperty(module, \\"id\\", {
			enumerable: true,
			get: function() {
				return module.i;
			}
		});
		module.webpackPolyfill = 1;
	}
	return module;
};
",
          "usedExports": true,
          "warnings": 0,
        },
        Object {
          "assets": Array [],
          "built": true,
          "cacheable": true,
          "chunks": Array [
            0,
          ],
          "depth": 1,
          "errors": 0,
          "failed": false,
          "id": "./app.js",
          "identifier": "<PROJECT_ROOT>/test/fixtures/basic/app.js",
          "index": 1,
          "index2": 2,
          "issuer": "multi ./app.js",
          "issuerId": 0,
          "issuerName": "multi ./app.js",
          "issuerPath": Array [
            Object {
              "id": 0,
              "identifier": "multi ./app.js",
              "name": "multi ./app.js",
              "profile": undefined,
            },
          ],
          "name": "./app.js",
          "optimizationBailout": Array [
            "ModuleConcatenation bailout: Module is not an ECMAScript module",
          ],
          "optional": false,
          "prefetched": false,
          "profile": undefined,
          "providedExports": null,
          "reasons": Array [
            Object {
              "explanation": undefined,
              "loc": "main:100000",
              "module": "multi ./app.js",
              "moduleId": 0,
              "moduleIdentifier": "multi ./app.js",
              "moduleName": "multi ./app.js",
              "type": "single entry",
              "userRequest": "./app.js",
            },
          ],
          "size": 207,
          "source": "/* eslint no-console: off */

require('./component');

if (typeof module.hot === 'object') {
  module.hot.accept((err) => {
    if (err) {
      console.error('Cannot apply HMR update.', err);
    }
  });
}
",
          "usedExports": true,
          "warnings": 0,
        },
        Object {
          "assets": Array [],
          "built": true,
          "cacheable": true,
          "chunks": Array [
            0,
          ],
          "depth": 2,
          "errors": 0,
          "failed": false,
          "id": "./component.js",
          "identifier": "<PROJECT_ROOT>/test/fixtures/basic/component.js",
          "index": 3,
          "index2": 1,
          "issuer": "<PROJECT_ROOT>/test/fixtures/basic/app.js",
          "issuerId": "./app.js",
          "issuerName": "./app.js",
          "issuerPath": Array [
            Object {
              "id": 0,
              "identifier": "multi ./app.js",
              "name": "multi ./app.js",
              "profile": undefined,
            },
            Object {
              "id": "./app.js",
              "identifier": "<PROJECT_ROOT>/test/fixtures/basic/app.js",
              "name": "./app.js",
              "profile": undefined,
            },
          ],
          "name": "./component.js",
          "optimizationBailout": Array [
            "ModuleConcatenation bailout: Module is not an ECMAScript module",
          ],
          "optional": false,
          "prefetched": false,
          "profile": undefined,
          "providedExports": null,
          "reasons": Array [
            Object {
              "explanation": undefined,
              "loc": "3:0-22",
              "module": "./app.js",
              "moduleId": "./app.js",
              "moduleIdentifier": "<PROJECT_ROOT>/test/fixtures/basic/app.js",
              "moduleName": "./app.js",
              "type": "cjs require",
              "userRequest": "./component",
            },
          ],
          "size": 105,
          "source": "/* global document */

const target = document.querySelector('#target');
target.innerHTML = 'component';
",
          "usedExports": true,
          "warnings": 0,
        },
        Object {
          "assets": Array [],
          "built": true,
          "cacheable": undefined,
          "chunks": Array [
            0,
          ],
          "depth": 0,
          "errors": 0,
          "failed": false,
          "id": 0,
          "identifier": "multi ./app.js",
          "index": 0,
          "index2": 3,
          "issuer": null,
          "issuerId": null,
          "issuerName": null,
          "issuerPath": null,
          "name": "multi ./app.js",
          "optimizationBailout": Array [
            "ModuleConcatenation bailout: Module is not an ECMAScript module",
          ],
          "optional": false,
          "prefetched": false,
          "profile": undefined,
          "providedExports": null,
          "reasons": Array [
            Object {
              "explanation": undefined,
              "module": null,
              "moduleId": null,
              "moduleIdentifier": null,
              "moduleName": null,
              "type": "multi entry",
              "userRequest": undefined,
            },
          ],
          "size": 28,
          "usedExports": true,
          "warnings": 0,
        },
      ],
      "names": Array [
        "main",
      ],
      "origins": Array [
        Object {
          "loc": "main",
          "module": "",
          "moduleId": undefined,
          "moduleIdentifier": "",
          "moduleName": "",
          "reasons": Array [],
          "request": undefined,
        },
      ],
      "parents": Array [],
      "reason": undefined,
      "recorded": undefined,
      "rendered": true,
      "siblings": Array [],
      "size": 837,
    },
  ],
  "entrypoints": Object {
    "main": Object {
      "assets": Array [
        "./output.js",
        "./output.js.map",
      ],
      "childAssets": Object {},
      "children": Object {},
      "chunks": Array [
        0,
      ],
      "isOverSizeLimit": undefined,
    },
  },
  "errors": Array [],
  "filteredAssets": 0,
  "filteredModules": 0,
  "hash": "6617f166070041c8ce34",
  "modules": Array [
    Object {
      "assets": Array [],
      "built": true,
      "cacheable": true,
      "chunks": Array [
        0,
      ],
      "depth": 2,
      "errors": 0,
      "failed": false,
      "id": "../../../node_modules/webpack/buildin/module.js",
      "identifier": "<PROJECT_ROOT>/node_modules/webpack/buildin/module.js",
      "index": 2,
      "index2": 0,
      "issuer": "<PROJECT_ROOT>/test/fixtures/basic/app.js",
      "issuerId": "./app.js",
      "issuerName": "./app.js",
      "issuerPath": Array [
        Object {
          "id": 0,
          "identifier": "multi ./app.js",
          "name": "multi ./app.js",
          "profile": undefined,
        },
        Object {
          "id": "./app.js",
          "identifier": "<PROJECT_ROOT>/test/fixtures/basic/app.js",
          "name": "./app.js",
          "profile": undefined,
        },
      ],
      "name": "(webpack)/buildin/module.js",
      "optimizationBailout": Array [
        "ModuleConcatenation bailout: Module is not an ECMAScript module",
      ],
      "optional": false,
      "prefetched": false,
      "profile": undefined,
      "providedExports": null,
      "reasons": Array [
        Object {
          "explanation": undefined,
          "loc": "1:0-60",
          "module": "./app.js",
          "moduleId": "./app.js",
          "moduleIdentifier": "<PROJECT_ROOT>/test/fixtures/basic/app.js",
          "moduleName": "./app.js",
          "type": "cjs require",
          "userRequest": "module",
        },
      ],
      "size": 497,
      "source": "module.exports = function(module) {
	if (!module.webpackPolyfill) {
		module.deprecate = function() {};
		module.paths = [];
		// module.parent = undefined by default
		if (!module.children) module.children = [];
		Object.defineProperty(module, \\"loaded\\", {
			enumerable: true,
			get: function() {
				return module.l;
			}
		});
		Object.defineProperty(module, \\"id\\", {
			enumerable: true,
			get: function() {
				return module.i;
			}
		});
		module.webpackPolyfill = 1;
	}
	return module;
};
",
      "usedExports": true,
      "warnings": 0,
    },
    Object {
      "assets": Array [],
      "built": true,
      "cacheable": true,
      "chunks": Array [
        0,
      ],
      "depth": 1,
      "errors": 0,
      "failed": false,
      "id": "./app.js",
      "identifier": "<PROJECT_ROOT>/test/fixtures/basic/app.js",
      "index": 1,
      "index2": 2,
      "issuer": "multi ./app.js",
      "issuerId": 0,
      "issuerName": "multi ./app.js",
      "issuerPath": Array [
        Object {
          "id": 0,
          "identifier": "multi ./app.js",
          "name": "multi ./app.js",
          "profile": undefined,
        },
      ],
      "name": "./app.js",
      "optimizationBailout": Array [
        "ModuleConcatenation bailout: Module is not an ECMAScript module",
      ],
      "optional": false,
      "prefetched": false,
      "profile": undefined,
      "providedExports": null,
      "reasons": Array [
        Object {
          "explanation": undefined,
          "loc": "main:100000",
          "module": "multi ./app.js",
          "moduleId": 0,
          "moduleIdentifier": "multi ./app.js",
          "moduleName": "multi ./app.js",
          "type": "single entry",
          "userRequest": "./app.js",
        },
      ],
      "size": 207,
      "source": "/* eslint no-console: off */

require('./component');

if (typeof module.hot === 'object') {
  module.hot.accept((err) => {
    if (err) {
      console.error('Cannot apply HMR update.', err);
    }
  });
}
",
      "usedExports": true,
      "warnings": 0,
    },
    Object {
      "assets": Array [],
      "built": true,
      "cacheable": true,
      "chunks": Array [
        0,
      ],
      "depth": 2,
      "errors": 0,
      "failed": false,
      "id": "./component.js",
      "identifier": "<PROJECT_ROOT>/test/fixtures/basic/component.js",
      "index": 3,
      "index2": 1,
      "issuer": "<PROJECT_ROOT>/test/fixtures/basic/app.js",
      "issuerId": "./app.js",
      "issuerName": "./app.js",
      "issuerPath": Array [
        Object {
          "id": 0,
          "identifier": "multi ./app.js",
          "name": "multi ./app.js",
          "profile": undefined,
        },
        Object {
          "id": "./app.js",
          "identifier": "<PROJECT_ROOT>/test/fixtures/basic/app.js",
          "name": "./app.js",
          "profile": undefined,
        },
      ],
      "name": "./component.js",
      "optimizationBailout": Array [
        "ModuleConcatenation bailout: Module is not an ECMAScript module",
      ],
      "optional": false,
      "prefetched": false,
      "profile": undefined,
      "providedExports": null,
      "reasons": Array [
        Object {
          "explanation": undefined,
          "loc": "3:0-22",
          "module": "./app.js",
          "moduleId": "./app.js",
          "moduleIdentifier": "<PROJECT_ROOT>/test/fixtures/basic/app.js",
          "moduleName": "./app.js",
          "type": "cjs require",
          "userRequest": "./component",
        },
      ],
      "size": 105,
      "source": "/* global document */

const target = document.querySelector('#target');
target.innerHTML = 'component';
",
      "usedExports": true,
      "warnings": 0,
    },
    Object {
      "assets": Array [],
      "built": true,
      "cacheable": undefined,
      "chunks": Array [
        0,
      ],
      "depth": 0,
      "errors": 0,
      "failed": false,
      "id": 0,
      "identifier": "multi ./app.js",
      "index": 0,
      "index2": 3,
      "issuer": null,
      "issuerId": null,
      "issuerName": null,
      "issuerPath": null,
      "name": "multi ./app.js",
      "optimizationBailout": Array [
        "ModuleConcatenation bailout: Module is not an ECMAScript module",
      ],
      "optional": false,
      "prefetched": false,
      "profile": undefined,
      "providedExports": null,
      "reasons": Array [
        Object {
          "explanation": undefined,
          "module": null,
          "moduleId": null,
          "moduleIdentifier": null,
          "moduleName": null,
          "type": "multi entry",
          "userRequest": undefined,
        },
      ],
      "size": 28,
      "usedExports": true,
      "warnings": 0,
    },
  ],
  "namedChunkGroups": Object {
    "main": Object {
      "assets": Array [
        "./output.js",
        "./output.js.map",
      ],
      "childAssets": Object {},
      "children": Object {},
      "chunks": Array [
        0,
      ],
      "isOverSizeLimit": undefined,
    },
  },
  "outputPath": "<PROJECT_ROOT>/test/fixtures/basic",
  "publicPath": "",
  "time": /\\\\d\\+/,
  "version": "4.10.2",
  "warnings": Array [
    "configuration
The 'mode' option has not been set, webpack will fallback to 'production' for this value. Set 'mode' option to 'development' or 'production' to enable defaults for each environment.
You can also set it to 'none' to disable any default behavior. Learn more: https://webpack.js.org/concepts/mode/",
  ],
}
`;

exports[`compiler getCompiler with existing compiler 1`] = `
Compiler {
  "_pluginCompat": SyncBailHook {
    "_args": Array [
      "options",
    ],
    "_call": [Function],
    "_callAsync": [Function],
    "_promise": [Function],
    "_x": undefined,
    "call": [Function],
    "callAsync": [Function],
    "interceptors": Array [],
    "promise": [Function],
    "taps": Array [
      Object {
        "fn": [Function],
        "name": "Compiler",
        "type": "sync",
      },
      Object {
        "fn": [Function],
        "name": "Tapable camelCase",
        "stage": 100,
        "type": "sync",
      },
      Object {
        "fn": [Function],
        "name": "Tapable this.hooks",
        "stage": 200,
        "type": "sync",
      },
    ],
  },
  "context": "<PROJECT_ROOT>/test/fixtures/basic",
  "contextTimestamps": Map {},
  "dependencies": undefined,
  "fileTimestamps": Map {},
  "hooks": Object {
    "additionalPass": AsyncSeriesHook {
      "_args": Array [],
      "_call": undefined,
      "_callAsync": [Function],
      "_promise": [Function],
      "_x": undefined,
      "call": undefined,
      "callAsync": [Function],
      "interceptors": Array [],
      "promise": [Function],
      "taps": Array [],
    },
    "afterCompile": AsyncSeriesHook {
      "_args": Array [
        "compilation",
      ],
      "_call": undefined,
      "_callAsync": [Function],
      "_promise": [Function],
      "_x": undefined,
      "call": undefined,
      "callAsync": [Function],
      "interceptors": Array [],
      "promise": [Function],
      "taps": Array [],
    },
    "afterEmit": AsyncSeriesHook {
      "_args": Array [
        "compilation",
      ],
      "_call": undefined,
      "_callAsync": [Function],
      "_promise": [Function],
      "_x": undefined,
      "call": undefined,
      "callAsync": [Function],
      "interceptors": Array [],
      "promise": [Function],
      "taps": Array [
        Object {
          "fn": [Function],
          "name": "SizeLimitsPlugin",
          "type": "sync",
        },
      ],
    },
    "afterEnvironment": SyncHook {
      "_args": Array [],
      "_call": [Function],
      "_callAsync": [Function],
      "_promise": [Function],
      "_x": Array [],
      "call": [Function],
      "callAsync": [Function],
      "interceptors": Array [],
      "promise": [Function],
      "taps": Array [],
    },
    "afterPlugins": SyncHook {
      "_args": Array [
        "compiler",
      ],
      "_call": [Function],
      "_callAsync": [Function],
      "_promise": [Function],
      "_x": Array [],
      "call": [Function],
      "callAsync": [Function],
      "interceptors": Array [],
      "promise": [Function],
      "taps": Array [],
    },
    "afterResolvers": SyncHook {
      "_args": Array [
        "compiler",
      ],
      "_call": [Function],
      "_callAsync": [Function],
      "_promise": [Function],
      "_x": Array [
        [Function],
        [Function],
      ],
      "call": [Function],
      "callAsync": [Function],
      "interceptors": Array [],
      "promise": [Function],
      "taps": Array [
        Object {
          "fn": [Function],
          "name": "NodeSourcePlugin",
          "type": "sync",
        },
        Object {
          "fn": [Function],
          "name": "AMDPlugin",
          "type": "sync",
        },
      ],
    },
    "beforeCompile": AsyncSeriesHook {
      "_args": Array [
        "params",
      ],
      "_call": undefined,
      "_callAsync": [Function],
      "_promise": [Function],
      "_x": undefined,
      "call": undefined,
      "callAsync": [Function],
      "interceptors": Array [],
      "promise": [Function],
      "taps": Array [],
    },
    "beforeRun": AsyncSeriesHook {
      "_args": Array [
        "compilation",
      ],
      "_call": undefined,
      "_callAsync": [Function],
      "_promise": [Function],
      "_x": undefined,
      "call": undefined,
      "callAsync": [Function],
      "interceptors": Array [],
      "promise": [Function],
      "taps": Array [
        Object {
          "fn": [Function],
          "name": "NodeEnvironmentPlugin",
          "type": "sync",
        },
      ],
    },
    "compilation": SyncHook {
      "_args": Array [
        "compilation",
        "params",
      ],
      "_call": [Function],
      "_callAsync": [Function],
      "_promise": [Function],
      "_x": undefined,
      "call": [Function],
      "callAsync": [Function],
      "interceptors": Array [],
      "promise": [Function],
      "taps": Array [
        Object {
          "fn": [Function],
          "name": "NamedModulesPlugin",
          "type": "sync",
        },
        Object {
          "fn": [Function],
          "name": "FunctionModulePlugin",
          "type": "sync",
        },
        Object {
          "fn": [Function],
          "name": "NodeSourcePlugin",
          "type": "sync",
        },
        Object {
          "fn": [Function],
          "name": "LoaderTargetPlugin",
          "type": "sync",
        },
        Object {
          "fn": [Function],
          "name": "SourceMapDevToolPlugin",
          "type": "sync",
        },
        Object {
          "fn": [Function],
          "name": "JavascriptModulesPlugin",
          "type": "sync",
        },
        Object {
          "fn": [Function],
          "name": "JsonModulesPlugin",
          "type": "sync",
        },
        Object {
          "fn": [Function],
          "name": "WebAssemblyModulesPlugin",
          "type": "sync",
        },
        Object {
          "fn": [Function],
          "name": "MultiEntryPlugin",
          "type": "sync",
        },
        Object {
          "fn": [Function],
          "name": "CompatibilityPlugin",
          "type": "sync",
        },
        Object {
          "fn": [Function],
          "name": "HarmonyModulesPlugin",
          "type": "sync",
        },
        Object {
          "fn": [Function],
          "name": "AMDPlugin",
          "type": "sync",
        },
        Object {
          "fn": [Function],
          "name": "CommonJsPlugin",
          "type": "sync",
        },
        Object {
          "fn": [Function],
          "name": "LoaderPlugin",
          "type": "sync",
        },
        Object {
          "fn": [Function],
          "name": "LoaderPlugin",
          "type": "sync",
        },
        Object {
          "fn": [Function],
          "name": "NodeStuffPlugin",
          "type": "sync",
        },
        Object {
          "fn": [Function],
          "name": "RequireJsStuffPlugin",
          "type": "sync",
        },
        Object {
          "fn": [Function],
          "name": "APIPlugin",
          "type": "sync",
        },
        Object {
          "fn": [Function],
          "name": "ConstPlugin",
          "type": "sync",
        },
        Object {
          "fn": [Function],
          "name": "UseStrictPlugin",
          "type": "sync",
        },
        Object {
          "fn": [Function],
          "name": "RequireIncludePlugin",
          "type": "sync",
        },
        Object {
          "fn": [Function],
          "name": "RequireEnsurePlugin",
          "type": "sync",
        },
        Object {
          "fn": [Function],
          "name": "RequireContextPlugin",
          "type": "sync",
        },
        Object {
          "fn": [Function],
          "name": "ImportPlugin",
          "type": "sync",
        },
        Object {
          "fn": [Function],
          "name": "SystemPlugin",
          "type": "sync",
        },
        Object {
          "fn": [Function],
          "name": "EnsureChunkConditionsPlugin",
          "type": "sync",
        },
        Object {
          "fn": [Function],
          "name": "RemoveParentModulesPlugin",
          "type": "sync",
        },
        Object {
          "fn": [Function],
          "name": "RemoveEmptyChunksPlugin",
          "type": "sync",
        },
        Object {
          "fn": [Function],
          "name": "MergeDuplicateChunksPlugin",
          "type": "sync",
        },
        Object {
          "fn": [Function],
          "name": "FlagIncludedChunksPlugin",
          "type": "sync",
        },
        Object {
          "fn": [Function],
          "name": "OccurrenceOrderPlugin",
          "type": "sync",
        },
        Object {
          "fn": [Function],
          "name": "SideEffectsFlagPlugin",
          "type": "sync",
        },
        Object {
          "fn": [Function],
          "name": "FlagDependencyExportsPlugin",
          "type": "sync",
        },
        Object {
          "fn": [Function],
          "name": "FlagDependencyUsagePlugin",
          "type": "sync",
        },
        Object {
          "fn": [Function],
          "name": "ModuleConcatenationPlugin",
          "type": "sync",
        },
        Object {
          "fn": [Function],
          "name": "NoEmitOnErrorsPlugin",
          "type": "sync",
        },
        Object {
          "fn": [Function],
          "name": "DefinePlugin",
          "type": "sync",
        },
        Object {
          "fn": [Function],
          "name": "UglifyJSPlugin",
          "type": "sync",
        },
        Object {
          "fn": [Function],
          "name": "TemplatedPathPlugin",
          "type": "sync",
        },
        Object {
          "fn": [Function],
          "name": "RecordIdsPlugin",
          "type": "sync",
        },
        Object {
          "fn": [Function],
          "name": "WarnCaseSensitiveModulesPlugin",
          "type": "sync",
        },
      ],
    },
    "compile": SyncHook {
      "_args": Array [
        "params",
      ],
      "_call": [Function],
      "_callAsync": [Function],
      "_promise": [Function],
      "_x": undefined,
      "call": [Function],
      "callAsync": [Function],
      "interceptors": Array [],
      "promise": [Function],
      "taps": Array [
        Object {
          "fn": [Function],
          "name": "WebpackServe",
          "type": "sync",
        },
      ],
    },
    "contextModuleFactory": SyncHook {
      "_args": Array [
        "contextModulefactory",
      ],
      "_call": [Function],
      "_callAsync": [Function],
      "_promise": [Function],
      "_x": undefined,
      "call": [Function],
      "callAsync": [Function],
      "interceptors": Array [],
      "promise": [Function],
      "taps": Array [],
    },
    "done": AsyncSeriesHook {
      "_args": Array [
        "stats",
      ],
      "_call": undefined,
      "_callAsync": [Function],
      "_promise": [Function],
      "_x": undefined,
      "call": undefined,
      "callAsync": [Function],
      "interceptors": Array [],
      "promise": [Function],
      "taps": Array [
        Object {
          "fn": [Function],
          "name": "WebpackServe",
          "type": "sync",
        },
      ],
    },
    "emit": AsyncSeriesHook {
      "_args": Array [
        "compilation",
      ],
      "_call": undefined,
      "_callAsync": [Function],
      "_promise": [Function],
      "_x": undefined,
      "call": undefined,
      "callAsync": [Function],
      "interceptors": Array [],
      "promise": [Function],
      "taps": Array [],
    },
    "entryOption": SyncBailHook {
      "_args": Array [
        "context",
        "entry",
      ],
      "_call": [Function],
      "_callAsync": [Function],
      "_promise": [Function],
      "_x": Array [
        [Function],
      ],
      "call": [Function],
      "callAsync": [Function],
      "interceptors": Array [],
      "promise": [Function],
      "taps": Array [
        Object {
          "fn": [Function],
          "name": "EntryOptionPlugin",
          "type": "sync",
        },
      ],
    },
    "environment": SyncHook {
      "_args": Array [],
      "_call": [Function],
      "_callAsync": [Function],
      "_promise": [Function],
      "_x": Array [],
      "call": [Function],
      "callAsync": [Function],
      "interceptors": Array [],
      "promise": [Function],
      "taps": Array [],
    },
    "failed": SyncHook {
      "_args": Array [
        "error",
      ],
      "_call": [Function],
      "_callAsync": [Function],
      "_promise": [Function],
      "_x": undefined,
      "call": [Function],
      "callAsync": [Function],
      "interceptors": Array [],
      "promise": [Function],
      "taps": Array [],
    },
    "invalid": SyncHook {
      "_args": Array [
        "filename",
        "changeTime",
      ],
      "_call": [Function],
      "_callAsync": [Function],
      "_promise": [Function],
      "_x": undefined,
      "call": [Function],
      "callAsync": [Function],
      "interceptors": Array [],
      "promise": [Function],
      "taps": Array [],
    },
    "make": AsyncParallelHook {
      "_args": Array [
        "compilation",
      ],
      "_call": undefined,
      "_callAsync": [Function],
      "_promise": [Function],
      "_x": undefined,
      "call": undefined,
      "callAsync": [Function],
      "interceptors": Array [],
      "promise": [Function],
      "taps": Array [
        Object {
          "fn": [Function],
          "name": "MultiEntryPlugin",
          "type": "async",
        },
      ],
    },
    "normalModuleFactory": SyncHook {
      "_args": Array [
        "normalModuleFactory",
      ],
      "_call": [Function],
      "_callAsync": [Function],
      "_promise": [Function],
      "_x": undefined,
      "call": [Function],
      "callAsync": [Function],
      "interceptors": Array [],
      "promise": [Function],
      "taps": Array [
        Object {
          "fn": [Function],
          "name": "SideEffectsFlagPlugin",
          "type": "sync",
        },
      ],
    },
    "run": AsyncSeriesHook {
      "_args": Array [
        "compilation",
      ],
      "_call": undefined,
      "_callAsync": [Function],
      "_promise": [Function],
      "_x": undefined,
      "call": undefined,
      "callAsync": [Function],
      "interceptors": Array [],
      "promise": [Function],
      "taps": Array [],
    },
    "shouldEmit": SyncBailHook {
      "_args": Array [
        "compilation",
      ],
      "_call": [Function],
      "_callAsync": [Function],
      "_promise": [Function],
      "_x": undefined,
      "call": [Function],
      "callAsync": [Function],
      "interceptors": Array [],
      "promise": [Function],
      "taps": Array [
        Object {
          "fn": [Function],
          "name": "NoEmitOnErrorsPlugin",
          "type": "sync",
        },
      ],
    },
    "thisCompilation": SyncHook {
      "_args": Array [
        "compilation",
        "params",
      ],
      "_call": [Function],
      "_callAsync": [Function],
      "_promise": [Function],
      "_x": undefined,
      "call": [Function],
      "callAsync": [Function],
      "interceptors": Array [],
      "promise": [Function],
      "taps": Array [
        Object {
          "fn": [Function],
          "name": "JsonpTemplatePlugin",
          "type": "sync",
        },
        Object {
          "fn": [Function],
          "name": "FetchCompileWasmTemplatePlugin",
          "type": "sync",
        },
        Object {
          "fn": [Function],
          "name": "WarnNoModeSetPlugin",
          "type": "sync",
        },
        Object {
          "fn": [Function],
          "name": "SplitChunksPlugin",
          "type": "sync",
        },
      ],
    },
    "watchClose": SyncHook {
      "_args": Array [],
      "_call": [Function],
      "_callAsync": [Function],
      "_promise": [Function],
      "_x": undefined,
      "call": [Function],
      "callAsync": [Function],
      "interceptors": Array [],
      "promise": [Function],
      "taps": Array [],
    },
    "watchRun": AsyncSeriesHook {
      "_args": Array [
        "compiler",
      ],
      "_call": undefined,
      "_callAsync": [Function],
      "_promise": [Function],
      "_x": undefined,
      "call": undefined,
      "callAsync": [Function],
      "interceptors": Array [],
      "promise": [Function],
      "taps": Array [],
    },
  },
  "inputFileSystem": CachedInputFileSystem {
    "_readFile": [Function],
    "_readFileStorage": Storage {
      "count": 0,
      "data": Map {},
      "duration": 60000,
      "interval": null,
      "levels": Array [
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
      ],
      "needTickCheck": false,
      "nextTick": null,
      "passive": true,
      "running": Map {},
      "tick": [Function],
    },
    "_readFileSync": [Function],
    "_readJson": [Function],
    "_readJsonStorage": Storage {
      "count": 0,
      "data": Map {},
      "duration": 60000,
      "interval": null,
      "levels": Array [
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
      ],
      "needTickCheck": false,
      "nextTick": null,
      "passive": true,
      "running": Map {},
      "tick": [Function],
    },
    "_readJsonSync": [Function],
    "_readdir": [Function],
    "_readdirStorage": Storage {
      "count": 0,
      "data": Map {},
      "duration": 60000,
      "interval": null,
      "levels": Array [
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
      ],
      "needTickCheck": false,
      "nextTick": null,
      "passive": true,
      "running": Map {},
      "tick": [Function],
    },
    "_readdirSync": [Function],
    "_readlink": [Function],
    "_readlinkStorage": Storage {
      "count": 0,
      "data": Map {},
      "duration": 60000,
      "interval": null,
      "levels": Array [
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
      ],
      "needTickCheck": false,
      "nextTick": null,
      "passive": true,
      "running": Map {},
      "tick": [Function],
    },
    "_readlinkSync": [Function],
    "_stat": [Function],
    "_statStorage": Storage {
      "count": 0,
      "data": Map {},
      "duration": 60000,
      "interval": null,
      "levels": Array [
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
        Set {},
      ],
      "needTickCheck": false,
      "nextTick": null,
      "passive": true,
      "running": Map {},
      "tick": [Function],
    },
    "_statSync": [Function],
    "fileSystem": NodeJsInputFileSystem {},
  },
  "name": undefined,
  "options": Object {
    "cache": false,
    "context": "<PROJECT_ROOT>/test/fixtures/basic",
    "devtool": "source-map",
    "entry": Array [
      "./app.js",
    ],
    "module": Object {
      "defaultRules": Array [
        Object {
          "resolve": Object {},
          "type": "javascript/auto",
        },
        Object {
          "resolve": Object {
            "mainFields": Array [
              "browser",
              "main",
            ],
          },
          "test": /\\\\\\.mjs\\$/i,
          "type": "javascript/esm",
        },
        Object {
          "test": /\\\\\\.json\\$/i,
          "type": "json",
        },
        Object {
          "test": /\\\\\\.wasm\\$/i,
          "type": "webassembly/experimental",
        },
      ],
      "exprContextCritical": true,
      "exprContextRecursive": true,
      "exprContextRegExp": false,
      "exprContextRequest": ".",
      "rules": Array [],
      "strictExportPresence": false,
      "strictThisContextOnImports": false,
      "unknownContextCritical": true,
      "unknownContextRecursive": true,
      "unknownContextRegExp": false,
      "unknownContextRequest": ".",
      "unsafeCache": false,
      "wrappedContextCritical": false,
      "wrappedContextRecursive": true,
      "wrappedContextRegExp": /\\.\\*/,
    },
    "node": Object {
      "Buffer": true,
      "__dirname": "mock",
      "__filename": "mock",
      "console": false,
      "global": true,
      "process": true,
      "setImmediate": true,
    },
    "optimization": Object {
      "concatenateModules": true,
      "flagIncludedChunks": true,
      "mergeDuplicateChunks": true,
      "minimize": true,
      "minimizer": Array [
        Object {
          "apply": [Function],
        },
      ],
      "namedChunks": false,
      "namedModules": false,
      "noEmitOnErrors": true,
      "nodeEnv": "production",
      "occurrenceOrder": true,
      "portableRecords": false,
      "providedExports": true,
      "removeAvailableModules": true,
      "removeEmptyChunks": true,
      "runtimeChunk": undefined,
      "sideEffects": true,
      "splitChunks": Object {
        "automaticNameDelimiter": "~",
        "cacheGroups": Object {
          "default": Object {
            "minChunks": 2,
            "priority": -20,
            "reuseExistingChunk": true,
          },
          "vendors": Object {
            "priority": -10,
            "test": /\\[\\\\\\\\\\\\/\\]node_modules\\[\\\\\\\\\\\\/\\]/,
          },
        },
        "chunks": "async",
        "maxAsyncRequests": 5,
        "maxInitialRequests": 3,
        "minChunks": 1,
        "minSize": 30000,
        "name": true,
      },
      "usedExports": true,
    },
    "output": Object {
      "chunkCallbackName": "webpackChunk",
      "chunkFilename": "./[id].output.js",
      "chunkLoadTimeout": 120000,
      "crossOriginLoading": false,
      "devtoolLineToLine": false,
      "devtoolNamespace": "",
      "filename": "./output.js",
      "globalObject": "window",
      "hashDigest": "hex",
      "hashDigestLength": 20,
      "hashFunction": "md4",
      "hotUpdateChunkFilename": "[id].[hash].hot-update.js",
      "hotUpdateFunction": "webpackHotUpdate",
      "hotUpdateMainFilename": "[hash].hot-update.json",
      "jsonpFunction": "webpackJsonp",
      "jsonpScriptType": false,
      "library": "",
      "libraryTarget": "var",
      "path": "<PROJECT_ROOT>/test/fixtures/basic",
      "pathinfo": false,
      "sourceMapFilename": "[file].map[query]",
      "strictModuleExceptionHandling": false,
      "webassemblyModuleFilename": "[modulehash].module.wasm",
    },
    "performance": Object {
      "hints": "warning",
      "maxAssetSize": 250000,
      "maxEntrypointSize": 250000,
    },
    "plugins": Array [
      NamedModulesPlugin {
        "options": Object {},
      },
    ],
    "resolve": Object {
      "aliasFields": Array [
        "browser",
      ],
      "cacheWithContext": false,
      "extensions": Array [
        ".wasm",
        ".mjs",
        ".js",
        ".json",
      ],
      "mainFields": Array [
        "browser",
        "module",
        "main",
      ],
      "mainFiles": Array [
        "index",
      ],
      "modules": Array [
        "node_modules",
      ],
      "unsafeCache": true,
    },
    "resolveLoader": Object {
      "cacheWithContext": false,
      "extensions": Array [
        ".js",
        ".json",
      ],
      "mainFields": Array [
        "loader",
        "main",
      ],
      "mainFiles": Array [
        "index",
      ],
      "unsafeCache": true,
    },
    "serve": Object {},
    "target": "web",
  },
  "outputFileSystem": NodeOutputFileSystem {
    "join": [Function],
    "mkdir": [Function],
    "mkdirp": [Function],
    "rmdir": [Function],
    "unlink": [Function],
    "writeFile": [Function],
  },
  "outputPath": "<PROJECT_ROOT>/test/fixtures/basic",
  "parentCompilation": undefined,
  "records": Object {},
  "recordsInputPath": undefined,
  "recordsOutputPath": undefined,
  "requestShortener": RequestShortener {
    "buildinsAsModule": false,
    "buildinsRegExp": /\\(\\^\\|!\\)\\\\/Users\\\\/powella\\\\/code\\\\/webpack\\\\-serve\\\\/node_modules\\\\/webpack/g,
    "cache": Map {},
    "currentDirectoryRegExp": /\\(\\^\\|!\\)\\\\/Users\\\\/powella\\\\/code\\\\/webpack\\\\-serve\\\\/test\\\\/fixtures\\\\/basic/g,
    "parentDirectoryRegExp": /\\(\\^\\|!\\)\\\\/Users\\\\/powella\\\\/code\\\\/webpack\\\\-serve\\\\/test\\\\/fixtures/g,
  },
  "resolverFactory": ResolverFactory {
    "_pluginCompat": SyncBailHook {
      "_args": Array [
        "options",
      ],
      "_call": [Function],
      "_callAsync": [Function],
      "_promise": [Function],
      "_x": undefined,
      "call": [Function],
      "callAsync": [Function],
      "interceptors": Array [],
      "promise": [Function],
      "taps": Array [
        Object {
          "fn": [Function],
          "name": "ResolverFactory",
          "type": "sync",
        },
        Object {
          "fn": [Function],
          "name": "Tapable camelCase",
          "stage": 100,
          "type": "sync",
        },
        Object {
          "fn": [Function],
          "name": "Tapable this.hooks",
          "stage": 200,
          "type": "sync",
        },
      ],
    },
    "cache1": WeakMap {},
    "cache2": Map {},
    "hooks": Object {
      "resolveOptions": HookMap {
        "_factory": [Function],
        "_interceptors": Array [],
        "_map": Map {
          "normal" => SyncWaterfallHook {
            "_args": Array [
              "resolveOptions",
            ],
            "_call": [Function],
            "_callAsync": [Function],
            "_promise": [Function],
            "_x": undefined,
            "call": [Function],
            "callAsync": [Function],
            "interceptors": Array [],
            "promise": [Function],
            "taps": Array [
              Object {
                "fn": [Function],
                "name": "WebpackOptionsApply",
                "type": "sync",
              },
            ],
          },
          "context" => SyncWaterfallHook {
            "_args": Array [
              "resolveOptions",
            ],
            "_call": [Function],
            "_callAsync": [Function],
            "_promise": [Function],
            "_x": undefined,
            "call": [Function],
            "callAsync": [Function],
            "interceptors": Array [],
            "promise": [Function],
            "taps": Array [
              Object {
                "fn": [Function],
                "name": "WebpackOptionsApply",
                "type": "sync",
              },
            ],
          },
          "loader" => SyncWaterfallHook {
            "_args": Array [
              "resolveOptions",
            ],
            "_call": [Function],
            "_callAsync": [Function],
            "_promise": [Function],
            "_x": undefined,
            "call": [Function],
            "callAsync": [Function],
            "interceptors": Array [],
            "promise": [Function],
            "taps": Array [
              Object {
                "fn": [Function],
                "name": "WebpackOptionsApply",
                "type": "sync",
              },
            ],
          },
        },
      },
      "resolver": HookMap {
        "_factory": [Function],
        "_interceptors": Array [],
        "_map": Map {
          "normal" => SyncHook {
            "_args": Array [
              "resolver",
              "resolveOptions",
            ],
            "_call": [Function],
            "_callAsync": [Function],
            "_promise": [Function],
            "_x": undefined,
            "call": [Function],
            "callAsync": [Function],
            "interceptors": Array [],
            "promise": [Function],
            "taps": Array [
              Object {
                "fn": [Function],
                "name": "NodeSourcePlugin",
                "type": "sync",
              },
              Object {
                "fn": [Function],
                "name": "NodeSourcePlugin",
                "type": "sync",
              },
              Object {
                "fn": [Function],
                "name": "NodeSourcePlugin",
                "type": "sync",
              },
              Object {
                "fn": [Function],
                "name": "NodeSourcePlugin",
                "type": "sync",
              },
              Object {
                "fn": [Function],
                "name": "NodeSourcePlugin",
                "type": "sync",
              },
              Object {
                "fn": [Function],
                "name": "NodeSourcePlugin",
                "type": "sync",
              },
              Object {
                "fn": [Function],
                "name": "NodeSourcePlugin",
                "type": "sync",
              },
              Object {
                "fn": [Function],
                "name": "NodeSourcePlugin",
                "type": "sync",
              },
              Object {
                "fn": [Function],
                "name": "NodeSourcePlugin",
                "type": "sync",
              },
              Object {
                "fn": [Function],
                "name": "NodeSourcePlugin",
                "type": "sync",
              },
              Object {
                "fn": [Function],
                "name": "NodeSourcePlugin",
                "type": "sync",
              },
              Object {
                "fn": [Function],
                "name": "NodeSourcePlugin",
                "type": "sync",
              },
              Object {
                "fn": [Function],
                "name": "NodeSourcePlugin",
                "type": "sync",
              },
              Object {
                "fn": [Function],
                "name": "NodeSourcePlugin",
                "type": "sync",
              },
              Object {
                "fn": [Function],
                "name": "NodeSourcePlugin",
                "type": "sync",
              },
              Object {
                "fn": [Function],
                "name": "NodeSourcePlugin",
                "type": "sync",
              },
              Object {
                "fn": [Function],
                "name": "NodeSourcePlugin",
                "type": "sync",
              },
              Object {
                "fn": [Function],
                "name": "NodeSourcePlugin",
                "type": "sync",
              },
              Object {
                "fn": [Function],
                "name": "NodeSourcePlugin",
                "type": "sync",
              },
              Object {
                "fn": [Function],
                "name": "NodeSourcePlugin",
                "type": "sync",
              },
              Object {
                "fn": [Function],
                "name": "NodeSourcePlugin",
                "type": "sync",
              },
              Object {
                "fn": [Function],
                "name": "NodeSourcePlugin",
                "type": "sync",
              },
              Object {
                "fn": [Function],
                "name": "NodeSourcePlugin",
                "type": "sync",
              },
              Object {
                "fn": [Function],
                "name": "NodeSourcePlugin",
                "type": "sync",
              },
              Object {
                "fn": [Function],
                "name": "NodeSourcePlugin",
                "type": "sync",
              },
              Object {
                "fn": [Function],
                "name": "NodeSourcePlugin",
                "type": "sync",
              },
              Object {
                "fn": [Function],
                "name": "NodeSourcePlugin",
                "type": "sync",
              },
              Object {
                "fn": [Function],
                "name": "NodeSourcePlugin",
                "type": "sync",
              },
              Object {
                "fn": [Function],
                "name": "NodeSourcePlugin",
                "type": "sync",
              },
              Object {
                "fn": [Function],
                "name": "NodeSourcePlugin",
                "type": "sync",
              },
              Object {
                "fn": [Function],
                "name": "NodeSourcePlugin",
                "type": "sync",
              },
              Object {
                "fn": [Function],
                "name": "NodeSourcePlugin",
                "type": "sync",
              },
              Object {
                "fn": [Function],
                "name": "NodeSourcePlugin",
                "type": "sync",
              },
              Object {
                "fn": [Function],
                "name": "NodeSourcePlugin",
                "type": "sync",
              },
              Object {
                "fn": [Function],
                "name": "NodeSourcePlugin",
                "type": "sync",
              },
              Object {
                "fn": [Function],
                "name": "NodeSourcePlugin",
                "type": "sync",
              },
              Object {
                "fn": [Function],
                "name": "NodeSourcePlugin",
                "type": "sync",
              },
              Object {
                "fn": [Function],
                "name": "AMDPlugin",
                "type": "sync",
              },
            ],
          },
        },
      },
    },
  },
  "resolvers": Object {
    "context": Object {
      "apply": [Function],
      "plugins": [Function],
    },
    "loader": Object {
      "apply": [Function],
      "plugins": [Function],
    },
    "normal": Object {
      "apply": [Function],
      "plugins": [Function],
    },
  },
  "running": false,
  "watchFileSystem": NodeWatchFileSystem {
    "inputFileSystem": CachedInputFileSystem {
      "_readFile": [Function],
      "_readFileStorage": Storage {
        "count": 0,
        "data": Map {},
        "duration": 60000,
        "interval": null,
        "levels": Array [
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
        ],
        "needTickCheck": false,
        "nextTick": null,
        "passive": true,
        "running": Map {},
        "tick": [Function],
      },
      "_readFileSync": [Function],
      "_readJson": [Function],
      "_readJsonStorage": Storage {
        "count": 0,
        "data": Map {},
        "duration": 60000,
        "interval": null,
        "levels": Array [
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
        ],
        "needTickCheck": false,
        "nextTick": null,
        "passive": true,
        "running": Map {},
        "tick": [Function],
      },
      "_readJsonSync": [Function],
      "_readdir": [Function],
      "_readdirStorage": Storage {
        "count": 0,
        "data": Map {},
        "duration": 60000,
        "interval": null,
        "levels": Array [
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
        ],
        "needTickCheck": false,
        "nextTick": null,
        "passive": true,
        "running": Map {},
        "tick": [Function],
      },
      "_readdirSync": [Function],
      "_readlink": [Function],
      "_readlinkStorage": Storage {
        "count": 0,
        "data": Map {},
        "duration": 60000,
        "interval": null,
        "levels": Array [
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
        ],
        "needTickCheck": false,
        "nextTick": null,
        "passive": true,
        "running": Map {},
        "tick": [Function],
      },
      "_readlinkSync": [Function],
      "_stat": [Function],
      "_statStorage": Storage {
        "count": 0,
        "data": Map {},
        "duration": 60000,
        "interval": null,
        "levels": Array [
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
        ],
        "needTickCheck": false,
        "nextTick": null,
        "passive": true,
        "running": Map {},
        "tick": [Function],
      },
      "_statSync": [Function],
      "fileSystem": NodeJsInputFileSystem {},
    },
    "watcher": EventEmitter {
      "_events": Object {},
      "_eventsCount": 0,
      "_maxListeners": undefined,
      "_onTimeout": [Function],
      "aggregateTimeout": 0,
      "aggregatedChanges": Array [],
      "aggregatedRemovals": Array [],
      "dirWatchers": Array [],
      "fileWatchers": Array [],
      "mtimes": Object {},
      "options": Object {
        "aggregateTimeout": 200,
      },
      "paused": false,
      "watcherOptions": Object {
        "ignored": undefined,
        "poll": undefined,
      },
    },
    "watcherOptions": Object {
      "aggregateTimeout": 200,
    },
  },
}
`;

exports[`compiler getCompiler with existing compiler 2`] = `
Object {
  "compiler": Compiler {
    "_pluginCompat": SyncBailHook {
      "_args": Array [
        "options",
      ],
      "_call": [Function],
      "_callAsync": [Function],
      "_promise": [Function],
      "_x": undefined,
      "call": [Function],
      "callAsync": [Function],
      "interceptors": Array [],
      "promise": [Function],
      "taps": Array [
        Object {
          "fn": [Function],
          "name": "Compiler",
          "type": "sync",
        },
        Object {
          "fn": [Function],
          "name": "Tapable camelCase",
          "stage": 100,
          "type": "sync",
        },
        Object {
          "fn": [Function],
          "name": "Tapable this.hooks",
          "stage": 200,
          "type": "sync",
        },
      ],
    },
    "context": "<PROJECT_ROOT>/test/fixtures/basic",
    "contextTimestamps": Map {},
    "dependencies": undefined,
    "fileTimestamps": Map {},
    "hooks": Object {
      "additionalPass": AsyncSeriesHook {
        "_args": Array [],
        "_call": undefined,
        "_callAsync": [Function],
        "_promise": [Function],
        "_x": undefined,
        "call": undefined,
        "callAsync": [Function],
        "interceptors": Array [],
        "promise": [Function],
        "taps": Array [],
      },
      "afterCompile": AsyncSeriesHook {
        "_args": Array [
          "compilation",
        ],
        "_call": undefined,
        "_callAsync": [Function],
        "_promise": [Function],
        "_x": undefined,
        "call": undefined,
        "callAsync": [Function],
        "interceptors": Array [],
        "promise": [Function],
        "taps": Array [],
      },
      "afterEmit": AsyncSeriesHook {
        "_args": Array [
          "compilation",
        ],
        "_call": undefined,
        "_callAsync": [Function],
        "_promise": [Function],
        "_x": undefined,
        "call": undefined,
        "callAsync": [Function],
        "interceptors": Array [],
        "promise": [Function],
        "taps": Array [
          Object {
            "fn": [Function],
            "name": "SizeLimitsPlugin",
            "type": "sync",
          },
        ],
      },
      "afterEnvironment": SyncHook {
        "_args": Array [],
        "_call": [Function],
        "_callAsync": [Function],
        "_promise": [Function],
        "_x": Array [],
        "call": [Function],
        "callAsync": [Function],
        "interceptors": Array [],
        "promise": [Function],
        "taps": Array [],
      },
      "afterPlugins": SyncHook {
        "_args": Array [
          "compiler",
        ],
        "_call": [Function],
        "_callAsync": [Function],
        "_promise": [Function],
        "_x": Array [],
        "call": [Function],
        "callAsync": [Function],
        "interceptors": Array [],
        "promise": [Function],
        "taps": Array [],
      },
      "afterResolvers": SyncHook {
        "_args": Array [
          "compiler",
        ],
        "_call": [Function],
        "_callAsync": [Function],
        "_promise": [Function],
        "_x": Array [
          [Function],
          [Function],
        ],
        "call": [Function],
        "callAsync": [Function],
        "interceptors": Array [],
        "promise": [Function],
        "taps": Array [
          Object {
            "fn": [Function],
            "name": "NodeSourcePlugin",
            "type": "sync",
          },
          Object {
            "fn": [Function],
            "name": "AMDPlugin",
            "type": "sync",
          },
        ],
      },
      "beforeCompile": AsyncSeriesHook {
        "_args": Array [
          "params",
        ],
        "_call": undefined,
        "_callAsync": [Function],
        "_promise": [Function],
        "_x": Array [],
        "call": undefined,
        "callAsync": [Function],
        "interceptors": Array [],
        "promise": [Function],
        "taps": Array [],
      },
      "beforeRun": AsyncSeriesHook {
        "_args": Array [
          "compilation",
        ],
        "_call": undefined,
        "_callAsync": [Function],
        "_promise": [Function],
        "_x": Array [
          [Function],
        ],
        "call": undefined,
        "callAsync": [Function],
        "interceptors": Array [],
        "promise": [Function],
        "taps": Array [
          Object {
            "fn": [Function],
            "name": "NodeEnvironmentPlugin",
            "type": "sync",
          },
        ],
      },
      "compilation": SyncHook {
        "_args": Array [
          "compilation",
          "params",
        ],
        "_call": [Function],
        "_callAsync": [Function],
        "_promise": [Function],
        "_x": Array [
          [Function],
          [Function],
          [Function],
          [Function],
          [Function],
          [Function],
          [Function],
          [Function],
          [Function],
          [Function],
          [Function],
          [Function],
          [Function],
          [Function],
          [Function],
          [Function],
          [Function],
          [Function],
          [Function],
          [Function],
          [Function],
          [Function],
          [Function],
          [Function],
          [Function],
          [Function],
          [Function],
          [Function],
          [Function],
          [Function],
          [Function],
          [Function],
          [Function],
          [Function],
          [Function],
          [Function],
          [Function],
          [Function],
          [Function],
          [Function],
          [Function],
        ],
        "call": [Function],
        "callAsync": [Function],
        "interceptors": Array [],
        "promise": [Function],
        "taps": Array [
          Object {
            "fn": [Function],
            "name": "NamedModulesPlugin",
            "type": "sync",
          },
          Object {
            "fn": [Function],
            "name": "FunctionModulePlugin",
            "type": "sync",
          },
          Object {
            "fn": [Function],
            "name": "NodeSourcePlugin",
            "type": "sync",
          },
          Object {
            "fn": [Function],
            "name": "LoaderTargetPlugin",
            "type": "sync",
          },
          Object {
            "fn": [Function],
            "name": "SourceMapDevToolPlugin",
            "type": "sync",
          },
          Object {
            "fn": [Function],
            "name": "JavascriptModulesPlugin",
            "type": "sync",
          },
          Object {
            "fn": [Function],
            "name": "JsonModulesPlugin",
            "type": "sync",
          },
          Object {
            "fn": [Function],
            "name": "WebAssemblyModulesPlugin",
            "type": "sync",
          },
          Object {
            "fn": [Function],
            "name": "MultiEntryPlugin",
            "type": "sync",
          },
          Object {
            "fn": [Function],
            "name": "CompatibilityPlugin",
            "type": "sync",
          },
          Object {
            "fn": [Function],
            "name": "HarmonyModulesPlugin",
            "type": "sync",
          },
          Object {
            "fn": [Function],
            "name": "AMDPlugin",
            "type": "sync",
          },
          Object {
            "fn": [Function],
            "name": "CommonJsPlugin",
            "type": "sync",
          },
          Object {
            "fn": [Function],
            "name": "LoaderPlugin",
            "type": "sync",
          },
          Object {
            "fn": [Function],
            "name": "LoaderPlugin",
            "type": "sync",
          },
          Object {
            "fn": [Function],
            "name": "NodeStuffPlugin",
            "type": "sync",
          },
          Object {
            "fn": [Function],
            "name": "RequireJsStuffPlugin",
            "type": "sync",
          },
          Object {
            "fn": [Function],
            "name": "APIPlugin",
            "type": "sync",
          },
          Object {
            "fn": [Function],
            "name": "ConstPlugin",
            "type": "sync",
          },
          Object {
            "fn": [Function],
            "name": "UseStrictPlugin",
            "type": "sync",
          },
          Object {
            "fn": [Function],
            "name": "RequireIncludePlugin",
            "type": "sync",
          },
          Object {
            "fn": [Function],
            "name": "RequireEnsurePlugin",
            "type": "sync",
          },
          Object {
            "fn": [Function],
            "name": "RequireContextPlugin",
            "type": "sync",
          },
          Object {
            "fn": [Function],
            "name": "ImportPlugin",
            "type": "sync",
          },
          Object {
            "fn": [Function],
            "name": "SystemPlugin",
            "type": "sync",
          },
          Object {
            "fn": [Function],
            "name": "EnsureChunkConditionsPlugin",
            "type": "sync",
          },
          Object {
            "fn": [Function],
            "name": "RemoveParentModulesPlugin",
            "type": "sync",
          },
          Object {
            "fn": [Function],
            "name": "RemoveEmptyChunksPlugin",
            "type": "sync",
          },
          Object {
            "fn": [Function],
            "name": "MergeDuplicateChunksPlugin",
            "type": "sync",
          },
          Object {
            "fn": [Function],
            "name": "FlagIncludedChunksPlugin",
            "type": "sync",
          },
          Object {
            "fn": [Function],
            "name": "OccurrenceOrderPlugin",
            "type": "sync",
          },
          Object {
            "fn": [Function],
            "name": "SideEffectsFlagPlugin",
            "type": "sync",
          },
          Object {
            "fn": [Function],
            "name": "FlagDependencyExportsPlugin",
            "type": "sync",
          },
          Object {
            "fn": [Function],
            "name": "FlagDependencyUsagePlugin",
            "type": "sync",
          },
          Object {
            "fn": [Function],
            "name": "ModuleConcatenationPlugin",
            "type": "sync",
          },
          Object {
            "fn": [Function],
            "name": "NoEmitOnErrorsPlugin",
            "type": "sync",
          },
          Object {
            "fn": [Function],
            "name": "DefinePlugin",
            "type": "sync",
          },
          Object {
            "fn": [Function],
            "name": "UglifyJSPlugin",
            "type": "sync",
          },
          Object {
            "fn": [Function],
            "name": "TemplatedPathPlugin",
            "type": "sync",
          },
          Object {
            "fn": [Function],
            "name": "RecordIdsPlugin",
            "type": "sync",
          },
          Object {
            "fn": [Function],
            "name": "WarnCaseSensitiveModulesPlugin",
            "type": "sync",
          },
        ],
      },
      "compile": SyncHook {
        "_args": Array [
          "params",
        ],
        "_call": [Function],
        "_callAsync": [Function],
        "_promise": [Function],
        "_x": Array [
          [Function],
        ],
        "call": [Function],
        "callAsync": [Function],
        "interceptors": Array [],
        "promise": [Function],
        "taps": Array [
          Object {
            "fn": [Function],
            "name": "WebpackServe",
            "type": "sync",
          },
        ],
      },
      "contextModuleFactory": SyncHook {
        "_args": Array [
          "contextModulefactory",
        ],
        "_call": [Function],
        "_callAsync": [Function],
        "_promise": [Function],
        "_x": Array [],
        "call": [Function],
        "callAsync": [Function],
        "interceptors": Array [],
        "promise": [Function],
        "taps": Array [],
      },
      "done": AsyncSeriesHook {
        "_args": Array [
          "stats",
        ],
        "_call": undefined,
        "_callAsync": [Function],
        "_promise": [Function],
        "_x": undefined,
        "call": undefined,
        "callAsync": [Function],
        "interceptors": Array [],
        "promise": [Function],
        "taps": Array [
          Object {
            "fn": [Function],
            "name": "WebpackServe",
            "type": "sync",
          },
        ],
      },
      "emit": AsyncSeriesHook {
        "_args": Array [
          "compilation",
        ],
        "_call": undefined,
        "_callAsync": [Function],
        "_promise": [Function],
        "_x": undefined,
        "call": undefined,
        "callAsync": [Function],
        "interceptors": Array [],
        "promise": [Function],
        "taps": Array [],
      },
      "entryOption": SyncBailHook {
        "_args": Array [
          "context",
          "entry",
        ],
        "_call": [Function],
        "_callAsync": [Function],
        "_promise": [Function],
        "_x": Array [
          [Function],
        ],
        "call": [Function],
        "callAsync": [Function],
        "interceptors": Array [],
        "promise": [Function],
        "taps": Array [
          Object {
            "fn": [Function],
            "name": "EntryOptionPlugin",
            "type": "sync",
          },
        ],
      },
      "environment": SyncHook {
        "_args": Array [],
        "_call": [Function],
        "_callAsync": [Function],
        "_promise": [Function],
        "_x": Array [],
        "call": [Function],
        "callAsync": [Function],
        "interceptors": Array [],
        "promise": [Function],
        "taps": Array [],
      },
      "failed": SyncHook {
        "_args": Array [
          "error",
        ],
        "_call": [Function],
        "_callAsync": [Function],
        "_promise": [Function],
        "_x": undefined,
        "call": [Function],
        "callAsync": [Function],
        "interceptors": Array [],
        "promise": [Function],
        "taps": Array [],
      },
      "invalid": SyncHook {
        "_args": Array [
          "filename",
          "changeTime",
        ],
        "_call": [Function],
        "_callAsync": [Function],
        "_promise": [Function],
        "_x": undefined,
        "call": [Function],
        "callAsync": [Function],
        "interceptors": Array [],
        "promise": [Function],
        "taps": Array [],
      },
      "make": AsyncParallelHook {
        "_args": Array [
          "compilation",
        ],
        "_call": undefined,
        "_callAsync": [Function],
        "_promise": [Function],
        "_x": Array [
          [Function],
        ],
        "call": undefined,
        "callAsync": [Function],
        "interceptors": Array [],
        "promise": [Function],
        "taps": Array [
          Object {
            "fn": [Function],
            "name": "MultiEntryPlugin",
            "type": "async",
          },
        ],
      },
      "normalModuleFactory": SyncHook {
        "_args": Array [
          "normalModuleFactory",
        ],
        "_call": [Function],
        "_callAsync": [Function],
        "_promise": [Function],
        "_x": Array [
          [Function],
        ],
        "call": [Function],
        "callAsync": [Function],
        "interceptors": Array [],
        "promise": [Function],
        "taps": Array [
          Object {
            "fn": [Function],
            "name": "SideEffectsFlagPlugin",
            "type": "sync",
          },
        ],
      },
      "run": AsyncSeriesHook {
        "_args": Array [
          "compilation",
        ],
        "_call": undefined,
        "_callAsync": [Function],
        "_promise": [Function],
        "_x": Array [],
        "call": undefined,
        "callAsync": [Function],
        "interceptors": Array [],
        "promise": [Function],
        "taps": Array [],
      },
      "shouldEmit": SyncBailHook {
        "_args": Array [
          "compilation",
        ],
        "_call": [Function],
        "_callAsync": [Function],
        "_promise": [Function],
        "_x": undefined,
        "call": [Function],
        "callAsync": [Function],
        "interceptors": Array [],
        "promise": [Function],
        "taps": Array [
          Object {
            "fn": [Function],
            "name": "NoEmitOnErrorsPlugin",
            "type": "sync",
          },
        ],
      },
      "thisCompilation": SyncHook {
        "_args": Array [
          "compilation",
          "params",
        ],
        "_call": [Function],
        "_callAsync": [Function],
        "_promise": [Function],
        "_x": Array [
          [Function],
          [Function],
          [Function],
          [Function],
        ],
        "call": [Function],
        "callAsync": [Function],
        "interceptors": Array [],
        "promise": [Function],
        "taps": Array [
          Object {
            "fn": [Function],
            "name": "JsonpTemplatePlugin",
            "type": "sync",
          },
          Object {
            "fn": [Function],
            "name": "FetchCompileWasmTemplatePlugin",
            "type": "sync",
          },
          Object {
            "fn": [Function],
            "name": "WarnNoModeSetPlugin",
            "type": "sync",
          },
          Object {
            "fn": [Function],
            "name": "SplitChunksPlugin",
            "type": "sync",
          },
        ],
      },
      "watchClose": SyncHook {
        "_args": Array [],
        "_call": [Function],
        "_callAsync": [Function],
        "_promise": [Function],
        "_x": undefined,
        "call": [Function],
        "callAsync": [Function],
        "interceptors": Array [],
        "promise": [Function],
        "taps": Array [],
      },
      "watchRun": AsyncSeriesHook {
        "_args": Array [
          "compiler",
        ],
        "_call": undefined,
        "_callAsync": [Function],
        "_promise": [Function],
        "_x": undefined,
        "call": undefined,
        "callAsync": [Function],
        "interceptors": Array [],
        "promise": [Function],
        "taps": Array [],
      },
    },
    "inputFileSystem": CachedInputFileSystem {
      "_readFile": [Function],
      "_readFileStorage": Storage {
        "count": 0,
        "data": Map {},
        "duration": 60000,
        "interval": null,
        "levels": Array [
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
        ],
        "needTickCheck": false,
        "nextTick": null,
        "passive": false,
        "running": Map {
          "<PROJECT_ROOT>/test/fixtures/basic/package.json" => Array [
            [Function],
          ],
        },
        "tick": [Function],
      },
      "_readFileSync": [Function],
      "_readJson": [Function],
      "_readJsonStorage": Storage {
        "count": 0,
        "data": Map {},
        "duration": 60000,
        "interval": null,
        "levels": Array [
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
        ],
        "needTickCheck": false,
        "nextTick": null,
        "passive": false,
        "running": Map {
          "<PROJECT_ROOT>/test/fixtures/basic/package.json" => Array [
            [Function],
          ],
        },
        "tick": [Function],
      },
      "_readJsonSync": [Function],
      "_readdir": [Function],
      "_readdirStorage": Storage {
        "count": 0,
        "data": Map {},
        "duration": 60000,
        "interval": null,
        "levels": Array [
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
        ],
        "needTickCheck": false,
        "nextTick": null,
        "passive": true,
        "running": Map {},
        "tick": [Function],
      },
      "_readdirSync": [Function],
      "_readlink": [Function],
      "_readlinkStorage": Storage {
        "count": 0,
        "data": Map {},
        "duration": 60000,
        "interval": null,
        "levels": Array [
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
        ],
        "needTickCheck": false,
        "nextTick": null,
        "passive": true,
        "running": Map {},
        "tick": [Function],
      },
      "_readlinkSync": [Function],
      "_stat": [Function],
      "_statStorage": Storage {
        "count": 0,
        "data": Map {},
        "duration": 60000,
        "interval": null,
        "levels": Array [
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
        ],
        "needTickCheck": false,
        "nextTick": null,
        "passive": true,
        "running": Map {},
        "tick": [Function],
      },
      "_statSync": [Function],
      "fileSystem": NodeJsInputFileSystem {},
    },
    "name": undefined,
    "options": Object {
      "cache": false,
      "context": "<PROJECT_ROOT>/test/fixtures/basic",
      "devtool": "source-map",
      "entry": Array [
        "./app.js",
      ],
      "module": Object {
        "defaultRules": Array [
          Object {
            "resolve": Object {},
            "type": "javascript/auto",
          },
          Object {
            "resolve": Object {
              "mainFields": Array [
                "browser",
                "main",
              ],
            },
            "test": /\\\\\\.mjs\\$/i,
            "type": "javascript/esm",
          },
          Object {
            "test": /\\\\\\.json\\$/i,
            "type": "json",
          },
          Object {
            "test": /\\\\\\.wasm\\$/i,
            "type": "webassembly/experimental",
          },
        ],
        "exprContextCritical": true,
        "exprContextRecursive": true,
        "exprContextRegExp": false,
        "exprContextRequest": ".",
        "rules": Array [],
        "strictExportPresence": false,
        "strictThisContextOnImports": false,
        "unknownContextCritical": true,
        "unknownContextRecursive": true,
        "unknownContextRegExp": false,
        "unknownContextRequest": ".",
        "unsafeCache": false,
        "wrappedContextCritical": false,
        "wrappedContextRecursive": true,
        "wrappedContextRegExp": /\\.\\*/,
      },
      "node": Object {
        "Buffer": true,
        "__dirname": "mock",
        "__filename": "mock",
        "console": false,
        "global": true,
        "process": true,
        "setImmediate": true,
      },
      "optimization": Object {
        "concatenateModules": true,
        "flagIncludedChunks": true,
        "mergeDuplicateChunks": true,
        "minimize": true,
        "minimizer": Array [
          Object {
            "apply": [Function],
          },
        ],
        "namedChunks": false,
        "namedModules": false,
        "noEmitOnErrors": true,
        "nodeEnv": "production",
        "occurrenceOrder": true,
        "portableRecords": false,
        "providedExports": true,
        "removeAvailableModules": true,
        "removeEmptyChunks": true,
        "runtimeChunk": undefined,
        "sideEffects": true,
        "splitChunks": Object {
          "automaticNameDelimiter": "~",
          "cacheGroups": Object {
            "default": Object {
              "minChunks": 2,
              "priority": -20,
              "reuseExistingChunk": true,
            },
            "vendors": Object {
              "priority": -10,
              "test": /\\[\\\\\\\\\\\\/\\]node_modules\\[\\\\\\\\\\\\/\\]/,
            },
          },
          "chunks": "async",
          "maxAsyncRequests": 5,
          "maxInitialRequests": 3,
          "minChunks": 1,
          "minSize": 30000,
          "name": true,
        },
        "usedExports": true,
      },
      "output": Object {
        "chunkCallbackName": "webpackChunk",
        "chunkFilename": "./[id].output.js",
        "chunkLoadTimeout": 120000,
        "crossOriginLoading": false,
        "devtoolLineToLine": false,
        "devtoolNamespace": "",
        "filename": "./output.js",
        "globalObject": "window",
        "hashDigest": "hex",
        "hashDigestLength": 20,
        "hashFunction": "md4",
        "hotUpdateChunkFilename": "[id].[hash].hot-update.js",
        "hotUpdateFunction": "webpackHotUpdate",
        "hotUpdateMainFilename": "[hash].hot-update.json",
        "jsonpFunction": "webpackJsonp",
        "jsonpScriptType": false,
        "library": "",
        "libraryTarget": "var",
        "path": "<PROJECT_ROOT>/test/fixtures/basic",
        "pathinfo": false,
        "sourceMapFilename": "[file].map[query]",
        "strictModuleExceptionHandling": false,
        "webassemblyModuleFilename": "[modulehash].module.wasm",
      },
      "performance": Object {
        "hints": "warning",
        "maxAssetSize": 250000,
        "maxEntrypointSize": 250000,
      },
      "plugins": Array [
        NamedModulesPlugin {
          "options": Object {},
        },
      ],
      "resolve": Object {
        "aliasFields": Array [
          "browser",
        ],
        "cacheWithContext": false,
        "extensions": Array [
          ".wasm",
          ".mjs",
          ".js",
          ".json",
        ],
        "mainFields": Array [
          "browser",
          "module",
          "main",
        ],
        "mainFiles": Array [
          "index",
        ],
        "modules": Array [
          "node_modules",
        ],
        "unsafeCache": true,
      },
      "resolveLoader": Object {
        "cacheWithContext": false,
        "extensions": Array [
          ".js",
          ".json",
        ],
        "mainFields": Array [
          "loader",
          "main",
        ],
        "mainFiles": Array [
          "index",
        ],
        "unsafeCache": true,
      },
      "serve": Object {},
      "target": "web",
    },
    "outputFileSystem": NodeOutputFileSystem {
      "join": [Function],
      "mkdir": [Function],
      "mkdirp": [Function],
      "rmdir": [Function],
      "unlink": [Function],
      "writeFile": [Function],
    },
    "outputPath": "<PROJECT_ROOT>/test/fixtures/basic",
    "parentCompilation": undefined,
    "records": Object {},
    "recordsInputPath": undefined,
    "recordsOutputPath": undefined,
    "requestShortener": RequestShortener {
      "buildinsAsModule": false,
      "buildinsRegExp": /\\(\\^\\|!\\)\\\\/Users\\\\/powella\\\\/code\\\\/webpack\\\\-serve\\\\/node_modules\\\\/webpack/g,
      "cache": Map {},
      "currentDirectoryRegExp": /\\(\\^\\|!\\)\\\\/Users\\\\/powella\\\\/code\\\\/webpack\\\\-serve\\\\/test\\\\/fixtures\\\\/basic/g,
      "parentDirectoryRegExp": /\\(\\^\\|!\\)\\\\/Users\\\\/powella\\\\/code\\\\/webpack\\\\-serve\\\\/test\\\\/fixtures/g,
    },
    "resolverFactory": ResolverFactory {
      "_pluginCompat": SyncBailHook {
        "_args": Array [
          "options",
        ],
        "_call": [Function],
        "_callAsync": [Function],
        "_promise": [Function],
        "_x": undefined,
        "call": [Function],
        "callAsync": [Function],
        "interceptors": Array [],
        "promise": [Function],
        "taps": Array [
          Object {
            "fn": [Function],
            "name": "ResolverFactory",
            "type": "sync",
          },
          Object {
            "fn": [Function],
            "name": "Tapable camelCase",
            "stage": 100,
            "type": "sync",
          },
          Object {
            "fn": [Function],
            "name": "Tapable this.hooks",
            "stage": 200,
            "type": "sync",
          },
        ],
      },
      "cache1": WeakMap {},
      "cache2": Map {
        "normal|{}" => Resolver {
          "_pluginCompat": SyncBailHook {
            "_args": Array [
              "options",
            ],
            "_call": [Function],
            "_callAsync": [Function],
            "_promise": [Function],
            "_x": undefined,
            "call": [Function],
            "callAsync": [Function],
            "interceptors": Array [],
            "promise": [Function],
            "taps": Array [
              Object {
                "fn": [Function],
                "name": "Resolver: before/after",
                "type": "sync",
              },
              Object {
                "fn": [Function],
                "name": "Resolver: step hooks",
                "type": "sync",
              },
              Object {
                "fn": [Function],
                "name": "Tapable camelCase",
                "stage": 100,
                "type": "sync",
              },
              Object {
                "fn": [Function],
                "name": "Tapable this.hooks",
                "stage": 200,
                "type": "sync",
              },
            ],
          },
          "fileSystem": CachedInputFileSystem {
            "_readFile": [Function],
            "_readFileStorage": Storage {
              "count": 0,
              "data": Map {},
              "duration": 60000,
              "interval": null,
              "levels": Array [
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
              ],
              "needTickCheck": false,
              "nextTick": null,
              "passive": false,
              "running": Map {
                "<PROJECT_ROOT>/test/fixtures/basic/package.json" => Array [
                  [Function],
                ],
              },
              "tick": [Function],
            },
            "_readFileSync": [Function],
            "_readJson": [Function],
            "_readJsonStorage": Storage {
              "count": 0,
              "data": Map {},
              "duration": 60000,
              "interval": null,
              "levels": Array [
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
              ],
              "needTickCheck": false,
              "nextTick": null,
              "passive": false,
              "running": Map {
                "<PROJECT_ROOT>/test/fixtures/basic/package.json" => Array [
                  [Function],
                ],
              },
              "tick": [Function],
            },
            "_readJsonSync": [Function],
            "_readdir": [Function],
            "_readdirStorage": Storage {
              "count": 0,
              "data": Map {},
              "duration": 60000,
              "interval": null,
              "levels": Array [
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
              ],
              "needTickCheck": false,
              "nextTick": null,
              "passive": true,
              "running": Map {},
              "tick": [Function],
            },
            "_readdirSync": [Function],
            "_readlink": [Function],
            "_readlinkStorage": Storage {
              "count": 0,
              "data": Map {},
              "duration": 60000,
              "interval": null,
              "levels": Array [
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
              ],
              "needTickCheck": false,
              "nextTick": null,
              "passive": true,
              "running": Map {},
              "tick": [Function],
            },
            "_readlinkSync": [Function],
            "_stat": [Function],
            "_statStorage": Storage {
              "count": 0,
              "data": Map {},
              "duration": 60000,
              "interval": null,
              "levels": Array [
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
              ],
              "needTickCheck": false,
              "nextTick": null,
              "passive": true,
              "running": Map {},
              "tick": [Function],
            },
            "_statSync": [Function],
            "fileSystem": NodeJsInputFileSystem {},
          },
          "hooks": Object {
            "describedRelative": AsyncSeriesBailHook {
              "_args": Array [
                "request",
                "resolveContext",
              ],
              "_call": undefined,
              "_callAsync": [Function],
              "_promise": [Function],
              "_x": undefined,
              "call": undefined,
              "callAsync": [Function],
              "interceptors": Array [],
              "name": "describedRelative",
              "promise": [Function],
              "taps": Array [
                Object {
                  "fn": [Function],
                  "name": "FileKindPlugin",
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "TryNextPlugin",
                  "type": "async",
                },
              ],
            },
            "describedResolve": AsyncSeriesBailHook {
              "_args": Array [
                "request",
                "resolveContext",
              ],
              "_call": undefined,
              "_callAsync": [Function],
              "_promise": [Function],
              "_x": undefined,
              "call": undefined,
              "callAsync": [Function],
              "interceptors": Array [],
              "name": "describedResolve",
              "promise": [Function],
              "taps": Array [
                Object {
                  "fn": [Function],
                  "name": "AliasFieldPlugin",
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "AliasPlugin",
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "AliasPlugin",
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "AliasPlugin",
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "AliasPlugin",
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "AliasPlugin",
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "AliasPlugin",
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "AliasPlugin",
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "AliasPlugin",
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "AliasPlugin",
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "AliasPlugin",
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "AliasPlugin",
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "AliasPlugin",
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "AliasPlugin",
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "AliasPlugin",
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "AliasPlugin",
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "AliasPlugin",
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "AliasPlugin",
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "AliasPlugin",
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "AliasPlugin",
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "AliasPlugin",
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "AliasPlugin",
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "AliasPlugin",
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "AliasPlugin",
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "AliasPlugin",
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "AliasPlugin",
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "AliasPlugin",
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "AliasPlugin",
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "AliasPlugin",
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "AliasPlugin",
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "AliasPlugin",
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "AliasPlugin",
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "AliasPlugin",
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "AliasPlugin",
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "AliasPlugin",
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "AliasPlugin",
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "AliasPlugin",
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "AliasPlugin",
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "AliasPlugin",
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "AliasPlugin",
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "AliasPlugin",
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "ModuleKindPlugin",
                  "stage": 10,
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "JoinRequestPlugin",
                  "stage": 10,
                  "type": "async",
                },
              ],
            },
            "directory": AsyncSeriesBailHook {
              "_args": Array [
                "request",
                "resolveContext",
              ],
              "_call": undefined,
              "_callAsync": [Function],
              "_promise": [Function],
              "_x": undefined,
              "call": undefined,
              "callAsync": [Function],
              "interceptors": Array [],
              "name": "directory",
              "promise": [Function],
              "taps": Array [
                Object {
                  "fn": [Function],
                  "name": "DirectoryExistsPlugin",
                  "type": "async",
                },
              ],
            },
            "existingDirectory": AsyncSeriesBailHook {
              "_args": Array [
                "request",
                "resolveContext",
              ],
              "_call": undefined,
              "_callAsync": [Function],
              "_promise": [Function],
              "_x": undefined,
              "call": undefined,
              "callAsync": [Function],
              "interceptors": Array [],
              "name": "existingDirectory",
              "promise": [Function],
              "taps": Array [
                Object {
                  "fn": [Function],
                  "name": "MainFieldPlugin",
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "MainFieldPlugin",
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "MainFieldPlugin",
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "UseFilePlugin",
                  "type": "async",
                },
              ],
            },
            "existingFile": AsyncSeriesBailHook {
              "_args": Array [
                "request",
                "resolveContext",
              ],
              "_call": undefined,
              "_callAsync": [Function],
              "_promise": [Function],
              "_x": undefined,
              "call": undefined,
              "callAsync": [Function],
              "interceptors": Array [],
              "name": "existingFile",
              "promise": [Function],
              "taps": Array [
                Object {
                  "fn": [Function],
                  "name": "NextPlugin",
                  "type": "async",
                },
              ],
            },
            "file": AsyncSeriesBailHook {
              "_args": Array [
                "request",
                "resolveContext",
              ],
              "_call": undefined,
              "_callAsync": [Function],
              "_promise": [Function],
              "_x": undefined,
              "call": undefined,
              "callAsync": [Function],
              "interceptors": Array [],
              "name": "file",
              "promise": [Function],
              "taps": Array [
                Object {
                  "fn": [Function],
                  "name": "AliasFieldPlugin",
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "SymlinkPlugin",
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "FileExistsPlugin",
                  "type": "async",
                },
              ],
            },
            "module": AsyncSeriesBailHook {
              "_args": Array [
                "request",
                "resolveContext",
              ],
              "_call": undefined,
              "_callAsync": [Function],
              "_promise": [Function],
              "_x": undefined,
              "call": undefined,
              "callAsync": [Function],
              "interceptors": Array [],
              "name": "module",
              "promise": [Function],
              "taps": Array [
                Object {
                  "fn": [Function],
                  "name": "ModulesInHierachicDirectoriesPlugin",
                  "type": "async",
                },
              ],
            },
            "newResolve": AsyncSeriesBailHook {
              "_args": Array [
                "request",
                "resolveContext",
              ],
              "_call": undefined,
              "_callAsync": [Function],
              "_promise": [Function],
              "_x": Array [
                [Function],
              ],
              "call": undefined,
              "callAsync": [Function],
              "interceptors": Array [],
              "name": "newResolve",
              "promise": [Function],
              "taps": Array [
                Object {
                  "fn": [Function],
                  "name": "ParsePlugin",
                  "type": "async",
                },
              ],
            },
            "noResolve": SyncHook {
              "_args": Array [
                "request",
                "error",
              ],
              "_call": [Function],
              "_callAsync": [Function],
              "_promise": [Function],
              "_x": undefined,
              "call": [Function],
              "callAsync": [Function],
              "interceptors": Array [],
              "name": "noResolve",
              "promise": [Function],
              "taps": Array [],
            },
            "parsedResolve": AsyncSeriesBailHook {
              "_args": Array [
                "request",
                "resolveContext",
              ],
              "_call": undefined,
              "_callAsync": [Function],
              "_promise": [Function],
              "_x": Array [
                [Function],
                [Function],
              ],
              "call": undefined,
              "callAsync": [Function],
              "interceptors": Array [],
              "name": "parsedResolve",
              "promise": [Function],
              "taps": Array [
                Object {
                  "fn": [Function],
                  "name": "DescriptionFilePlugin",
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "NextPlugin",
                  "stage": 10,
                  "type": "async",
                },
              ],
            },
            "rawFile": AsyncSeriesBailHook {
              "_args": Array [
                "request",
                "resolveContext",
              ],
              "_call": undefined,
              "_callAsync": [Function],
              "_promise": [Function],
              "_x": undefined,
              "call": undefined,
              "callAsync": [Function],
              "interceptors": Array [],
              "name": "rawFile",
              "promise": [Function],
              "taps": Array [
                Object {
                  "fn": [Function],
                  "name": "TryNextPlugin",
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "AppendPlugin",
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "AppendPlugin",
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "AppendPlugin",
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "AppendPlugin",
                  "type": "async",
                },
              ],
            },
            "rawModule": AsyncSeriesBailHook {
              "_args": Array [
                "request",
                "resolveContext",
              ],
              "_call": undefined,
              "_callAsync": [Function],
              "_promise": [Function],
              "_x": undefined,
              "call": undefined,
              "callAsync": [Function],
              "interceptors": Array [],
              "name": "rawModule",
              "promise": [Function],
              "taps": Array [
                Object {
                  "fn": [Function],
                  "name": "TryNextPlugin",
                  "type": "async",
                },
              ],
            },
            "relative": AsyncSeriesBailHook {
              "_args": Array [
                "request",
                "resolveContext",
              ],
              "_call": undefined,
              "_callAsync": [Function],
              "_promise": [Function],
              "_x": undefined,
              "call": undefined,
              "callAsync": [Function],
              "interceptors": Array [],
              "name": "relative",
              "promise": [Function],
              "taps": Array [
                Object {
                  "fn": [Function],
                  "name": "DescriptionFilePlugin",
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "NextPlugin",
                  "stage": 10,
                  "type": "async",
                },
              ],
            },
            "resolve": AsyncSeriesBailHook {
              "_args": Array [
                "request",
                "resolveContext",
              ],
              "_call": undefined,
              "_callAsync": [Function],
              "_promise": [Function],
              "_x": Array [
                [Function],
              ],
              "call": undefined,
              "callAsync": [Function],
              "interceptors": Array [],
              "name": "resolve",
              "promise": [Function],
              "taps": Array [
                Object {
                  "fn": [Function],
                  "name": "UnsafeCachePlugin",
                  "type": "async",
                },
              ],
            },
            "resolveStep": SyncHook {
              "_args": Array [
                "hook",
                "request",
              ],
              "_call": [Function],
              "_callAsync": [Function],
              "_promise": [Function],
              "_x": Array [],
              "call": [Function],
              "callAsync": [Function],
              "interceptors": Array [],
              "name": "resolveStep",
              "promise": [Function],
              "taps": Array [],
            },
            "resolved": AsyncSeriesBailHook {
              "_args": Array [
                "request",
                "resolveContext",
              ],
              "_call": undefined,
              "_callAsync": [Function],
              "_promise": [Function],
              "_x": undefined,
              "call": undefined,
              "callAsync": [Function],
              "interceptors": Array [],
              "name": "resolved",
              "promise": [Function],
              "taps": Array [
                Object {
                  "fn": [Function],
                  "name": "ResultPlugin",
                  "type": "async",
                },
              ],
            },
            "result": AsyncSeriesHook {
              "_args": Array [
                "result",
                "resolveContext",
              ],
              "_call": undefined,
              "_callAsync": [Function],
              "_promise": [Function],
              "_x": undefined,
              "call": undefined,
              "callAsync": [Function],
              "interceptors": Array [],
              "promise": [Function],
              "taps": Array [],
            },
            "undescribedRawFile": AsyncSeriesBailHook {
              "_args": Array [
                "request",
                "resolveContext",
              ],
              "_call": undefined,
              "_callAsync": [Function],
              "_promise": [Function],
              "_x": undefined,
              "call": undefined,
              "callAsync": [Function],
              "interceptors": Array [],
              "name": "undescribedRawFile",
              "promise": [Function],
              "taps": Array [
                Object {
                  "fn": [Function],
                  "name": "DescriptionFilePlugin",
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "NextPlugin",
                  "stage": 10,
                  "type": "async",
                },
              ],
            },
          },
        },
        "loader|{}" => Resolver {
          "_pluginCompat": SyncBailHook {
            "_args": Array [
              "options",
            ],
            "_call": [Function],
            "_callAsync": [Function],
            "_promise": [Function],
            "_x": undefined,
            "call": [Function],
            "callAsync": [Function],
            "interceptors": Array [],
            "promise": [Function],
            "taps": Array [
              Object {
                "fn": [Function],
                "name": "Resolver: before/after",
                "type": "sync",
              },
              Object {
                "fn": [Function],
                "name": "Resolver: step hooks",
                "type": "sync",
              },
              Object {
                "fn": [Function],
                "name": "Tapable camelCase",
                "stage": 100,
                "type": "sync",
              },
              Object {
                "fn": [Function],
                "name": "Tapable this.hooks",
                "stage": 200,
                "type": "sync",
              },
            ],
          },
          "fileSystem": CachedInputFileSystem {
            "_readFile": [Function],
            "_readFileStorage": Storage {
              "count": 0,
              "data": Map {},
              "duration": 60000,
              "interval": null,
              "levels": Array [
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
              ],
              "needTickCheck": false,
              "nextTick": null,
              "passive": false,
              "running": Map {
                "<PROJECT_ROOT>/test/fixtures/basic/package.json" => Array [
                  [Function],
                ],
              },
              "tick": [Function],
            },
            "_readFileSync": [Function],
            "_readJson": [Function],
            "_readJsonStorage": Storage {
              "count": 0,
              "data": Map {},
              "duration": 60000,
              "interval": null,
              "levels": Array [
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
              ],
              "needTickCheck": false,
              "nextTick": null,
              "passive": false,
              "running": Map {
                "<PROJECT_ROOT>/test/fixtures/basic/package.json" => Array [
                  [Function],
                ],
              },
              "tick": [Function],
            },
            "_readJsonSync": [Function],
            "_readdir": [Function],
            "_readdirStorage": Storage {
              "count": 0,
              "data": Map {},
              "duration": 60000,
              "interval": null,
              "levels": Array [
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
              ],
              "needTickCheck": false,
              "nextTick": null,
              "passive": true,
              "running": Map {},
              "tick": [Function],
            },
            "_readdirSync": [Function],
            "_readlink": [Function],
            "_readlinkStorage": Storage {
              "count": 0,
              "data": Map {},
              "duration": 60000,
              "interval": null,
              "levels": Array [
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
              ],
              "needTickCheck": false,
              "nextTick": null,
              "passive": true,
              "running": Map {},
              "tick": [Function],
            },
            "_readlinkSync": [Function],
            "_stat": [Function],
            "_statStorage": Storage {
              "count": 0,
              "data": Map {},
              "duration": 60000,
              "interval": null,
              "levels": Array [
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
              ],
              "needTickCheck": false,
              "nextTick": null,
              "passive": true,
              "running": Map {},
              "tick": [Function],
            },
            "_statSync": [Function],
            "fileSystem": NodeJsInputFileSystem {},
          },
          "hooks": Object {
            "describedRelative": AsyncSeriesBailHook {
              "_args": Array [
                "request",
                "resolveContext",
              ],
              "_call": undefined,
              "_callAsync": [Function],
              "_promise": [Function],
              "_x": undefined,
              "call": undefined,
              "callAsync": [Function],
              "interceptors": Array [],
              "name": "describedRelative",
              "promise": [Function],
              "taps": Array [
                Object {
                  "fn": [Function],
                  "name": "FileKindPlugin",
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "TryNextPlugin",
                  "type": "async",
                },
              ],
            },
            "describedResolve": AsyncSeriesBailHook {
              "_args": Array [
                "request",
                "resolveContext",
              ],
              "_call": undefined,
              "_callAsync": [Function],
              "_promise": [Function],
              "_x": undefined,
              "call": undefined,
              "callAsync": [Function],
              "interceptors": Array [],
              "name": "describedResolve",
              "promise": [Function],
              "taps": Array [
                Object {
                  "fn": [Function],
                  "name": "ModuleKindPlugin",
                  "stage": 10,
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "JoinRequestPlugin",
                  "stage": 10,
                  "type": "async",
                },
              ],
            },
            "directory": AsyncSeriesBailHook {
              "_args": Array [
                "request",
                "resolveContext",
              ],
              "_call": undefined,
              "_callAsync": [Function],
              "_promise": [Function],
              "_x": undefined,
              "call": undefined,
              "callAsync": [Function],
              "interceptors": Array [],
              "name": "directory",
              "promise": [Function],
              "taps": Array [
                Object {
                  "fn": [Function],
                  "name": "DirectoryExistsPlugin",
                  "type": "async",
                },
              ],
            },
            "existingDirectory": AsyncSeriesBailHook {
              "_args": Array [
                "request",
                "resolveContext",
              ],
              "_call": undefined,
              "_callAsync": [Function],
              "_promise": [Function],
              "_x": undefined,
              "call": undefined,
              "callAsync": [Function],
              "interceptors": Array [],
              "name": "existingDirectory",
              "promise": [Function],
              "taps": Array [
                Object {
                  "fn": [Function],
                  "name": "MainFieldPlugin",
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "MainFieldPlugin",
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "UseFilePlugin",
                  "type": "async",
                },
              ],
            },
            "existingFile": AsyncSeriesBailHook {
              "_args": Array [
                "request",
                "resolveContext",
              ],
              "_call": undefined,
              "_callAsync": [Function],
              "_promise": [Function],
              "_x": undefined,
              "call": undefined,
              "callAsync": [Function],
              "interceptors": Array [],
              "name": "existingFile",
              "promise": [Function],
              "taps": Array [
                Object {
                  "fn": [Function],
                  "name": "NextPlugin",
                  "type": "async",
                },
              ],
            },
            "file": AsyncSeriesBailHook {
              "_args": Array [
                "request",
                "resolveContext",
              ],
              "_call": undefined,
              "_callAsync": [Function],
              "_promise": [Function],
              "_x": undefined,
              "call": undefined,
              "callAsync": [Function],
              "interceptors": Array [],
              "name": "file",
              "promise": [Function],
              "taps": Array [
                Object {
                  "fn": [Function],
                  "name": "SymlinkPlugin",
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "FileExistsPlugin",
                  "type": "async",
                },
              ],
            },
            "module": AsyncSeriesBailHook {
              "_args": Array [
                "request",
                "resolveContext",
              ],
              "_call": undefined,
              "_callAsync": [Function],
              "_promise": [Function],
              "_x": undefined,
              "call": undefined,
              "callAsync": [Function],
              "interceptors": Array [],
              "name": "module",
              "promise": [Function],
              "taps": Array [
                Object {
                  "fn": [Function],
                  "name": "ModulesInHierachicDirectoriesPlugin",
                  "type": "async",
                },
              ],
            },
            "newResolve": AsyncSeriesBailHook {
              "_args": Array [
                "request",
                "resolveContext",
              ],
              "_call": undefined,
              "_callAsync": [Function],
              "_promise": [Function],
              "_x": undefined,
              "call": undefined,
              "callAsync": [Function],
              "interceptors": Array [],
              "name": "newResolve",
              "promise": [Function],
              "taps": Array [
                Object {
                  "fn": [Function],
                  "name": "ParsePlugin",
                  "type": "async",
                },
              ],
            },
            "noResolve": SyncHook {
              "_args": Array [
                "request",
                "error",
              ],
              "_call": [Function],
              "_callAsync": [Function],
              "_promise": [Function],
              "_x": undefined,
              "call": [Function],
              "callAsync": [Function],
              "interceptors": Array [],
              "name": "noResolve",
              "promise": [Function],
              "taps": Array [],
            },
            "parsedResolve": AsyncSeriesBailHook {
              "_args": Array [
                "request",
                "resolveContext",
              ],
              "_call": undefined,
              "_callAsync": [Function],
              "_promise": [Function],
              "_x": undefined,
              "call": undefined,
              "callAsync": [Function],
              "interceptors": Array [],
              "name": "parsedResolve",
              "promise": [Function],
              "taps": Array [
                Object {
                  "fn": [Function],
                  "name": "DescriptionFilePlugin",
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "NextPlugin",
                  "stage": 10,
                  "type": "async",
                },
              ],
            },
            "rawFile": AsyncSeriesBailHook {
              "_args": Array [
                "request",
                "resolveContext",
              ],
              "_call": undefined,
              "_callAsync": [Function],
              "_promise": [Function],
              "_x": undefined,
              "call": undefined,
              "callAsync": [Function],
              "interceptors": Array [],
              "name": "rawFile",
              "promise": [Function],
              "taps": Array [
                Object {
                  "fn": [Function],
                  "name": "TryNextPlugin",
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "AppendPlugin",
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "AppendPlugin",
                  "type": "async",
                },
              ],
            },
            "rawModule": AsyncSeriesBailHook {
              "_args": Array [
                "request",
                "resolveContext",
              ],
              "_call": undefined,
              "_callAsync": [Function],
              "_promise": [Function],
              "_x": undefined,
              "call": undefined,
              "callAsync": [Function],
              "interceptors": Array [],
              "name": "rawModule",
              "promise": [Function],
              "taps": Array [
                Object {
                  "fn": [Function],
                  "name": "TryNextPlugin",
                  "type": "async",
                },
              ],
            },
            "relative": AsyncSeriesBailHook {
              "_args": Array [
                "request",
                "resolveContext",
              ],
              "_call": undefined,
              "_callAsync": [Function],
              "_promise": [Function],
              "_x": undefined,
              "call": undefined,
              "callAsync": [Function],
              "interceptors": Array [],
              "name": "relative",
              "promise": [Function],
              "taps": Array [
                Object {
                  "fn": [Function],
                  "name": "DescriptionFilePlugin",
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "NextPlugin",
                  "stage": 10,
                  "type": "async",
                },
              ],
            },
            "resolve": AsyncSeriesBailHook {
              "_args": Array [
                "request",
                "resolveContext",
              ],
              "_call": undefined,
              "_callAsync": [Function],
              "_promise": [Function],
              "_x": undefined,
              "call": undefined,
              "callAsync": [Function],
              "interceptors": Array [],
              "name": "resolve",
              "promise": [Function],
              "taps": Array [
                Object {
                  "fn": [Function],
                  "name": "UnsafeCachePlugin",
                  "type": "async",
                },
              ],
            },
            "resolveStep": SyncHook {
              "_args": Array [
                "hook",
                "request",
              ],
              "_call": [Function],
              "_callAsync": [Function],
              "_promise": [Function],
              "_x": undefined,
              "call": [Function],
              "callAsync": [Function],
              "interceptors": Array [],
              "name": "resolveStep",
              "promise": [Function],
              "taps": Array [],
            },
            "resolved": AsyncSeriesBailHook {
              "_args": Array [
                "request",
                "resolveContext",
              ],
              "_call": undefined,
              "_callAsync": [Function],
              "_promise": [Function],
              "_x": undefined,
              "call": undefined,
              "callAsync": [Function],
              "interceptors": Array [],
              "name": "resolved",
              "promise": [Function],
              "taps": Array [
                Object {
                  "fn": [Function],
                  "name": "ResultPlugin",
                  "type": "async",
                },
              ],
            },
            "result": AsyncSeriesHook {
              "_args": Array [
                "result",
                "resolveContext",
              ],
              "_call": undefined,
              "_callAsync": [Function],
              "_promise": [Function],
              "_x": undefined,
              "call": undefined,
              "callAsync": [Function],
              "interceptors": Array [],
              "promise": [Function],
              "taps": Array [],
            },
            "undescribedRawFile": AsyncSeriesBailHook {
              "_args": Array [
                "request",
                "resolveContext",
              ],
              "_call": undefined,
              "_callAsync": [Function],
              "_promise": [Function],
              "_x": undefined,
              "call": undefined,
              "callAsync": [Function],
              "interceptors": Array [],
              "name": "undescribedRawFile",
              "promise": [Function],
              "taps": Array [
                Object {
                  "fn": [Function],
                  "name": "DescriptionFilePlugin",
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "NextPlugin",
                  "stage": 10,
                  "type": "async",
                },
              ],
            },
          },
        },
      },
      "hooks": Object {
        "resolveOptions": HookMap {
          "_factory": [Function],
          "_interceptors": Array [],
          "_map": Map {
            "normal" => SyncWaterfallHook {
              "_args": Array [
                "resolveOptions",
              ],
              "_call": [Function],
              "_callAsync": [Function],
              "_promise": [Function],
              "_x": Array [
                [Function],
              ],
              "call": [Function],
              "callAsync": [Function],
              "interceptors": Array [],
              "promise": [Function],
              "taps": Array [
                Object {
                  "fn": [Function],
                  "name": "WebpackOptionsApply",
                  "type": "sync",
                },
              ],
            },
            "context" => SyncWaterfallHook {
              "_args": Array [
                "resolveOptions",
              ],
              "_call": [Function],
              "_callAsync": [Function],
              "_promise": [Function],
              "_x": undefined,
              "call": [Function],
              "callAsync": [Function],
              "interceptors": Array [],
              "promise": [Function],
              "taps": Array [
                Object {
                  "fn": [Function],
                  "name": "WebpackOptionsApply",
                  "type": "sync",
                },
              ],
            },
            "loader" => SyncWaterfallHook {
              "_args": Array [
                "resolveOptions",
              ],
              "_call": [Function],
              "_callAsync": [Function],
              "_promise": [Function],
              "_x": Array [
                [Function],
              ],
              "call": [Function],
              "callAsync": [Function],
              "interceptors": Array [],
              "promise": [Function],
              "taps": Array [
                Object {
                  "fn": [Function],
                  "name": "WebpackOptionsApply",
                  "type": "sync",
                },
              ],
            },
          },
        },
        "resolver": HookMap {
          "_factory": [Function],
          "_interceptors": Array [],
          "_map": Map {
            "normal" => SyncHook {
              "_args": Array [
                "resolver",
                "resolveOptions",
              ],
              "_call": [Function],
              "_callAsync": [Function],
              "_promise": [Function],
              "_x": Array [
                [Function],
                [Function],
                [Function],
                [Function],
                [Function],
                [Function],
                [Function],
                [Function],
                [Function],
                [Function],
                [Function],
                [Function],
                [Function],
                [Function],
                [Function],
                [Function],
                [Function],
                [Function],
                [Function],
                [Function],
                [Function],
                [Function],
                [Function],
                [Function],
                [Function],
                [Function],
                [Function],
                [Function],
                [Function],
                [Function],
                [Function],
                [Function],
                [Function],
                [Function],
                [Function],
                [Function],
                [Function],
                [Function],
              ],
              "call": [Function],
              "callAsync": [Function],
              "interceptors": Array [],
              "promise": [Function],
              "taps": Array [
                Object {
                  "fn": [Function],
                  "name": "NodeSourcePlugin",
                  "type": "sync",
                },
                Object {
                  "fn": [Function],
                  "name": "NodeSourcePlugin",
                  "type": "sync",
                },
                Object {
                  "fn": [Function],
                  "name": "NodeSourcePlugin",
                  "type": "sync",
                },
                Object {
                  "fn": [Function],
                  "name": "NodeSourcePlugin",
                  "type": "sync",
                },
                Object {
                  "fn": [Function],
                  "name": "NodeSourcePlugin",
                  "type": "sync",
                },
                Object {
                  "fn": [Function],
                  "name": "NodeSourcePlugin",
                  "type": "sync",
                },
                Object {
                  "fn": [Function],
                  "name": "NodeSourcePlugin",
                  "type": "sync",
                },
                Object {
                  "fn": [Function],
                  "name": "NodeSourcePlugin",
                  "type": "sync",
                },
                Object {
                  "fn": [Function],
                  "name": "NodeSourcePlugin",
                  "type": "sync",
                },
                Object {
                  "fn": [Function],
                  "name": "NodeSourcePlugin",
                  "type": "sync",
                },
                Object {
                  "fn": [Function],
                  "name": "NodeSourcePlugin",
                  "type": "sync",
                },
                Object {
                  "fn": [Function],
                  "name": "NodeSourcePlugin",
                  "type": "sync",
                },
                Object {
                  "fn": [Function],
                  "name": "NodeSourcePlugin",
                  "type": "sync",
                },
                Object {
                  "fn": [Function],
                  "name": "NodeSourcePlugin",
                  "type": "sync",
                },
                Object {
                  "fn": [Function],
                  "name": "NodeSourcePlugin",
                  "type": "sync",
                },
                Object {
                  "fn": [Function],
                  "name": "NodeSourcePlugin",
                  "type": "sync",
                },
                Object {
                  "fn": [Function],
                  "name": "NodeSourcePlugin",
                  "type": "sync",
                },
                Object {
                  "fn": [Function],
                  "name": "NodeSourcePlugin",
                  "type": "sync",
                },
                Object {
                  "fn": [Function],
                  "name": "NodeSourcePlugin",
                  "type": "sync",
                },
                Object {
                  "fn": [Function],
                  "name": "NodeSourcePlugin",
                  "type": "sync",
                },
                Object {
                  "fn": [Function],
                  "name": "NodeSourcePlugin",
                  "type": "sync",
                },
                Object {
                  "fn": [Function],
                  "name": "NodeSourcePlugin",
                  "type": "sync",
                },
                Object {
                  "fn": [Function],
                  "name": "NodeSourcePlugin",
                  "type": "sync",
                },
                Object {
                  "fn": [Function],
                  "name": "NodeSourcePlugin",
                  "type": "sync",
                },
                Object {
                  "fn": [Function],
                  "name": "NodeSourcePlugin",
                  "type": "sync",
                },
                Object {
                  "fn": [Function],
                  "name": "NodeSourcePlugin",
                  "type": "sync",
                },
                Object {
                  "fn": [Function],
                  "name": "NodeSourcePlugin",
                  "type": "sync",
                },
                Object {
                  "fn": [Function],
                  "name": "NodeSourcePlugin",
                  "type": "sync",
                },
                Object {
                  "fn": [Function],
                  "name": "NodeSourcePlugin",
                  "type": "sync",
                },
                Object {
                  "fn": [Function],
                  "name": "NodeSourcePlugin",
                  "type": "sync",
                },
                Object {
                  "fn": [Function],
                  "name": "NodeSourcePlugin",
                  "type": "sync",
                },
                Object {
                  "fn": [Function],
                  "name": "NodeSourcePlugin",
                  "type": "sync",
                },
                Object {
                  "fn": [Function],
                  "name": "NodeSourcePlugin",
                  "type": "sync",
                },
                Object {
                  "fn": [Function],
                  "name": "NodeSourcePlugin",
                  "type": "sync",
                },
                Object {
                  "fn": [Function],
                  "name": "NodeSourcePlugin",
                  "type": "sync",
                },
                Object {
                  "fn": [Function],
                  "name": "NodeSourcePlugin",
                  "type": "sync",
                },
                Object {
                  "fn": [Function],
                  "name": "NodeSourcePlugin",
                  "type": "sync",
                },
                Object {
                  "fn": [Function],
                  "name": "AMDPlugin",
                  "type": "sync",
                },
              ],
            },
            "loader" => SyncHook {
              "_args": Array [
                "resolver",
                "resolveOptions",
              ],
              "_call": [Function],
              "_callAsync": [Function],
              "_promise": [Function],
              "_x": Array [],
              "call": [Function],
              "callAsync": [Function],
              "interceptors": Array [],
              "promise": [Function],
              "taps": Array [],
            },
          },
        },
      },
    },
    "resolvers": Object {
      "context": Object {
        "apply": [Function],
        "plugins": [Function],
      },
      "loader": Object {
        "apply": [Function],
        "plugins": [Function],
      },
      "normal": Object {
        "apply": [Function],
        "plugins": [Function],
      },
    },
    "running": true,
    "watchFileSystem": NodeWatchFileSystem {
      "inputFileSystem": CachedInputFileSystem {
        "_readFile": [Function],
        "_readFileStorage": Storage {
          "count": 0,
          "data": Map {},
          "duration": 60000,
          "interval": null,
          "levels": Array [
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
          ],
          "needTickCheck": false,
          "nextTick": null,
          "passive": false,
          "running": Map {
            "<PROJECT_ROOT>/test/fixtures/basic/package.json" => Array [
              [Function],
            ],
          },
          "tick": [Function],
        },
        "_readFileSync": [Function],
        "_readJson": [Function],
        "_readJsonStorage": Storage {
          "count": 0,
          "data": Map {},
          "duration": 60000,
          "interval": null,
          "levels": Array [
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
          ],
          "needTickCheck": false,
          "nextTick": null,
          "passive": false,
          "running": Map {
            "<PROJECT_ROOT>/test/fixtures/basic/package.json" => Array [
              [Function],
            ],
          },
          "tick": [Function],
        },
        "_readJsonSync": [Function],
        "_readdir": [Function],
        "_readdirStorage": Storage {
          "count": 0,
          "data": Map {},
          "duration": 60000,
          "interval": null,
          "levels": Array [
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
          ],
          "needTickCheck": false,
          "nextTick": null,
          "passive": true,
          "running": Map {},
          "tick": [Function],
        },
        "_readdirSync": [Function],
        "_readlink": [Function],
        "_readlinkStorage": Storage {
          "count": 0,
          "data": Map {},
          "duration": 60000,
          "interval": null,
          "levels": Array [
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
          ],
          "needTickCheck": false,
          "nextTick": null,
          "passive": true,
          "running": Map {},
          "tick": [Function],
        },
        "_readlinkSync": [Function],
        "_stat": [Function],
        "_statStorage": Storage {
          "count": 0,
          "data": Map {},
          "duration": 60000,
          "interval": null,
          "levels": Array [
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
          ],
          "needTickCheck": false,
          "nextTick": null,
          "passive": true,
          "running": Map {},
          "tick": [Function],
        },
        "_statSync": [Function],
        "fileSystem": NodeJsInputFileSystem {},
      },
      "watcher": EventEmitter {
        "_events": Object {},
        "_eventsCount": 0,
        "_maxListeners": undefined,
        "_onTimeout": [Function],
        "aggregateTimeout": 0,
        "aggregatedChanges": Array [],
        "aggregatedRemovals": Array [],
        "dirWatchers": Array [],
        "fileWatchers": Array [],
        "mtimes": Object {},
        "options": Object {
          "aggregateTimeout": 200,
        },
        "paused": false,
        "watcherOptions": Object {
          "ignored": undefined,
          "poll": undefined,
        },
      },
      "watcherOptions": Object {
        "aggregateTimeout": 200,
      },
    },
  },
}
`;

exports[`compiler getCompiler with existing compiler 3`] = `
Object {
  "assets": Array [
    Object {
      "chunkNames": Array [
        "main",
      ],
      "chunks": Array [
        0,
      ],
      "emitted": true,
      "isOverSizeLimit": undefined,
      "name": "./output.js",
      "size": 1652,
    },
    Object {
      "chunkNames": Array [
        "main",
      ],
      "chunks": Array [
        0,
      ],
      "emitted": true,
      "isOverSizeLimit": undefined,
      "name": "./output.js.map",
      "size": 6012,
    },
  ],
  "assetsByChunkName": Object {
    "main": Array [
      "./output.js",
      "./output.js.map",
    ],
  },
  "builtAt": /\\\\d\\+/,
  "children": Array [],
  "chunks": Array [
    Object {
      "children": Array [],
      "childrenByOrder": Object {},
      "entry": true,
      "files": Array [
        "./output.js",
        "./output.js.map",
      ],
      "filteredModules": 0,
      "hash": "f41570492dc66df80eee",
      "id": 0,
      "initial": true,
      "modules": Array [
        Object {
          "assets": Array [],
          "built": true,
          "cacheable": true,
          "chunks": Array [
            0,
          ],
          "depth": 2,
          "errors": 0,
          "failed": false,
          "id": "../../../node_modules/webpack/buildin/module.js",
          "identifier": "<PROJECT_ROOT>/node_modules/webpack/buildin/module.js",
          "index": 2,
          "index2": 0,
          "issuer": "<PROJECT_ROOT>/test/fixtures/basic/app.js",
          "issuerId": "./app.js",
          "issuerName": "./app.js",
          "issuerPath": Array [
            Object {
              "id": 0,
              "identifier": "multi ./app.js",
              "name": "multi ./app.js",
              "profile": undefined,
            },
            Object {
              "id": "./app.js",
              "identifier": "<PROJECT_ROOT>/test/fixtures/basic/app.js",
              "name": "./app.js",
              "profile": undefined,
            },
          ],
          "name": "(webpack)/buildin/module.js",
          "optimizationBailout": Array [
            "ModuleConcatenation bailout: Module is not an ECMAScript module",
          ],
          "optional": false,
          "prefetched": false,
          "profile": undefined,
          "providedExports": null,
          "reasons": Array [
            Object {
              "explanation": undefined,
              "loc": "1:0-60",
              "module": "./app.js",
              "moduleId": "./app.js",
              "moduleIdentifier": "<PROJECT_ROOT>/test/fixtures/basic/app.js",
              "moduleName": "./app.js",
              "type": "cjs require",
              "userRequest": "module",
            },
          ],
          "size": 497,
          "source": "module.exports = function(module) {
	if (!module.webpackPolyfill) {
		module.deprecate = function() {};
		module.paths = [];
		// module.parent = undefined by default
		if (!module.children) module.children = [];
		Object.defineProperty(module, \\"loaded\\", {
			enumerable: true,
			get: function() {
				return module.l;
			}
		});
		Object.defineProperty(module, \\"id\\", {
			enumerable: true,
			get: function() {
				return module.i;
			}
		});
		module.webpackPolyfill = 1;
	}
	return module;
};
",
          "usedExports": true,
          "warnings": 0,
        },
        Object {
          "assets": Array [],
          "built": true,
          "cacheable": true,
          "chunks": Array [
            0,
          ],
          "depth": 1,
          "errors": 0,
          "failed": false,
          "id": "./app.js",
          "identifier": "<PROJECT_ROOT>/test/fixtures/basic/app.js",
          "index": 1,
          "index2": 2,
          "issuer": "multi ./app.js",
          "issuerId": 0,
          "issuerName": "multi ./app.js",
          "issuerPath": Array [
            Object {
              "id": 0,
              "identifier": "multi ./app.js",
              "name": "multi ./app.js",
              "profile": undefined,
            },
          ],
          "name": "./app.js",
          "optimizationBailout": Array [
            "ModuleConcatenation bailout: Module is not an ECMAScript module",
          ],
          "optional": false,
          "prefetched": false,
          "profile": undefined,
          "providedExports": null,
          "reasons": Array [
            Object {
              "explanation": undefined,
              "loc": "main:100000",
              "module": "multi ./app.js",
              "moduleId": 0,
              "moduleIdentifier": "multi ./app.js",
              "moduleName": "multi ./app.js",
              "type": "single entry",
              "userRequest": "./app.js",
            },
          ],
          "size": 207,
          "source": "/* eslint no-console: off */

require('./component');

if (typeof module.hot === 'object') {
  module.hot.accept((err) => {
    if (err) {
      console.error('Cannot apply HMR update.', err);
    }
  });
}
",
          "usedExports": true,
          "warnings": 0,
        },
        Object {
          "assets": Array [],
          "built": true,
          "cacheable": true,
          "chunks": Array [
            0,
          ],
          "depth": 2,
          "errors": 0,
          "failed": false,
          "id": "./component.js",
          "identifier": "<PROJECT_ROOT>/test/fixtures/basic/component.js",
          "index": 3,
          "index2": 1,
          "issuer": "<PROJECT_ROOT>/test/fixtures/basic/app.js",
          "issuerId": "./app.js",
          "issuerName": "./app.js",
          "issuerPath": Array [
            Object {
              "id": 0,
              "identifier": "multi ./app.js",
              "name": "multi ./app.js",
              "profile": undefined,
            },
            Object {
              "id": "./app.js",
              "identifier": "<PROJECT_ROOT>/test/fixtures/basic/app.js",
              "name": "./app.js",
              "profile": undefined,
            },
          ],
          "name": "./component.js",
          "optimizationBailout": Array [
            "ModuleConcatenation bailout: Module is not an ECMAScript module",
          ],
          "optional": false,
          "prefetched": false,
          "profile": undefined,
          "providedExports": null,
          "reasons": Array [
            Object {
              "explanation": undefined,
              "loc": "3:0-22",
              "module": "./app.js",
              "moduleId": "./app.js",
              "moduleIdentifier": "<PROJECT_ROOT>/test/fixtures/basic/app.js",
              "moduleName": "./app.js",
              "type": "cjs require",
              "userRequest": "./component",
            },
          ],
          "size": 105,
          "source": "/* global document */

const target = document.querySelector('#target');
target.innerHTML = 'component';
",
          "usedExports": true,
          "warnings": 0,
        },
        Object {
          "assets": Array [],
          "built": true,
          "cacheable": undefined,
          "chunks": Array [
            0,
          ],
          "depth": 0,
          "errors": 0,
          "failed": false,
          "id": 0,
          "identifier": "multi ./app.js",
          "index": 0,
          "index2": 3,
          "issuer": null,
          "issuerId": null,
          "issuerName": null,
          "issuerPath": null,
          "name": "multi ./app.js",
          "optimizationBailout": Array [
            "ModuleConcatenation bailout: Module is not an ECMAScript module",
          ],
          "optional": false,
          "prefetched": false,
          "profile": undefined,
          "providedExports": null,
          "reasons": Array [
            Object {
              "explanation": undefined,
              "module": null,
              "moduleId": null,
              "moduleIdentifier": null,
              "moduleName": null,
              "type": "multi entry",
              "userRequest": undefined,
            },
          ],
          "size": 28,
          "usedExports": true,
          "warnings": 0,
        },
      ],
      "names": Array [
        "main",
      ],
      "origins": Array [
        Object {
          "loc": "main",
          "module": "",
          "moduleId": undefined,
          "moduleIdentifier": "",
          "moduleName": "",
          "reasons": Array [],
          "request": undefined,
        },
      ],
      "parents": Array [],
      "reason": undefined,
      "recorded": undefined,
      "rendered": true,
      "siblings": Array [],
      "size": 837,
    },
  ],
  "entrypoints": Object {
    "main": Object {
      "assets": Array [
        "./output.js",
        "./output.js.map",
      ],
      "childAssets": Object {},
      "children": Object {},
      "chunks": Array [
        0,
      ],
      "isOverSizeLimit": undefined,
    },
  },
  "errors": Array [],
  "filteredAssets": 0,
  "filteredModules": 0,
  "hash": "6617f166070041c8ce34",
  "modules": Array [
    Object {
      "assets": Array [],
      "built": true,
      "cacheable": true,
      "chunks": Array [
        0,
      ],
      "depth": 2,
      "errors": 0,
      "failed": false,
      "id": "../../../node_modules/webpack/buildin/module.js",
      "identifier": "<PROJECT_ROOT>/node_modules/webpack/buildin/module.js",
      "index": 2,
      "index2": 0,
      "issuer": "<PROJECT_ROOT>/test/fixtures/basic/app.js",
      "issuerId": "./app.js",
      "issuerName": "./app.js",
      "issuerPath": Array [
        Object {
          "id": 0,
          "identifier": "multi ./app.js",
          "name": "multi ./app.js",
          "profile": undefined,
        },
        Object {
          "id": "./app.js",
          "identifier": "<PROJECT_ROOT>/test/fixtures/basic/app.js",
          "name": "./app.js",
          "profile": undefined,
        },
      ],
      "name": "(webpack)/buildin/module.js",
      "optimizationBailout": Array [
        "ModuleConcatenation bailout: Module is not an ECMAScript module",
      ],
      "optional": false,
      "prefetched": false,
      "profile": undefined,
      "providedExports": null,
      "reasons": Array [
        Object {
          "explanation": undefined,
          "loc": "1:0-60",
          "module": "./app.js",
          "moduleId": "./app.js",
          "moduleIdentifier": "<PROJECT_ROOT>/test/fixtures/basic/app.js",
          "moduleName": "./app.js",
          "type": "cjs require",
          "userRequest": "module",
        },
      ],
      "size": 497,
      "source": "module.exports = function(module) {
	if (!module.webpackPolyfill) {
		module.deprecate = function() {};
		module.paths = [];
		// module.parent = undefined by default
		if (!module.children) module.children = [];
		Object.defineProperty(module, \\"loaded\\", {
			enumerable: true,
			get: function() {
				return module.l;
			}
		});
		Object.defineProperty(module, \\"id\\", {
			enumerable: true,
			get: function() {
				return module.i;
			}
		});
		module.webpackPolyfill = 1;
	}
	return module;
};
",
      "usedExports": true,
      "warnings": 0,
    },
    Object {
      "assets": Array [],
      "built": true,
      "cacheable": true,
      "chunks": Array [
        0,
      ],
      "depth": 1,
      "errors": 0,
      "failed": false,
      "id": "./app.js",
      "identifier": "<PROJECT_ROOT>/test/fixtures/basic/app.js",
      "index": 1,
      "index2": 2,
      "issuer": "multi ./app.js",
      "issuerId": 0,
      "issuerName": "multi ./app.js",
      "issuerPath": Array [
        Object {
          "id": 0,
          "identifier": "multi ./app.js",
          "name": "multi ./app.js",
          "profile": undefined,
        },
      ],
      "name": "./app.js",
      "optimizationBailout": Array [
        "ModuleConcatenation bailout: Module is not an ECMAScript module",
      ],
      "optional": false,
      "prefetched": false,
      "profile": undefined,
      "providedExports": null,
      "reasons": Array [
        Object {
          "explanation": undefined,
          "loc": "main:100000",
          "module": "multi ./app.js",
          "moduleId": 0,
          "moduleIdentifier": "multi ./app.js",
          "moduleName": "multi ./app.js",
          "type": "single entry",
          "userRequest": "./app.js",
        },
      ],
      "size": 207,
      "source": "/* eslint no-console: off */

require('./component');

if (typeof module.hot === 'object') {
  module.hot.accept((err) => {
    if (err) {
      console.error('Cannot apply HMR update.', err);
    }
  });
}
",
      "usedExports": true,
      "warnings": 0,
    },
    Object {
      "assets": Array [],
      "built": true,
      "cacheable": true,
      "chunks": Array [
        0,
      ],
      "depth": 2,
      "errors": 0,
      "failed": false,
      "id": "./component.js",
      "identifier": "<PROJECT_ROOT>/test/fixtures/basic/component.js",
      "index": 3,
      "index2": 1,
      "issuer": "<PROJECT_ROOT>/test/fixtures/basic/app.js",
      "issuerId": "./app.js",
      "issuerName": "./app.js",
      "issuerPath": Array [
        Object {
          "id": 0,
          "identifier": "multi ./app.js",
          "name": "multi ./app.js",
          "profile": undefined,
        },
        Object {
          "id": "./app.js",
          "identifier": "<PROJECT_ROOT>/test/fixtures/basic/app.js",
          "name": "./app.js",
          "profile": undefined,
        },
      ],
      "name": "./component.js",
      "optimizationBailout": Array [
        "ModuleConcatenation bailout: Module is not an ECMAScript module",
      ],
      "optional": false,
      "prefetched": false,
      "profile": undefined,
      "providedExports": null,
      "reasons": Array [
        Object {
          "explanation": undefined,
          "loc": "3:0-22",
          "module": "./app.js",
          "moduleId": "./app.js",
          "moduleIdentifier": "<PROJECT_ROOT>/test/fixtures/basic/app.js",
          "moduleName": "./app.js",
          "type": "cjs require",
          "userRequest": "./component",
        },
      ],
      "size": 105,
      "source": "/* global document */

const target = document.querySelector('#target');
target.innerHTML = 'component';
",
      "usedExports": true,
      "warnings": 0,
    },
    Object {
      "assets": Array [],
      "built": true,
      "cacheable": undefined,
      "chunks": Array [
        0,
      ],
      "depth": 0,
      "errors": 0,
      "failed": false,
      "id": 0,
      "identifier": "multi ./app.js",
      "index": 0,
      "index2": 3,
      "issuer": null,
      "issuerId": null,
      "issuerName": null,
      "issuerPath": null,
      "name": "multi ./app.js",
      "optimizationBailout": Array [
        "ModuleConcatenation bailout: Module is not an ECMAScript module",
      ],
      "optional": false,
      "prefetched": false,
      "profile": undefined,
      "providedExports": null,
      "reasons": Array [
        Object {
          "explanation": undefined,
          "module": null,
          "moduleId": null,
          "moduleIdentifier": null,
          "moduleName": null,
          "type": "multi entry",
          "userRequest": undefined,
        },
      ],
      "size": 28,
      "usedExports": true,
      "warnings": 0,
    },
  ],
  "namedChunkGroups": Object {
    "main": Object {
      "assets": Array [
        "./output.js",
        "./output.js.map",
      ],
      "childAssets": Object {},
      "children": Object {},
      "chunks": Array [
        0,
      ],
      "isOverSizeLimit": undefined,
    },
  },
  "outputPath": "<PROJECT_ROOT>/test/fixtures/basic",
  "publicPath": "",
  "time": /\\\\d\\+/,
  "version": "4.10.2",
  "warnings": Array [
    "configuration
The 'mode' option has not been set, webpack will fallback to 'production' for this value. Set 'mode' option to 'development' or 'production' to enable defaults for each environment.
You can also set it to 'none' to disable any default behavior. Learn more: https://webpack.js.org/concepts/mode/",
  ],
}
`;

exports[`compiler invalid config error 1`] = `
"An error was thrown while initializing Webpack
  WebpackOptionsValidationError: Invalid configuration object. Webpack has been initialised using a configuration object that does not match the API schema.
 - configuration has an unknown property 'foo'. These properties are valid:
   object { mode?, amd?, bail?, cache?, context?, dependencies?, devServer?, devtool?, entry?, externals?, loader?, module?, name?, node?, output?, optimization?, parallelism?, performance?, plugins?, profile?, recordsInputPath?, recordsOutputPath?, recordsPath?, resolve?, resolveLoader?, serve?, stats?, target?, watch?, watchOptions? }
   For typos: please correct them.
   For loader options: webpack >= v2.0.0 no longer allows custom properties in configuration.
     Loaders should be updated to allow passing options via loader options in module.rules.
     Until loaders are updated one can use the LoaderOptionsPlugin to pass these options to the loader:
     plugins: [
       new webpack.LoaderOptionsPlugin({
         // test: /\\\\.xxx$/, // may apply this only for some modules
         options: {
           foo: …
         }
       })
     ]"
`;
