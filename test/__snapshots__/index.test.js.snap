// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`serve basic config 1`] = `
Object {
  "env": "test",
  "proxy": false,
  "subdomainOffset": 2,
}
`;

exports[`serve basic config 2`] = `
Object {
  "bus": Nanobus {
    "_listeners": Object {},
    "_name": "nanobus",
    "_starListeners": Array [],
  },
  "clipboard": true,
  "compiler": Compiler {
    "_pluginCompat": SyncBailHook {
      "_args": Array [
        "options",
      ],
      "_call": [Function],
      "_callAsync": [Function],
      "_promise": [Function],
      "_x": undefined,
      "call": [Function],
      "callAsync": [Function],
      "interceptors": Array [],
      "promise": [Function],
      "taps": Array [
        Object {
          "fn": [Function],
          "name": "Compiler",
          "type": "sync",
        },
        Object {
          "fn": [Function],
          "name": "Tapable camelCase",
          "stage": 100,
          "type": "sync",
        },
        Object {
          "fn": [Function],
          "name": "Tapable this.hooks",
          "stage": 200,
          "type": "sync",
        },
      ],
    },
    "context": "<PROJECT_ROOT>/test/fixtures/basic",
    "contextTimestamps": Map {},
    "dependencies": undefined,
    "fileTimestamps": Map {},
    "hooks": Object {
      "additionalPass": AsyncSeriesHook {
        "_args": Array [],
        "_call": undefined,
        "_callAsync": [Function],
        "_promise": [Function],
        "_x": undefined,
        "call": undefined,
        "callAsync": [Function],
        "interceptors": Array [],
        "promise": [Function],
        "taps": Array [
          Object {
            "fn": [Function],
            "name": "HotModuleReplacementPlugin",
            "type": "async",
          },
        ],
      },
      "afterCompile": AsyncSeriesHook {
        "_args": Array [
          "compilation",
        ],
        "_call": undefined,
        "_callAsync": [Function],
        "_promise": [Function],
        "_x": undefined,
        "call": undefined,
        "callAsync": [Function],
        "interceptors": Array [],
        "promise": [Function],
        "taps": Array [],
      },
      "afterEmit": AsyncSeriesHook {
        "_args": Array [
          "compilation",
        ],
        "_call": undefined,
        "_callAsync": [Function],
        "_promise": [Function],
        "_x": undefined,
        "call": undefined,
        "callAsync": [Function],
        "interceptors": Array [],
        "promise": [Function],
        "taps": Array [
          Object {
            "fn": [Function],
            "name": "SizeLimitsPlugin",
            "type": "sync",
          },
        ],
      },
      "afterEnvironment": SyncHook {
        "_args": Array [],
        "_call": [Function],
        "_callAsync": [Function],
        "_promise": [Function],
        "_x": Array [],
        "call": [Function],
        "callAsync": [Function],
        "interceptors": Array [],
        "promise": [Function],
        "taps": Array [],
      },
      "afterPlugins": SyncHook {
        "_args": Array [
          "compiler",
        ],
        "_call": [Function],
        "_callAsync": [Function],
        "_promise": [Function],
        "_x": Array [],
        "call": [Function],
        "callAsync": [Function],
        "interceptors": Array [],
        "promise": [Function],
        "taps": Array [],
      },
      "afterResolvers": SyncHook {
        "_args": Array [
          "compiler",
        ],
        "_call": [Function],
        "_callAsync": [Function],
        "_promise": [Function],
        "_x": Array [
          [Function],
          [Function],
        ],
        "call": [Function],
        "callAsync": [Function],
        "interceptors": Array [],
        "promise": [Function],
        "taps": Array [
          Object {
            "fn": [Function],
            "name": "NodeSourcePlugin",
            "type": "sync",
          },
          Object {
            "fn": [Function],
            "name": "AMDPlugin",
            "type": "sync",
          },
        ],
      },
      "beforeCompile": AsyncSeriesHook {
        "_args": Array [
          "params",
        ],
        "_call": undefined,
        "_callAsync": [Function],
        "_promise": [Function],
        "_x": Array [
          [Function],
        ],
        "call": undefined,
        "callAsync": [Function],
        "interceptors": Array [],
        "promise": [Function],
        "taps": Array [
          Object {
            "fn": [Function],
            "name": "WebpackHotClient",
            "type": "sync",
          },
        ],
      },
      "beforeRun": AsyncSeriesHook {
        "_args": Array [
          "compilation",
        ],
        "_call": undefined,
        "_callAsync": [Function],
        "_promise": [Function],
        "_x": undefined,
        "call": undefined,
        "callAsync": [Function],
        "interceptors": Array [],
        "promise": [Function],
        "taps": Array [
          Object {
            "fn": [Function],
            "name": "NodeEnvironmentPlugin",
            "type": "sync",
          },
        ],
      },
      "compilation": SyncHook {
        "_args": Array [
          "compilation",
          "params",
        ],
        "_call": [Function],
        "_callAsync": [Function],
        "_promise": [Function],
        "_x": Array [
          [Function],
          [Function],
          [Function],
          [Function],
          [Function],
          [Function],
          [Function],
          [Function],
          [Function],
          [Function],
          [Function],
          [Function],
          [Function],
          [Function],
          [Function],
          [Function],
          [Function],
          [Function],
          [Function],
          [Function],
          [Function],
          [Function],
          [Function],
          [Function],
          [Function],
          [Function],
          [Function],
          [Function],
          [Function],
          [Function],
          [Function],
          [Function],
          [Function],
          [Function],
          [Function],
          [Function],
          [Function],
          [Function],
          [Function],
          [Function],
          [Function],
          [Function],
          [Function],
          [Function],
          [Function],
        ],
        "call": [Function],
        "callAsync": [Function],
        "interceptors": Array [],
        "promise": [Function],
        "taps": Array [
          Object {
            "fn": [Function],
            "name": "NamedModulesPlugin",
            "type": "sync",
          },
          Object {
            "fn": [Function],
            "name": "FunctionModulePlugin",
            "type": "sync",
          },
          Object {
            "fn": [Function],
            "name": "NodeSourcePlugin",
            "type": "sync",
          },
          Object {
            "fn": [Function],
            "name": "LoaderTargetPlugin",
            "type": "sync",
          },
          Object {
            "fn": [Function],
            "name": "SourceMapDevToolPlugin",
            "type": "sync",
          },
          Object {
            "fn": [Function],
            "name": "JavascriptModulesPlugin",
            "type": "sync",
          },
          Object {
            "fn": [Function],
            "name": "JsonModulesPlugin",
            "type": "sync",
          },
          Object {
            "fn": [Function],
            "name": "WebAssemblyModulesPlugin",
            "type": "sync",
          },
          Object {
            "fn": [Function],
            "name": "MultiEntryPlugin",
            "type": "sync",
          },
          Object {
            "fn": [Function],
            "name": "CompatibilityPlugin",
            "type": "sync",
          },
          Object {
            "fn": [Function],
            "name": "HarmonyModulesPlugin",
            "type": "sync",
          },
          Object {
            "fn": [Function],
            "name": "AMDPlugin",
            "type": "sync",
          },
          Object {
            "fn": [Function],
            "name": "CommonJsPlugin",
            "type": "sync",
          },
          Object {
            "fn": [Function],
            "name": "LoaderPlugin",
            "type": "sync",
          },
          Object {
            "fn": [Function],
            "name": "LoaderPlugin",
            "type": "sync",
          },
          Object {
            "fn": [Function],
            "name": "NodeStuffPlugin",
            "type": "sync",
          },
          Object {
            "fn": [Function],
            "name": "RequireJsStuffPlugin",
            "type": "sync",
          },
          Object {
            "fn": [Function],
            "name": "APIPlugin",
            "type": "sync",
          },
          Object {
            "fn": [Function],
            "name": "ConstPlugin",
            "type": "sync",
          },
          Object {
            "fn": [Function],
            "name": "UseStrictPlugin",
            "type": "sync",
          },
          Object {
            "fn": [Function],
            "name": "RequireIncludePlugin",
            "type": "sync",
          },
          Object {
            "fn": [Function],
            "name": "RequireEnsurePlugin",
            "type": "sync",
          },
          Object {
            "fn": [Function],
            "name": "RequireContextPlugin",
            "type": "sync",
          },
          Object {
            "fn": [Function],
            "name": "ImportPlugin",
            "type": "sync",
          },
          Object {
            "fn": [Function],
            "name": "SystemPlugin",
            "type": "sync",
          },
          Object {
            "fn": [Function],
            "name": "EnsureChunkConditionsPlugin",
            "type": "sync",
          },
          Object {
            "fn": [Function],
            "name": "RemoveParentModulesPlugin",
            "type": "sync",
          },
          Object {
            "fn": [Function],
            "name": "RemoveEmptyChunksPlugin",
            "type": "sync",
          },
          Object {
            "fn": [Function],
            "name": "MergeDuplicateChunksPlugin",
            "type": "sync",
          },
          Object {
            "fn": [Function],
            "name": "FlagIncludedChunksPlugin",
            "type": "sync",
          },
          Object {
            "fn": [Function],
            "name": "OccurrenceOrderPlugin",
            "type": "sync",
          },
          Object {
            "fn": [Function],
            "name": "SideEffectsFlagPlugin",
            "type": "sync",
          },
          Object {
            "fn": [Function],
            "name": "FlagDependencyExportsPlugin",
            "type": "sync",
          },
          Object {
            "fn": [Function],
            "name": "FlagDependencyUsagePlugin",
            "type": "sync",
          },
          Object {
            "fn": [Function],
            "name": "ModuleConcatenationPlugin",
            "type": "sync",
          },
          Object {
            "fn": [Function],
            "name": "NoEmitOnErrorsPlugin",
            "type": "sync",
          },
          Object {
            "fn": [Function],
            "name": "DefinePlugin",
            "type": "sync",
          },
          Object {
            "fn": [Function],
            "name": "UglifyJSPlugin",
            "type": "sync",
          },
          Object {
            "fn": [Function],
            "name": "TemplatedPathPlugin",
            "type": "sync",
          },
          Object {
            "fn": [Function],
            "name": "RecordIdsPlugin",
            "type": "sync",
          },
          Object {
            "fn": [Function],
            "name": "WarnCaseSensitiveModulesPlugin",
            "type": "sync",
          },
          Object {
            "fn": [Function],
            "name": "MultiEntryPlugin",
            "type": "sync",
          },
          Object {
            "fn": [Function],
            "name": "HotModuleReplacementPlugin",
            "type": "sync",
          },
          Object {
            "fn": [Function],
            "name": "HotModuleReplacementPlugin",
            "type": "sync",
          },
          Object {
            "fn": [Function],
            "name": "DefinePlugin",
            "type": "sync",
          },
        ],
      },
      "compile": SyncHook {
        "_args": Array [
          "params",
        ],
        "_call": [Function],
        "_callAsync": [Function],
        "_promise": [Function],
        "_x": Array [
          [Function],
          [Function],
        ],
        "call": [Function],
        "callAsync": [Function],
        "interceptors": Array [],
        "promise": [Function],
        "taps": Array [
          Object {
            "fn": [Function],
            "name": "WebpackServe",
            "type": "sync",
          },
          Object {
            "fn": [Function],
            "name": "WebpackHotClient",
            "type": "sync",
          },
        ],
      },
      "contextModuleFactory": SyncHook {
        "_args": Array [
          "contextModulefactory",
        ],
        "_call": [Function],
        "_callAsync": [Function],
        "_promise": [Function],
        "_x": Array [],
        "call": [Function],
        "callAsync": [Function],
        "interceptors": Array [],
        "promise": [Function],
        "taps": Array [],
      },
      "done": AsyncSeriesHook {
        "_args": Array [
          "stats",
        ],
        "_call": undefined,
        "_callAsync": [Function],
        "_promise": [Function],
        "_x": undefined,
        "call": undefined,
        "callAsync": [Function],
        "interceptors": Array [],
        "promise": [Function],
        "taps": Array [
          Object {
            "fn": [Function],
            "name": "time-fix-plugin",
            "type": "sync",
          },
          Object {
            "fn": [Function],
            "name": "WebpackServe",
            "type": "sync",
          },
          Object {
            "fn": [Function],
            "name": "WebpackHotClient",
            "type": "sync",
          },
          Object {
            "fn": [Function],
            "name": "WebpackDevMiddleware",
            "type": "sync",
          },
        ],
      },
      "emit": AsyncSeriesHook {
        "_args": Array [
          "compilation",
        ],
        "_call": undefined,
        "_callAsync": [Function],
        "_promise": [Function],
        "_x": undefined,
        "call": undefined,
        "callAsync": [Function],
        "interceptors": Array [],
        "promise": [Function],
        "taps": Array [],
      },
      "entryOption": SyncBailHook {
        "_args": Array [
          "context",
          "entry",
        ],
        "_call": [Function],
        "_callAsync": [Function],
        "_promise": [Function],
        "_x": Array [
          [Function],
        ],
        "call": [Function],
        "callAsync": [Function],
        "interceptors": Array [],
        "promise": [Function],
        "taps": Array [
          Object {
            "fn": [Function],
            "name": "EntryOptionPlugin",
            "type": "sync",
          },
        ],
      },
      "environment": SyncHook {
        "_args": Array [],
        "_call": [Function],
        "_callAsync": [Function],
        "_promise": [Function],
        "_x": Array [],
        "call": [Function],
        "callAsync": [Function],
        "interceptors": Array [],
        "promise": [Function],
        "taps": Array [],
      },
      "failed": SyncHook {
        "_args": Array [
          "error",
        ],
        "_call": [Function],
        "_callAsync": [Function],
        "_promise": [Function],
        "_x": undefined,
        "call": [Function],
        "callAsync": [Function],
        "interceptors": Array [],
        "promise": [Function],
        "taps": Array [],
      },
      "invalid": SyncHook {
        "_args": Array [
          "filename",
          "changeTime",
        ],
        "_call": [Function],
        "_callAsync": [Function],
        "_promise": [Function],
        "_x": undefined,
        "call": [Function],
        "callAsync": [Function],
        "interceptors": Array [],
        "promise": [Function],
        "taps": Array [
          Object {
            "fn": [Function],
            "name": "WebpackHotClient",
            "type": "sync",
          },
          Object {
            "fn": [Function],
            "name": "WebpackDevMiddleware",
            "type": "sync",
          },
        ],
      },
      "make": AsyncParallelHook {
        "_args": Array [
          "compilation",
        ],
        "_call": undefined,
        "_callAsync": [Function],
        "_promise": [Function],
        "_x": Array [
          [Function],
          [Function],
        ],
        "call": undefined,
        "callAsync": [Function],
        "interceptors": Array [],
        "promise": [Function],
        "taps": Array [
          Object {
            "fn": [Function],
            "name": "MultiEntryPlugin",
            "type": "async",
          },
          Object {
            "fn": [Function],
            "name": "MultiEntryPlugin",
            "type": "async",
          },
        ],
      },
      "normalModuleFactory": SyncHook {
        "_args": Array [
          "normalModuleFactory",
        ],
        "_call": [Function],
        "_callAsync": [Function],
        "_promise": [Function],
        "_x": Array [
          [Function],
        ],
        "call": [Function],
        "callAsync": [Function],
        "interceptors": Array [],
        "promise": [Function],
        "taps": Array [
          Object {
            "fn": [Function],
            "name": "SideEffectsFlagPlugin",
            "type": "sync",
          },
        ],
      },
      "run": AsyncSeriesHook {
        "_args": Array [
          "compilation",
        ],
        "_call": undefined,
        "_callAsync": [Function],
        "_promise": [Function],
        "_x": undefined,
        "call": undefined,
        "callAsync": [Function],
        "interceptors": Array [],
        "promise": [Function],
        "taps": Array [
          Object {
            "fn": [Function],
            "name": "WebpackDevMiddleware",
            "type": "sync",
          },
        ],
      },
      "shouldEmit": SyncBailHook {
        "_args": Array [
          "compilation",
        ],
        "_call": [Function],
        "_callAsync": [Function],
        "_promise": [Function],
        "_x": undefined,
        "call": [Function],
        "callAsync": [Function],
        "interceptors": Array [],
        "promise": [Function],
        "taps": Array [
          Object {
            "fn": [Function],
            "name": "NoEmitOnErrorsPlugin",
            "type": "sync",
          },
        ],
      },
      "thisCompilation": SyncHook {
        "_args": Array [
          "compilation",
          "params",
        ],
        "_call": [Function],
        "_callAsync": [Function],
        "_promise": [Function],
        "_x": Array [
          [Function],
          [Function],
          [Function],
          [Function],
        ],
        "call": [Function],
        "callAsync": [Function],
        "interceptors": Array [],
        "promise": [Function],
        "taps": Array [
          Object {
            "fn": [Function],
            "name": "JsonpTemplatePlugin",
            "type": "sync",
          },
          Object {
            "fn": [Function],
            "name": "FetchCompileWasmTemplatePlugin",
            "type": "sync",
          },
          Object {
            "fn": [Function],
            "name": "WarnNoModeSetPlugin",
            "type": "sync",
          },
          Object {
            "fn": [Function],
            "name": "SplitChunksPlugin",
            "type": "sync",
          },
        ],
      },
      "watchClose": SyncHook {
        "_args": Array [],
        "_call": [Function],
        "_callAsync": [Function],
        "_promise": [Function],
        "_x": undefined,
        "call": [Function],
        "callAsync": [Function],
        "interceptors": Array [],
        "promise": [Function],
        "taps": Array [],
      },
      "watchRun": AsyncSeriesHook {
        "_args": Array [
          "compiler",
        ],
        "_call": undefined,
        "_callAsync": [Function],
        "_promise": [Function],
        "_x": Array [
          [Function],
          [Function],
        ],
        "call": undefined,
        "callAsync": [Function],
        "interceptors": Array [],
        "promise": [Function],
        "taps": Array [
          Object {
            "fn": [Function],
            "name": "time-fix-plugin",
            "type": "sync",
          },
          Object {
            "fn": [Function],
            "name": "WebpackDevMiddleware",
            "type": "sync",
          },
        ],
      },
    },
    "hotClient": Object {
      "optionsDefined": true,
    },
    "inputFileSystem": CachedInputFileSystem {
      "_readFile": [Function],
      "_readFileStorage": Storage {
        "count": 0,
        "data": Map {},
        "duration": 60000,
        "interval": null,
        "levels": Array [
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
        ],
        "needTickCheck": false,
        "nextTick": null,
        "passive": false,
        "running": Map {
          "<PROJECT_ROOT>/test/fixtures/basic/package.json" => Array [
            [Function],
          ],
        },
        "tick": [Function],
      },
      "_readFileSync": [Function],
      "_readJson": [Function],
      "_readJsonStorage": Storage {
        "count": 0,
        "data": Map {},
        "duration": 60000,
        "interval": null,
        "levels": Array [
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
        ],
        "needTickCheck": false,
        "nextTick": null,
        "passive": false,
        "running": Map {
          "<PROJECT_ROOT>/test/fixtures/basic/package.json" => Array [
            [Function],
            [Function],
            [Function],
          ],
        },
        "tick": [Function],
      },
      "_readJsonSync": [Function],
      "_readdir": [Function],
      "_readdirStorage": Storage {
        "count": 0,
        "data": Map {},
        "duration": 60000,
        "interval": null,
        "levels": Array [
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
        ],
        "needTickCheck": false,
        "nextTick": null,
        "passive": true,
        "running": Map {},
        "tick": [Function],
      },
      "_readdirSync": [Function],
      "_readlink": [Function],
      "_readlinkStorage": Storage {
        "count": 0,
        "data": Map {},
        "duration": 60000,
        "interval": null,
        "levels": Array [
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
        ],
        "needTickCheck": false,
        "nextTick": null,
        "passive": true,
        "running": Map {},
        "tick": [Function],
      },
      "_readlinkSync": [Function],
      "_stat": [Function],
      "_statStorage": Storage {
        "count": 0,
        "data": Map {},
        "duration": 60000,
        "interval": null,
        "levels": Array [
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
        ],
        "needTickCheck": false,
        "nextTick": null,
        "passive": true,
        "running": Map {},
        "tick": [Function],
      },
      "_statSync": [Function],
      "fileSystem": NodeJsInputFileSystem {},
    },
    "name": undefined,
    "options": Object {
      "cache": false,
      "context": "<PROJECT_ROOT>/test/fixtures/basic",
      "devtool": "source-map",
      "entry": Array [
        "./app.js",
      ],
      "module": Object {
        "defaultRules": Array [
          Object {
            "resolve": Object {},
            "type": "javascript/auto",
          },
          Object {
            "resolve": Object {
              "mainFields": Array [
                "browser",
                "main",
              ],
            },
            "test": /\\\\\\.mjs\\$/i,
            "type": "javascript/esm",
          },
          Object {
            "test": /\\\\\\.json\\$/i,
            "type": "json",
          },
          Object {
            "test": /\\\\\\.wasm\\$/i,
            "type": "webassembly/experimental",
          },
        ],
        "exprContextCritical": true,
        "exprContextRecursive": true,
        "exprContextRegExp": false,
        "exprContextRequest": ".",
        "rules": Array [],
        "strictExportPresence": false,
        "strictThisContextOnImports": false,
        "unknownContextCritical": true,
        "unknownContextRecursive": true,
        "unknownContextRegExp": false,
        "unknownContextRequest": ".",
        "unsafeCache": false,
        "wrappedContextCritical": false,
        "wrappedContextRecursive": true,
        "wrappedContextRegExp": /\\.\\*/,
      },
      "node": Object {
        "Buffer": true,
        "__dirname": "mock",
        "__filename": "mock",
        "console": false,
        "global": true,
        "process": true,
        "setImmediate": true,
      },
      "optimization": Object {
        "concatenateModules": true,
        "flagIncludedChunks": true,
        "mergeDuplicateChunks": true,
        "minimize": true,
        "minimizer": Array [
          Object {
            "apply": [Function],
          },
        ],
        "namedChunks": false,
        "namedModules": false,
        "noEmitOnErrors": true,
        "nodeEnv": "production",
        "occurrenceOrder": true,
        "portableRecords": false,
        "providedExports": true,
        "removeAvailableModules": true,
        "removeEmptyChunks": true,
        "runtimeChunk": undefined,
        "sideEffects": true,
        "splitChunks": Object {
          "automaticNameDelimiter": "~",
          "cacheGroups": Object {
            "default": Object {
              "minChunks": 2,
              "priority": -20,
              "reuseExistingChunk": true,
            },
            "vendors": Object {
              "priority": -10,
              "test": /\\[\\\\\\\\\\\\/\\]node_modules\\[\\\\\\\\\\\\/\\]/,
            },
          },
          "chunks": "async",
          "maxAsyncRequests": 5,
          "maxInitialRequests": 3,
          "minChunks": 1,
          "minSize": 30000,
          "name": true,
        },
        "usedExports": true,
      },
      "output": Object {
        "chunkCallbackName": "webpackChunk",
        "chunkFilename": "./[id].output.js",
        "chunkLoadTimeout": 120000,
        "crossOriginLoading": false,
        "devtoolLineToLine": false,
        "devtoolNamespace": "",
        "filename": "./output.js",
        "globalObject": "window",
        "hashDigest": "hex",
        "hashDigestLength": 20,
        "hashFunction": "md4",
        "hotUpdateChunkFilename": "[id].[hash].hot-update.js",
        "hotUpdateFunction": "webpackHotUpdate",
        "hotUpdateMainFilename": "[hash].hot-update.json",
        "jsonpFunction": "webpackJsonp",
        "jsonpScriptType": false,
        "library": "",
        "libraryTarget": "var",
        "path": "<PROJECT_ROOT>/test/fixtures/basic",
        "pathinfo": false,
        "sourceMapFilename": "[file].map[query]",
        "strictModuleExceptionHandling": false,
        "webassemblyModuleFilename": "[modulehash].module.wasm",
      },
      "performance": Object {
        "hints": "warning",
        "maxAssetSize": 250000,
        "maxEntrypointSize": 250000,
      },
      "plugins": Array [
        TimeFixPlugin {
          "watchOffset": 11000,
        },
        NamedModulesPlugin {
          "options": Object {},
        },
      ],
      "resolve": Object {
        "aliasFields": Array [
          "browser",
        ],
        "cacheWithContext": false,
        "extensions": Array [
          ".wasm",
          ".mjs",
          ".js",
          ".json",
        ],
        "mainFields": Array [
          "browser",
          "module",
          "main",
        ],
        "mainFiles": Array [
          "index",
        ],
        "modules": Array [
          "node_modules",
        ],
        "unsafeCache": true,
      },
      "resolveLoader": Object {
        "cacheWithContext": false,
        "extensions": Array [
          ".js",
          ".json",
        ],
        "mainFields": Array [
          "loader",
          "main",
        ],
        "mainFiles": Array [
          "index",
        ],
        "unsafeCache": true,
      },
      "serve": Object {},
      "target": "web",
    },
    "outputFileSystem": MemoryFileSystem {
      "data": Object {},
    },
    "outputPath": "<PROJECT_ROOT>/test/fixtures/basic",
    "parentCompilation": undefined,
    "records": Object {},
    "recordsInputPath": undefined,
    "recordsOutputPath": undefined,
    "requestShortener": RequestShortener {
      "buildinsAsModule": false,
      "buildinsRegExp": /\\(\\^\\|!\\)\\\\/Users\\\\/powella\\\\/code\\\\/webpack\\\\-serve\\\\/node_modules\\\\/webpack/g,
      "cache": Map {},
      "currentDirectoryRegExp": /\\(\\^\\|!\\)\\\\/Users\\\\/powella\\\\/code\\\\/webpack\\\\-serve\\\\/test\\\\/fixtures\\\\/basic/g,
      "parentDirectoryRegExp": /\\(\\^\\|!\\)\\\\/Users\\\\/powella\\\\/code\\\\/webpack\\\\-serve\\\\/test\\\\/fixtures/g,
    },
    "resolverFactory": ResolverFactory {
      "_pluginCompat": SyncBailHook {
        "_args": Array [
          "options",
        ],
        "_call": [Function],
        "_callAsync": [Function],
        "_promise": [Function],
        "_x": undefined,
        "call": [Function],
        "callAsync": [Function],
        "interceptors": Array [],
        "promise": [Function],
        "taps": Array [
          Object {
            "fn": [Function],
            "name": "ResolverFactory",
            "type": "sync",
          },
          Object {
            "fn": [Function],
            "name": "Tapable camelCase",
            "stage": 100,
            "type": "sync",
          },
          Object {
            "fn": [Function],
            "name": "Tapable this.hooks",
            "stage": 200,
            "type": "sync",
          },
        ],
      },
      "cache1": WeakMap {},
      "cache2": Map {
        "normal|{}" => Resolver {
          "_pluginCompat": SyncBailHook {
            "_args": Array [
              "options",
            ],
            "_call": [Function],
            "_callAsync": [Function],
            "_promise": [Function],
            "_x": undefined,
            "call": [Function],
            "callAsync": [Function],
            "interceptors": Array [],
            "promise": [Function],
            "taps": Array [
              Object {
                "fn": [Function],
                "name": "Resolver: before/after",
                "type": "sync",
              },
              Object {
                "fn": [Function],
                "name": "Resolver: step hooks",
                "type": "sync",
              },
              Object {
                "fn": [Function],
                "name": "Tapable camelCase",
                "stage": 100,
                "type": "sync",
              },
              Object {
                "fn": [Function],
                "name": "Tapable this.hooks",
                "stage": 200,
                "type": "sync",
              },
            ],
          },
          "fileSystem": CachedInputFileSystem {
            "_readFile": [Function],
            "_readFileStorage": Storage {
              "count": 0,
              "data": Map {},
              "duration": 60000,
              "interval": null,
              "levels": Array [
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
              ],
              "needTickCheck": false,
              "nextTick": null,
              "passive": false,
              "running": Map {
                "<PROJECT_ROOT>/test/fixtures/basic/package.json" => Array [
                  [Function],
                ],
              },
              "tick": [Function],
            },
            "_readFileSync": [Function],
            "_readJson": [Function],
            "_readJsonStorage": Storage {
              "count": 0,
              "data": Map {},
              "duration": 60000,
              "interval": null,
              "levels": Array [
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
              ],
              "needTickCheck": false,
              "nextTick": null,
              "passive": false,
              "running": Map {
                "<PROJECT_ROOT>/test/fixtures/basic/package.json" => Array [
                  [Function],
                  [Function],
                  [Function],
                ],
              },
              "tick": [Function],
            },
            "_readJsonSync": [Function],
            "_readdir": [Function],
            "_readdirStorage": Storage {
              "count": 0,
              "data": Map {},
              "duration": 60000,
              "interval": null,
              "levels": Array [
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
              ],
              "needTickCheck": false,
              "nextTick": null,
              "passive": true,
              "running": Map {},
              "tick": [Function],
            },
            "_readdirSync": [Function],
            "_readlink": [Function],
            "_readlinkStorage": Storage {
              "count": 0,
              "data": Map {},
              "duration": 60000,
              "interval": null,
              "levels": Array [
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
              ],
              "needTickCheck": false,
              "nextTick": null,
              "passive": true,
              "running": Map {},
              "tick": [Function],
            },
            "_readlinkSync": [Function],
            "_stat": [Function],
            "_statStorage": Storage {
              "count": 0,
              "data": Map {},
              "duration": 60000,
              "interval": null,
              "levels": Array [
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
              ],
              "needTickCheck": false,
              "nextTick": null,
              "passive": true,
              "running": Map {},
              "tick": [Function],
            },
            "_statSync": [Function],
            "fileSystem": NodeJsInputFileSystem {},
          },
          "hooks": Object {
            "describedRelative": AsyncSeriesBailHook {
              "_args": Array [
                "request",
                "resolveContext",
              ],
              "_call": undefined,
              "_callAsync": [Function],
              "_promise": [Function],
              "_x": undefined,
              "call": undefined,
              "callAsync": [Function],
              "interceptors": Array [],
              "name": "describedRelative",
              "promise": [Function],
              "taps": Array [
                Object {
                  "fn": [Function],
                  "name": "FileKindPlugin",
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "TryNextPlugin",
                  "type": "async",
                },
              ],
            },
            "describedResolve": AsyncSeriesBailHook {
              "_args": Array [
                "request",
                "resolveContext",
              ],
              "_call": undefined,
              "_callAsync": [Function],
              "_promise": [Function],
              "_x": undefined,
              "call": undefined,
              "callAsync": [Function],
              "interceptors": Array [],
              "name": "describedResolve",
              "promise": [Function],
              "taps": Array [
                Object {
                  "fn": [Function],
                  "name": "AliasFieldPlugin",
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "AliasPlugin",
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "AliasPlugin",
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "AliasPlugin",
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "AliasPlugin",
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "AliasPlugin",
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "AliasPlugin",
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "AliasPlugin",
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "AliasPlugin",
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "AliasPlugin",
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "AliasPlugin",
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "AliasPlugin",
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "AliasPlugin",
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "AliasPlugin",
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "AliasPlugin",
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "AliasPlugin",
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "AliasPlugin",
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "AliasPlugin",
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "AliasPlugin",
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "AliasPlugin",
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "AliasPlugin",
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "AliasPlugin",
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "AliasPlugin",
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "AliasPlugin",
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "AliasPlugin",
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "AliasPlugin",
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "AliasPlugin",
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "AliasPlugin",
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "AliasPlugin",
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "AliasPlugin",
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "AliasPlugin",
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "AliasPlugin",
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "AliasPlugin",
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "AliasPlugin",
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "AliasPlugin",
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "AliasPlugin",
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "AliasPlugin",
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "AliasPlugin",
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "AliasPlugin",
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "AliasPlugin",
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "AliasPlugin",
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "ModuleKindPlugin",
                  "stage": 10,
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "JoinRequestPlugin",
                  "stage": 10,
                  "type": "async",
                },
              ],
            },
            "directory": AsyncSeriesBailHook {
              "_args": Array [
                "request",
                "resolveContext",
              ],
              "_call": undefined,
              "_callAsync": [Function],
              "_promise": [Function],
              "_x": undefined,
              "call": undefined,
              "callAsync": [Function],
              "interceptors": Array [],
              "name": "directory",
              "promise": [Function],
              "taps": Array [
                Object {
                  "fn": [Function],
                  "name": "DirectoryExistsPlugin",
                  "type": "async",
                },
              ],
            },
            "existingDirectory": AsyncSeriesBailHook {
              "_args": Array [
                "request",
                "resolveContext",
              ],
              "_call": undefined,
              "_callAsync": [Function],
              "_promise": [Function],
              "_x": undefined,
              "call": undefined,
              "callAsync": [Function],
              "interceptors": Array [],
              "name": "existingDirectory",
              "promise": [Function],
              "taps": Array [
                Object {
                  "fn": [Function],
                  "name": "MainFieldPlugin",
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "MainFieldPlugin",
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "MainFieldPlugin",
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "UseFilePlugin",
                  "type": "async",
                },
              ],
            },
            "existingFile": AsyncSeriesBailHook {
              "_args": Array [
                "request",
                "resolveContext",
              ],
              "_call": undefined,
              "_callAsync": [Function],
              "_promise": [Function],
              "_x": undefined,
              "call": undefined,
              "callAsync": [Function],
              "interceptors": Array [],
              "name": "existingFile",
              "promise": [Function],
              "taps": Array [
                Object {
                  "fn": [Function],
                  "name": "NextPlugin",
                  "type": "async",
                },
              ],
            },
            "file": AsyncSeriesBailHook {
              "_args": Array [
                "request",
                "resolveContext",
              ],
              "_call": undefined,
              "_callAsync": [Function],
              "_promise": [Function],
              "_x": undefined,
              "call": undefined,
              "callAsync": [Function],
              "interceptors": Array [],
              "name": "file",
              "promise": [Function],
              "taps": Array [
                Object {
                  "fn": [Function],
                  "name": "AliasFieldPlugin",
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "SymlinkPlugin",
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "FileExistsPlugin",
                  "type": "async",
                },
              ],
            },
            "module": AsyncSeriesBailHook {
              "_args": Array [
                "request",
                "resolveContext",
              ],
              "_call": undefined,
              "_callAsync": [Function],
              "_promise": [Function],
              "_x": undefined,
              "call": undefined,
              "callAsync": [Function],
              "interceptors": Array [],
              "name": "module",
              "promise": [Function],
              "taps": Array [
                Object {
                  "fn": [Function],
                  "name": "ModulesInHierachicDirectoriesPlugin",
                  "type": "async",
                },
              ],
            },
            "newResolve": AsyncSeriesBailHook {
              "_args": Array [
                "request",
                "resolveContext",
              ],
              "_call": undefined,
              "_callAsync": [Function],
              "_promise": [Function],
              "_x": Array [
                [Function],
              ],
              "call": undefined,
              "callAsync": [Function],
              "interceptors": Array [],
              "name": "newResolve",
              "promise": [Function],
              "taps": Array [
                Object {
                  "fn": [Function],
                  "name": "ParsePlugin",
                  "type": "async",
                },
              ],
            },
            "noResolve": SyncHook {
              "_args": Array [
                "request",
                "error",
              ],
              "_call": [Function],
              "_callAsync": [Function],
              "_promise": [Function],
              "_x": undefined,
              "call": [Function],
              "callAsync": [Function],
              "interceptors": Array [],
              "name": "noResolve",
              "promise": [Function],
              "taps": Array [],
            },
            "parsedResolve": AsyncSeriesBailHook {
              "_args": Array [
                "request",
                "resolveContext",
              ],
              "_call": undefined,
              "_callAsync": [Function],
              "_promise": [Function],
              "_x": Array [
                [Function],
                [Function],
              ],
              "call": undefined,
              "callAsync": [Function],
              "interceptors": Array [],
              "name": "parsedResolve",
              "promise": [Function],
              "taps": Array [
                Object {
                  "fn": [Function],
                  "name": "DescriptionFilePlugin",
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "NextPlugin",
                  "stage": 10,
                  "type": "async",
                },
              ],
            },
            "rawFile": AsyncSeriesBailHook {
              "_args": Array [
                "request",
                "resolveContext",
              ],
              "_call": undefined,
              "_callAsync": [Function],
              "_promise": [Function],
              "_x": undefined,
              "call": undefined,
              "callAsync": [Function],
              "interceptors": Array [],
              "name": "rawFile",
              "promise": [Function],
              "taps": Array [
                Object {
                  "fn": [Function],
                  "name": "TryNextPlugin",
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "AppendPlugin",
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "AppendPlugin",
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "AppendPlugin",
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "AppendPlugin",
                  "type": "async",
                },
              ],
            },
            "rawModule": AsyncSeriesBailHook {
              "_args": Array [
                "request",
                "resolveContext",
              ],
              "_call": undefined,
              "_callAsync": [Function],
              "_promise": [Function],
              "_x": undefined,
              "call": undefined,
              "callAsync": [Function],
              "interceptors": Array [],
              "name": "rawModule",
              "promise": [Function],
              "taps": Array [
                Object {
                  "fn": [Function],
                  "name": "TryNextPlugin",
                  "type": "async",
                },
              ],
            },
            "relative": AsyncSeriesBailHook {
              "_args": Array [
                "request",
                "resolveContext",
              ],
              "_call": undefined,
              "_callAsync": [Function],
              "_promise": [Function],
              "_x": undefined,
              "call": undefined,
              "callAsync": [Function],
              "interceptors": Array [],
              "name": "relative",
              "promise": [Function],
              "taps": Array [
                Object {
                  "fn": [Function],
                  "name": "DescriptionFilePlugin",
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "NextPlugin",
                  "stage": 10,
                  "type": "async",
                },
              ],
            },
            "resolve": AsyncSeriesBailHook {
              "_args": Array [
                "request",
                "resolveContext",
              ],
              "_call": undefined,
              "_callAsync": [Function],
              "_promise": [Function],
              "_x": Array [
                [Function],
              ],
              "call": undefined,
              "callAsync": [Function],
              "interceptors": Array [],
              "name": "resolve",
              "promise": [Function],
              "taps": Array [
                Object {
                  "fn": [Function],
                  "name": "UnsafeCachePlugin",
                  "type": "async",
                },
              ],
            },
            "resolveStep": SyncHook {
              "_args": Array [
                "hook",
                "request",
              ],
              "_call": [Function],
              "_callAsync": [Function],
              "_promise": [Function],
              "_x": Array [],
              "call": [Function],
              "callAsync": [Function],
              "interceptors": Array [],
              "name": "resolveStep",
              "promise": [Function],
              "taps": Array [],
            },
            "resolved": AsyncSeriesBailHook {
              "_args": Array [
                "request",
                "resolveContext",
              ],
              "_call": undefined,
              "_callAsync": [Function],
              "_promise": [Function],
              "_x": undefined,
              "call": undefined,
              "callAsync": [Function],
              "interceptors": Array [],
              "name": "resolved",
              "promise": [Function],
              "taps": Array [
                Object {
                  "fn": [Function],
                  "name": "ResultPlugin",
                  "type": "async",
                },
              ],
            },
            "result": AsyncSeriesHook {
              "_args": Array [
                "result",
                "resolveContext",
              ],
              "_call": undefined,
              "_callAsync": [Function],
              "_promise": [Function],
              "_x": undefined,
              "call": undefined,
              "callAsync": [Function],
              "interceptors": Array [],
              "promise": [Function],
              "taps": Array [],
            },
            "undescribedRawFile": AsyncSeriesBailHook {
              "_args": Array [
                "request",
                "resolveContext",
              ],
              "_call": undefined,
              "_callAsync": [Function],
              "_promise": [Function],
              "_x": undefined,
              "call": undefined,
              "callAsync": [Function],
              "interceptors": Array [],
              "name": "undescribedRawFile",
              "promise": [Function],
              "taps": Array [
                Object {
                  "fn": [Function],
                  "name": "DescriptionFilePlugin",
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "NextPlugin",
                  "stage": 10,
                  "type": "async",
                },
              ],
            },
          },
        },
        "loader|{}" => Resolver {
          "_pluginCompat": SyncBailHook {
            "_args": Array [
              "options",
            ],
            "_call": [Function],
            "_callAsync": [Function],
            "_promise": [Function],
            "_x": undefined,
            "call": [Function],
            "callAsync": [Function],
            "interceptors": Array [],
            "promise": [Function],
            "taps": Array [
              Object {
                "fn": [Function],
                "name": "Resolver: before/after",
                "type": "sync",
              },
              Object {
                "fn": [Function],
                "name": "Resolver: step hooks",
                "type": "sync",
              },
              Object {
                "fn": [Function],
                "name": "Tapable camelCase",
                "stage": 100,
                "type": "sync",
              },
              Object {
                "fn": [Function],
                "name": "Tapable this.hooks",
                "stage": 200,
                "type": "sync",
              },
            ],
          },
          "fileSystem": CachedInputFileSystem {
            "_readFile": [Function],
            "_readFileStorage": Storage {
              "count": 0,
              "data": Map {},
              "duration": 60000,
              "interval": null,
              "levels": Array [
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
              ],
              "needTickCheck": false,
              "nextTick": null,
              "passive": false,
              "running": Map {
                "<PROJECT_ROOT>/test/fixtures/basic/package.json" => Array [
                  [Function],
                ],
              },
              "tick": [Function],
            },
            "_readFileSync": [Function],
            "_readJson": [Function],
            "_readJsonStorage": Storage {
              "count": 0,
              "data": Map {},
              "duration": 60000,
              "interval": null,
              "levels": Array [
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
              ],
              "needTickCheck": false,
              "nextTick": null,
              "passive": false,
              "running": Map {
                "<PROJECT_ROOT>/test/fixtures/basic/package.json" => Array [
                  [Function],
                  [Function],
                  [Function],
                ],
              },
              "tick": [Function],
            },
            "_readJsonSync": [Function],
            "_readdir": [Function],
            "_readdirStorage": Storage {
              "count": 0,
              "data": Map {},
              "duration": 60000,
              "interval": null,
              "levels": Array [
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
              ],
              "needTickCheck": false,
              "nextTick": null,
              "passive": true,
              "running": Map {},
              "tick": [Function],
            },
            "_readdirSync": [Function],
            "_readlink": [Function],
            "_readlinkStorage": Storage {
              "count": 0,
              "data": Map {},
              "duration": 60000,
              "interval": null,
              "levels": Array [
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
              ],
              "needTickCheck": false,
              "nextTick": null,
              "passive": true,
              "running": Map {},
              "tick": [Function],
            },
            "_readlinkSync": [Function],
            "_stat": [Function],
            "_statStorage": Storage {
              "count": 0,
              "data": Map {},
              "duration": 60000,
              "interval": null,
              "levels": Array [
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
              ],
              "needTickCheck": false,
              "nextTick": null,
              "passive": true,
              "running": Map {},
              "tick": [Function],
            },
            "_statSync": [Function],
            "fileSystem": NodeJsInputFileSystem {},
          },
          "hooks": Object {
            "describedRelative": AsyncSeriesBailHook {
              "_args": Array [
                "request",
                "resolveContext",
              ],
              "_call": undefined,
              "_callAsync": [Function],
              "_promise": [Function],
              "_x": undefined,
              "call": undefined,
              "callAsync": [Function],
              "interceptors": Array [],
              "name": "describedRelative",
              "promise": [Function],
              "taps": Array [
                Object {
                  "fn": [Function],
                  "name": "FileKindPlugin",
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "TryNextPlugin",
                  "type": "async",
                },
              ],
            },
            "describedResolve": AsyncSeriesBailHook {
              "_args": Array [
                "request",
                "resolveContext",
              ],
              "_call": undefined,
              "_callAsync": [Function],
              "_promise": [Function],
              "_x": undefined,
              "call": undefined,
              "callAsync": [Function],
              "interceptors": Array [],
              "name": "describedResolve",
              "promise": [Function],
              "taps": Array [
                Object {
                  "fn": [Function],
                  "name": "ModuleKindPlugin",
                  "stage": 10,
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "JoinRequestPlugin",
                  "stage": 10,
                  "type": "async",
                },
              ],
            },
            "directory": AsyncSeriesBailHook {
              "_args": Array [
                "request",
                "resolveContext",
              ],
              "_call": undefined,
              "_callAsync": [Function],
              "_promise": [Function],
              "_x": undefined,
              "call": undefined,
              "callAsync": [Function],
              "interceptors": Array [],
              "name": "directory",
              "promise": [Function],
              "taps": Array [
                Object {
                  "fn": [Function],
                  "name": "DirectoryExistsPlugin",
                  "type": "async",
                },
              ],
            },
            "existingDirectory": AsyncSeriesBailHook {
              "_args": Array [
                "request",
                "resolveContext",
              ],
              "_call": undefined,
              "_callAsync": [Function],
              "_promise": [Function],
              "_x": undefined,
              "call": undefined,
              "callAsync": [Function],
              "interceptors": Array [],
              "name": "existingDirectory",
              "promise": [Function],
              "taps": Array [
                Object {
                  "fn": [Function],
                  "name": "MainFieldPlugin",
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "MainFieldPlugin",
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "UseFilePlugin",
                  "type": "async",
                },
              ],
            },
            "existingFile": AsyncSeriesBailHook {
              "_args": Array [
                "request",
                "resolveContext",
              ],
              "_call": undefined,
              "_callAsync": [Function],
              "_promise": [Function],
              "_x": undefined,
              "call": undefined,
              "callAsync": [Function],
              "interceptors": Array [],
              "name": "existingFile",
              "promise": [Function],
              "taps": Array [
                Object {
                  "fn": [Function],
                  "name": "NextPlugin",
                  "type": "async",
                },
              ],
            },
            "file": AsyncSeriesBailHook {
              "_args": Array [
                "request",
                "resolveContext",
              ],
              "_call": undefined,
              "_callAsync": [Function],
              "_promise": [Function],
              "_x": undefined,
              "call": undefined,
              "callAsync": [Function],
              "interceptors": Array [],
              "name": "file",
              "promise": [Function],
              "taps": Array [
                Object {
                  "fn": [Function],
                  "name": "SymlinkPlugin",
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "FileExistsPlugin",
                  "type": "async",
                },
              ],
            },
            "module": AsyncSeriesBailHook {
              "_args": Array [
                "request",
                "resolveContext",
              ],
              "_call": undefined,
              "_callAsync": [Function],
              "_promise": [Function],
              "_x": undefined,
              "call": undefined,
              "callAsync": [Function],
              "interceptors": Array [],
              "name": "module",
              "promise": [Function],
              "taps": Array [
                Object {
                  "fn": [Function],
                  "name": "ModulesInHierachicDirectoriesPlugin",
                  "type": "async",
                },
              ],
            },
            "newResolve": AsyncSeriesBailHook {
              "_args": Array [
                "request",
                "resolveContext",
              ],
              "_call": undefined,
              "_callAsync": [Function],
              "_promise": [Function],
              "_x": undefined,
              "call": undefined,
              "callAsync": [Function],
              "interceptors": Array [],
              "name": "newResolve",
              "promise": [Function],
              "taps": Array [
                Object {
                  "fn": [Function],
                  "name": "ParsePlugin",
                  "type": "async",
                },
              ],
            },
            "noResolve": SyncHook {
              "_args": Array [
                "request",
                "error",
              ],
              "_call": [Function],
              "_callAsync": [Function],
              "_promise": [Function],
              "_x": undefined,
              "call": [Function],
              "callAsync": [Function],
              "interceptors": Array [],
              "name": "noResolve",
              "promise": [Function],
              "taps": Array [],
            },
            "parsedResolve": AsyncSeriesBailHook {
              "_args": Array [
                "request",
                "resolveContext",
              ],
              "_call": undefined,
              "_callAsync": [Function],
              "_promise": [Function],
              "_x": undefined,
              "call": undefined,
              "callAsync": [Function],
              "interceptors": Array [],
              "name": "parsedResolve",
              "promise": [Function],
              "taps": Array [
                Object {
                  "fn": [Function],
                  "name": "DescriptionFilePlugin",
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "NextPlugin",
                  "stage": 10,
                  "type": "async",
                },
              ],
            },
            "rawFile": AsyncSeriesBailHook {
              "_args": Array [
                "request",
                "resolveContext",
              ],
              "_call": undefined,
              "_callAsync": [Function],
              "_promise": [Function],
              "_x": undefined,
              "call": undefined,
              "callAsync": [Function],
              "interceptors": Array [],
              "name": "rawFile",
              "promise": [Function],
              "taps": Array [
                Object {
                  "fn": [Function],
                  "name": "TryNextPlugin",
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "AppendPlugin",
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "AppendPlugin",
                  "type": "async",
                },
              ],
            },
            "rawModule": AsyncSeriesBailHook {
              "_args": Array [
                "request",
                "resolveContext",
              ],
              "_call": undefined,
              "_callAsync": [Function],
              "_promise": [Function],
              "_x": undefined,
              "call": undefined,
              "callAsync": [Function],
              "interceptors": Array [],
              "name": "rawModule",
              "promise": [Function],
              "taps": Array [
                Object {
                  "fn": [Function],
                  "name": "TryNextPlugin",
                  "type": "async",
                },
              ],
            },
            "relative": AsyncSeriesBailHook {
              "_args": Array [
                "request",
                "resolveContext",
              ],
              "_call": undefined,
              "_callAsync": [Function],
              "_promise": [Function],
              "_x": undefined,
              "call": undefined,
              "callAsync": [Function],
              "interceptors": Array [],
              "name": "relative",
              "promise": [Function],
              "taps": Array [
                Object {
                  "fn": [Function],
                  "name": "DescriptionFilePlugin",
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "NextPlugin",
                  "stage": 10,
                  "type": "async",
                },
              ],
            },
            "resolve": AsyncSeriesBailHook {
              "_args": Array [
                "request",
                "resolveContext",
              ],
              "_call": undefined,
              "_callAsync": [Function],
              "_promise": [Function],
              "_x": undefined,
              "call": undefined,
              "callAsync": [Function],
              "interceptors": Array [],
              "name": "resolve",
              "promise": [Function],
              "taps": Array [
                Object {
                  "fn": [Function],
                  "name": "UnsafeCachePlugin",
                  "type": "async",
                },
              ],
            },
            "resolveStep": SyncHook {
              "_args": Array [
                "hook",
                "request",
              ],
              "_call": [Function],
              "_callAsync": [Function],
              "_promise": [Function],
              "_x": undefined,
              "call": [Function],
              "callAsync": [Function],
              "interceptors": Array [],
              "name": "resolveStep",
              "promise": [Function],
              "taps": Array [],
            },
            "resolved": AsyncSeriesBailHook {
              "_args": Array [
                "request",
                "resolveContext",
              ],
              "_call": undefined,
              "_callAsync": [Function],
              "_promise": [Function],
              "_x": undefined,
              "call": undefined,
              "callAsync": [Function],
              "interceptors": Array [],
              "name": "resolved",
              "promise": [Function],
              "taps": Array [
                Object {
                  "fn": [Function],
                  "name": "ResultPlugin",
                  "type": "async",
                },
              ],
            },
            "result": AsyncSeriesHook {
              "_args": Array [
                "result",
                "resolveContext",
              ],
              "_call": undefined,
              "_callAsync": [Function],
              "_promise": [Function],
              "_x": undefined,
              "call": undefined,
              "callAsync": [Function],
              "interceptors": Array [],
              "promise": [Function],
              "taps": Array [],
            },
            "undescribedRawFile": AsyncSeriesBailHook {
              "_args": Array [
                "request",
                "resolveContext",
              ],
              "_call": undefined,
              "_callAsync": [Function],
              "_promise": [Function],
              "_x": undefined,
              "call": undefined,
              "callAsync": [Function],
              "interceptors": Array [],
              "name": "undescribedRawFile",
              "promise": [Function],
              "taps": Array [
                Object {
                  "fn": [Function],
                  "name": "DescriptionFilePlugin",
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "NextPlugin",
                  "stage": 10,
                  "type": "async",
                },
              ],
            },
          },
        },
      },
      "hooks": Object {
        "resolveOptions": HookMap {
          "_factory": [Function],
          "_interceptors": Array [],
          "_map": Map {
            "normal" => SyncWaterfallHook {
              "_args": Array [
                "resolveOptions",
              ],
              "_call": [Function],
              "_callAsync": [Function],
              "_promise": [Function],
              "_x": Array [
                [Function],
              ],
              "call": [Function],
              "callAsync": [Function],
              "interceptors": Array [],
              "promise": [Function],
              "taps": Array [
                Object {
                  "fn": [Function],
                  "name": "WebpackOptionsApply",
                  "type": "sync",
                },
              ],
            },
            "context" => SyncWaterfallHook {
              "_args": Array [
                "resolveOptions",
              ],
              "_call": [Function],
              "_callAsync": [Function],
              "_promise": [Function],
              "_x": undefined,
              "call": [Function],
              "callAsync": [Function],
              "interceptors": Array [],
              "promise": [Function],
              "taps": Array [
                Object {
                  "fn": [Function],
                  "name": "WebpackOptionsApply",
                  "type": "sync",
                },
              ],
            },
            "loader" => SyncWaterfallHook {
              "_args": Array [
                "resolveOptions",
              ],
              "_call": [Function],
              "_callAsync": [Function],
              "_promise": [Function],
              "_x": Array [
                [Function],
              ],
              "call": [Function],
              "callAsync": [Function],
              "interceptors": Array [],
              "promise": [Function],
              "taps": Array [
                Object {
                  "fn": [Function],
                  "name": "WebpackOptionsApply",
                  "type": "sync",
                },
              ],
            },
          },
        },
        "resolver": HookMap {
          "_factory": [Function],
          "_interceptors": Array [],
          "_map": Map {
            "normal" => SyncHook {
              "_args": Array [
                "resolver",
                "resolveOptions",
              ],
              "_call": [Function],
              "_callAsync": [Function],
              "_promise": [Function],
              "_x": Array [
                [Function],
                [Function],
                [Function],
                [Function],
                [Function],
                [Function],
                [Function],
                [Function],
                [Function],
                [Function],
                [Function],
                [Function],
                [Function],
                [Function],
                [Function],
                [Function],
                [Function],
                [Function],
                [Function],
                [Function],
                [Function],
                [Function],
                [Function],
                [Function],
                [Function],
                [Function],
                [Function],
                [Function],
                [Function],
                [Function],
                [Function],
                [Function],
                [Function],
                [Function],
                [Function],
                [Function],
                [Function],
                [Function],
              ],
              "call": [Function],
              "callAsync": [Function],
              "interceptors": Array [],
              "promise": [Function],
              "taps": Array [
                Object {
                  "fn": [Function],
                  "name": "NodeSourcePlugin",
                  "type": "sync",
                },
                Object {
                  "fn": [Function],
                  "name": "NodeSourcePlugin",
                  "type": "sync",
                },
                Object {
                  "fn": [Function],
                  "name": "NodeSourcePlugin",
                  "type": "sync",
                },
                Object {
                  "fn": [Function],
                  "name": "NodeSourcePlugin",
                  "type": "sync",
                },
                Object {
                  "fn": [Function],
                  "name": "NodeSourcePlugin",
                  "type": "sync",
                },
                Object {
                  "fn": [Function],
                  "name": "NodeSourcePlugin",
                  "type": "sync",
                },
                Object {
                  "fn": [Function],
                  "name": "NodeSourcePlugin",
                  "type": "sync",
                },
                Object {
                  "fn": [Function],
                  "name": "NodeSourcePlugin",
                  "type": "sync",
                },
                Object {
                  "fn": [Function],
                  "name": "NodeSourcePlugin",
                  "type": "sync",
                },
                Object {
                  "fn": [Function],
                  "name": "NodeSourcePlugin",
                  "type": "sync",
                },
                Object {
                  "fn": [Function],
                  "name": "NodeSourcePlugin",
                  "type": "sync",
                },
                Object {
                  "fn": [Function],
                  "name": "NodeSourcePlugin",
                  "type": "sync",
                },
                Object {
                  "fn": [Function],
                  "name": "NodeSourcePlugin",
                  "type": "sync",
                },
                Object {
                  "fn": [Function],
                  "name": "NodeSourcePlugin",
                  "type": "sync",
                },
                Object {
                  "fn": [Function],
                  "name": "NodeSourcePlugin",
                  "type": "sync",
                },
                Object {
                  "fn": [Function],
                  "name": "NodeSourcePlugin",
                  "type": "sync",
                },
                Object {
                  "fn": [Function],
                  "name": "NodeSourcePlugin",
                  "type": "sync",
                },
                Object {
                  "fn": [Function],
                  "name": "NodeSourcePlugin",
                  "type": "sync",
                },
                Object {
                  "fn": [Function],
                  "name": "NodeSourcePlugin",
                  "type": "sync",
                },
                Object {
                  "fn": [Function],
                  "name": "NodeSourcePlugin",
                  "type": "sync",
                },
                Object {
                  "fn": [Function],
                  "name": "NodeSourcePlugin",
                  "type": "sync",
                },
                Object {
                  "fn": [Function],
                  "name": "NodeSourcePlugin",
                  "type": "sync",
                },
                Object {
                  "fn": [Function],
                  "name": "NodeSourcePlugin",
                  "type": "sync",
                },
                Object {
                  "fn": [Function],
                  "name": "NodeSourcePlugin",
                  "type": "sync",
                },
                Object {
                  "fn": [Function],
                  "name": "NodeSourcePlugin",
                  "type": "sync",
                },
                Object {
                  "fn": [Function],
                  "name": "NodeSourcePlugin",
                  "type": "sync",
                },
                Object {
                  "fn": [Function],
                  "name": "NodeSourcePlugin",
                  "type": "sync",
                },
                Object {
                  "fn": [Function],
                  "name": "NodeSourcePlugin",
                  "type": "sync",
                },
                Object {
                  "fn": [Function],
                  "name": "NodeSourcePlugin",
                  "type": "sync",
                },
                Object {
                  "fn": [Function],
                  "name": "NodeSourcePlugin",
                  "type": "sync",
                },
                Object {
                  "fn": [Function],
                  "name": "NodeSourcePlugin",
                  "type": "sync",
                },
                Object {
                  "fn": [Function],
                  "name": "NodeSourcePlugin",
                  "type": "sync",
                },
                Object {
                  "fn": [Function],
                  "name": "NodeSourcePlugin",
                  "type": "sync",
                },
                Object {
                  "fn": [Function],
                  "name": "NodeSourcePlugin",
                  "type": "sync",
                },
                Object {
                  "fn": [Function],
                  "name": "NodeSourcePlugin",
                  "type": "sync",
                },
                Object {
                  "fn": [Function],
                  "name": "NodeSourcePlugin",
                  "type": "sync",
                },
                Object {
                  "fn": [Function],
                  "name": "NodeSourcePlugin",
                  "type": "sync",
                },
                Object {
                  "fn": [Function],
                  "name": "AMDPlugin",
                  "type": "sync",
                },
              ],
            },
            "loader" => SyncHook {
              "_args": Array [
                "resolver",
                "resolveOptions",
              ],
              "_call": [Function],
              "_callAsync": [Function],
              "_promise": [Function],
              "_x": Array [],
              "call": [Function],
              "callAsync": [Function],
              "interceptors": Array [],
              "promise": [Function],
              "taps": Array [],
            },
          },
        },
      },
    },
    "resolvers": Object {
      "context": Object {
        "apply": [Function],
        "plugins": [Function],
      },
      "loader": Object {
        "apply": [Function],
        "plugins": [Function],
      },
      "normal": Object {
        "apply": [Function],
        "plugins": [Function],
      },
    },
    "running": true,
    "watch": [Function],
    "watchFileSystem": NodeWatchFileSystem {
      "inputFileSystem": CachedInputFileSystem {
        "_readFile": [Function],
        "_readFileStorage": Storage {
          "count": 0,
          "data": Map {},
          "duration": 60000,
          "interval": null,
          "levels": Array [
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
          ],
          "needTickCheck": false,
          "nextTick": null,
          "passive": false,
          "running": Map {
            "<PROJECT_ROOT>/test/fixtures/basic/package.json" => Array [
              [Function],
            ],
          },
          "tick": [Function],
        },
        "_readFileSync": [Function],
        "_readJson": [Function],
        "_readJsonStorage": Storage {
          "count": 0,
          "data": Map {},
          "duration": 60000,
          "interval": null,
          "levels": Array [
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
          ],
          "needTickCheck": false,
          "nextTick": null,
          "passive": false,
          "running": Map {
            "<PROJECT_ROOT>/test/fixtures/basic/package.json" => Array [
              [Function],
              [Function],
              [Function],
            ],
          },
          "tick": [Function],
        },
        "_readJsonSync": [Function],
        "_readdir": [Function],
        "_readdirStorage": Storage {
          "count": 0,
          "data": Map {},
          "duration": 60000,
          "interval": null,
          "levels": Array [
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
          ],
          "needTickCheck": false,
          "nextTick": null,
          "passive": true,
          "running": Map {},
          "tick": [Function],
        },
        "_readdirSync": [Function],
        "_readlink": [Function],
        "_readlinkStorage": Storage {
          "count": 0,
          "data": Map {},
          "duration": 60000,
          "interval": null,
          "levels": Array [
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
          ],
          "needTickCheck": false,
          "nextTick": null,
          "passive": true,
          "running": Map {},
          "tick": [Function],
        },
        "_readlinkSync": [Function],
        "_stat": [Function],
        "_statStorage": Storage {
          "count": 0,
          "data": Map {},
          "duration": 60000,
          "interval": null,
          "levels": Array [
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
          ],
          "needTickCheck": false,
          "nextTick": null,
          "passive": true,
          "running": Map {},
          "tick": [Function],
        },
        "_statSync": [Function],
        "fileSystem": NodeJsInputFileSystem {},
      },
      "watcher": EventEmitter {
        "_events": Object {},
        "_eventsCount": 0,
        "_maxListeners": undefined,
        "_onTimeout": [Function],
        "aggregateTimeout": 0,
        "aggregatedChanges": Array [],
        "aggregatedRemovals": Array [],
        "dirWatchers": Array [],
        "fileWatchers": Array [],
        "mtimes": Object {},
        "options": Object {
          "aggregateTimeout": 200,
        },
        "paused": false,
        "watcherOptions": Object {
          "ignored": undefined,
          "poll": undefined,
        },
      },
      "watcherOptions": Object {
        "aggregateTimeout": 200,
      },
    },
  },
  "content": Array [
    "<PROJECT_ROOT>/test/fixtures/basic",
    "<PROJECT_ROOT>",
  ],
  "devMiddleware": Object {
    "logLevel": "silent",
    "publicPath": "/",
  },
  "host": "localhost",
  "hotClient": Object {
    "host": "localhost",
    "logLevel": "silent",
  },
  "http2": false,
  "https": null,
  "logLevel": "silent",
  "logTime": false,
  "open": false,
  "port": 8080,
  "protocol": "http",
}
`;

exports[`serve basic config 3`] = `
"!function(e){var n={};function t(o){if(n[o])return n[o].exports;var r=n[o]={i:o,l:!1,exports:{}};return e[o].call(r.exports,r,r.exports,t),r.l=!0,r.exports}t.m=e,t.c=n,t.d=function(e,n,o){t.o(e,n)||Object.defineProperty(e,n,{enumerable:!0,get:o})},t.r=function(e){\\"undefined\\"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:\\"Module\\"}),Object.defineProperty(e,\\"__esModule\\",{value:!0})},t.t=function(e,n){if(1&n&&(e=t(e)),8&n)return e;if(4&n&&\\"object\\"==typeof e&&e&&e.__esModule)return e;var o=Object.create(null);if(t.r(o),Object.defineProperty(o,\\"default\\",{enumerable:!0,value:e}),2&n&&\\"string\\"!=typeof e)for(var r in e)t.d(o,r,function(n){return e[n]}.bind(null,r));return o},t.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(n,\\"a\\",n),n},t.o=function(e,n){return Object.prototype.hasOwnProperty.call(e,n)},t.p=\\"\\",t(t.s=0)}({\\"../../../node_modules/webpack/buildin/module.js\\":function(e,n){e.exports=function(e){return e.webpackPolyfill||(e.deprecate=function(){},e.paths=[],e.children||(e.children=[]),Object.defineProperty(e,\\"loaded\\",{enumerable:!0,get:function(){return e.l}}),Object.defineProperty(e,\\"id\\",{enumerable:!0,get:function(){return e.i}}),e.webpackPolyfill=1),e}},\\"./app.js\\":function(e,n,t){(function(e){t(\\"./component.js\\"),\\"object\\"==typeof e.hot&&e.hot.accept(e=>{e&&console.error(\\"Cannot apply HMR update.\\",e)})}).call(this,t(\\"../../../node_modules/webpack/buildin/module.js\\")(e))},\\"./component.js\\":function(e,n){document.querySelector(\\"#target\\").innerHTML=\\"component\\"},0:function(e,n,t){e.exports=t(\\"./app.js\\")}});
//# sourceMappingURL=output.js.map"
`;

exports[`serve serve 1`] = `
Object {
  "env": "test",
  "proxy": false,
  "subdomainOffset": 2,
}
`;

exports[`serve serve 2`] = `
Object {
  "bus": Nanobus {
    "_listeners": Object {},
    "_name": "nanobus",
    "_starListeners": Array [],
  },
  "clipboard": true,
  "compiler": Compiler {
    "_pluginCompat": SyncBailHook {
      "_args": Array [
        "options",
      ],
      "_call": [Function],
      "_callAsync": [Function],
      "_promise": [Function],
      "_x": undefined,
      "call": [Function],
      "callAsync": [Function],
      "interceptors": Array [],
      "promise": [Function],
      "taps": Array [
        Object {
          "fn": [Function],
          "name": "Compiler",
          "type": "sync",
        },
        Object {
          "fn": [Function],
          "name": "Tapable camelCase",
          "stage": 100,
          "type": "sync",
        },
        Object {
          "fn": [Function],
          "name": "Tapable this.hooks",
          "stage": 200,
          "type": "sync",
        },
      ],
    },
    "context": "<PROJECT_ROOT>",
    "contextTimestamps": Map {},
    "dependencies": undefined,
    "fileTimestamps": Map {},
    "hooks": Object {
      "additionalPass": AsyncSeriesHook {
        "_args": Array [],
        "_call": undefined,
        "_callAsync": [Function],
        "_promise": [Function],
        "_x": undefined,
        "call": undefined,
        "callAsync": [Function],
        "interceptors": Array [],
        "promise": [Function],
        "taps": Array [
          Object {
            "fn": [Function],
            "name": "HotModuleReplacementPlugin",
            "type": "async",
          },
        ],
      },
      "afterCompile": AsyncSeriesHook {
        "_args": Array [
          "compilation",
        ],
        "_call": undefined,
        "_callAsync": [Function],
        "_promise": [Function],
        "_x": undefined,
        "call": undefined,
        "callAsync": [Function],
        "interceptors": Array [],
        "promise": [Function],
        "taps": Array [],
      },
      "afterEmit": AsyncSeriesHook {
        "_args": Array [
          "compilation",
        ],
        "_call": undefined,
        "_callAsync": [Function],
        "_promise": [Function],
        "_x": undefined,
        "call": undefined,
        "callAsync": [Function],
        "interceptors": Array [],
        "promise": [Function],
        "taps": Array [
          Object {
            "fn": [Function],
            "name": "SizeLimitsPlugin",
            "type": "sync",
          },
        ],
      },
      "afterEnvironment": SyncHook {
        "_args": Array [],
        "_call": [Function],
        "_callAsync": [Function],
        "_promise": [Function],
        "_x": Array [],
        "call": [Function],
        "callAsync": [Function],
        "interceptors": Array [],
        "promise": [Function],
        "taps": Array [],
      },
      "afterPlugins": SyncHook {
        "_args": Array [
          "compiler",
        ],
        "_call": [Function],
        "_callAsync": [Function],
        "_promise": [Function],
        "_x": Array [],
        "call": [Function],
        "callAsync": [Function],
        "interceptors": Array [],
        "promise": [Function],
        "taps": Array [],
      },
      "afterResolvers": SyncHook {
        "_args": Array [
          "compiler",
        ],
        "_call": [Function],
        "_callAsync": [Function],
        "_promise": [Function],
        "_x": Array [
          [Function],
          [Function],
        ],
        "call": [Function],
        "callAsync": [Function],
        "interceptors": Array [],
        "promise": [Function],
        "taps": Array [
          Object {
            "fn": [Function],
            "name": "NodeSourcePlugin",
            "type": "sync",
          },
          Object {
            "fn": [Function],
            "name": "AMDPlugin",
            "type": "sync",
          },
        ],
      },
      "beforeCompile": AsyncSeriesHook {
        "_args": Array [
          "params",
        ],
        "_call": undefined,
        "_callAsync": [Function],
        "_promise": [Function],
        "_x": Array [
          [Function],
        ],
        "call": undefined,
        "callAsync": [Function],
        "interceptors": Array [],
        "promise": [Function],
        "taps": Array [
          Object {
            "fn": [Function],
            "name": "WebpackHotClient",
            "type": "sync",
          },
        ],
      },
      "beforeRun": AsyncSeriesHook {
        "_args": Array [
          "compilation",
        ],
        "_call": undefined,
        "_callAsync": [Function],
        "_promise": [Function],
        "_x": undefined,
        "call": undefined,
        "callAsync": [Function],
        "interceptors": Array [],
        "promise": [Function],
        "taps": Array [
          Object {
            "fn": [Function],
            "name": "NodeEnvironmentPlugin",
            "type": "sync",
          },
        ],
      },
      "compilation": SyncHook {
        "_args": Array [
          "compilation",
          "params",
        ],
        "_call": [Function],
        "_callAsync": [Function],
        "_promise": [Function],
        "_x": Array [
          [Function],
          [Function],
          [Function],
          [Function],
          [Function],
          [Function],
          [Function],
          [Function],
          [Function],
          [Function],
          [Function],
          [Function],
          [Function],
          [Function],
          [Function],
          [Function],
          [Function],
          [Function],
          [Function],
          [Function],
          [Function],
          [Function],
          [Function],
          [Function],
          [Function],
          [Function],
          [Function],
          [Function],
          [Function],
          [Function],
          [Function],
          [Function],
          [Function],
          [Function],
          [Function],
          [Function],
          [Function],
          [Function],
          [Function],
          [Function],
          [Function],
          [Function],
          [Function],
        ],
        "call": [Function],
        "callAsync": [Function],
        "interceptors": Array [],
        "promise": [Function],
        "taps": Array [
          Object {
            "fn": [Function],
            "name": "FunctionModulePlugin",
            "type": "sync",
          },
          Object {
            "fn": [Function],
            "name": "NodeSourcePlugin",
            "type": "sync",
          },
          Object {
            "fn": [Function],
            "name": "LoaderTargetPlugin",
            "type": "sync",
          },
          Object {
            "fn": [Function],
            "name": "JavascriptModulesPlugin",
            "type": "sync",
          },
          Object {
            "fn": [Function],
            "name": "JsonModulesPlugin",
            "type": "sync",
          },
          Object {
            "fn": [Function],
            "name": "WebAssemblyModulesPlugin",
            "type": "sync",
          },
          Object {
            "fn": [Function],
            "name": "MultiEntryPlugin",
            "type": "sync",
          },
          Object {
            "fn": [Function],
            "name": "CompatibilityPlugin",
            "type": "sync",
          },
          Object {
            "fn": [Function],
            "name": "HarmonyModulesPlugin",
            "type": "sync",
          },
          Object {
            "fn": [Function],
            "name": "AMDPlugin",
            "type": "sync",
          },
          Object {
            "fn": [Function],
            "name": "CommonJsPlugin",
            "type": "sync",
          },
          Object {
            "fn": [Function],
            "name": "LoaderPlugin",
            "type": "sync",
          },
          Object {
            "fn": [Function],
            "name": "LoaderPlugin",
            "type": "sync",
          },
          Object {
            "fn": [Function],
            "name": "NodeStuffPlugin",
            "type": "sync",
          },
          Object {
            "fn": [Function],
            "name": "RequireJsStuffPlugin",
            "type": "sync",
          },
          Object {
            "fn": [Function],
            "name": "APIPlugin",
            "type": "sync",
          },
          Object {
            "fn": [Function],
            "name": "ConstPlugin",
            "type": "sync",
          },
          Object {
            "fn": [Function],
            "name": "UseStrictPlugin",
            "type": "sync",
          },
          Object {
            "fn": [Function],
            "name": "RequireIncludePlugin",
            "type": "sync",
          },
          Object {
            "fn": [Function],
            "name": "RequireEnsurePlugin",
            "type": "sync",
          },
          Object {
            "fn": [Function],
            "name": "RequireContextPlugin",
            "type": "sync",
          },
          Object {
            "fn": [Function],
            "name": "ImportPlugin",
            "type": "sync",
          },
          Object {
            "fn": [Function],
            "name": "SystemPlugin",
            "type": "sync",
          },
          Object {
            "fn": [Function],
            "name": "EnsureChunkConditionsPlugin",
            "type": "sync",
          },
          Object {
            "fn": [Function],
            "name": "RemoveParentModulesPlugin",
            "type": "sync",
          },
          Object {
            "fn": [Function],
            "name": "RemoveEmptyChunksPlugin",
            "type": "sync",
          },
          Object {
            "fn": [Function],
            "name": "MergeDuplicateChunksPlugin",
            "type": "sync",
          },
          Object {
            "fn": [Function],
            "name": "FlagIncludedChunksPlugin",
            "type": "sync",
          },
          Object {
            "fn": [Function],
            "name": "OccurrenceOrderPlugin",
            "type": "sync",
          },
          Object {
            "fn": [Function],
            "name": "SideEffectsFlagPlugin",
            "type": "sync",
          },
          Object {
            "fn": [Function],
            "name": "FlagDependencyExportsPlugin",
            "type": "sync",
          },
          Object {
            "fn": [Function],
            "name": "FlagDependencyUsagePlugin",
            "type": "sync",
          },
          Object {
            "fn": [Function],
            "name": "ModuleConcatenationPlugin",
            "type": "sync",
          },
          Object {
            "fn": [Function],
            "name": "NoEmitOnErrorsPlugin",
            "type": "sync",
          },
          Object {
            "fn": [Function],
            "name": "DefinePlugin",
            "type": "sync",
          },
          Object {
            "fn": [Function],
            "name": "UglifyJSPlugin",
            "type": "sync",
          },
          Object {
            "fn": [Function],
            "name": "TemplatedPathPlugin",
            "type": "sync",
          },
          Object {
            "fn": [Function],
            "name": "RecordIdsPlugin",
            "type": "sync",
          },
          Object {
            "fn": [Function],
            "name": "WarnCaseSensitiveModulesPlugin",
            "type": "sync",
          },
          Object {
            "fn": [Function],
            "name": "MultiEntryPlugin",
            "type": "sync",
          },
          Object {
            "fn": [Function],
            "name": "HotModuleReplacementPlugin",
            "type": "sync",
          },
          Object {
            "fn": [Function],
            "name": "HotModuleReplacementPlugin",
            "type": "sync",
          },
          Object {
            "fn": [Function],
            "name": "DefinePlugin",
            "type": "sync",
          },
        ],
      },
      "compile": SyncHook {
        "_args": Array [
          "params",
        ],
        "_call": [Function],
        "_callAsync": [Function],
        "_promise": [Function],
        "_x": Array [
          [Function],
          [Function],
        ],
        "call": [Function],
        "callAsync": [Function],
        "interceptors": Array [],
        "promise": [Function],
        "taps": Array [
          Object {
            "fn": [Function],
            "name": "WebpackServe",
            "type": "sync",
          },
          Object {
            "fn": [Function],
            "name": "WebpackHotClient",
            "type": "sync",
          },
        ],
      },
      "contextModuleFactory": SyncHook {
        "_args": Array [
          "contextModulefactory",
        ],
        "_call": [Function],
        "_callAsync": [Function],
        "_promise": [Function],
        "_x": Array [],
        "call": [Function],
        "callAsync": [Function],
        "interceptors": Array [],
        "promise": [Function],
        "taps": Array [],
      },
      "done": AsyncSeriesHook {
        "_args": Array [
          "stats",
        ],
        "_call": undefined,
        "_callAsync": [Function],
        "_promise": [Function],
        "_x": undefined,
        "call": undefined,
        "callAsync": [Function],
        "interceptors": Array [],
        "promise": [Function],
        "taps": Array [
          Object {
            "fn": [Function],
            "name": "time-fix-plugin",
            "type": "sync",
          },
          Object {
            "fn": [Function],
            "name": "WebpackServe",
            "type": "sync",
          },
          Object {
            "fn": [Function],
            "name": "WebpackHotClient",
            "type": "sync",
          },
          Object {
            "fn": [Function],
            "name": "WebpackDevMiddleware",
            "type": "sync",
          },
        ],
      },
      "emit": AsyncSeriesHook {
        "_args": Array [
          "compilation",
        ],
        "_call": undefined,
        "_callAsync": [Function],
        "_promise": [Function],
        "_x": undefined,
        "call": undefined,
        "callAsync": [Function],
        "interceptors": Array [],
        "promise": [Function],
        "taps": Array [],
      },
      "entryOption": SyncBailHook {
        "_args": Array [
          "context",
          "entry",
        ],
        "_call": [Function],
        "_callAsync": [Function],
        "_promise": [Function],
        "_x": Array [
          [Function],
        ],
        "call": [Function],
        "callAsync": [Function],
        "interceptors": Array [],
        "promise": [Function],
        "taps": Array [
          Object {
            "fn": [Function],
            "name": "EntryOptionPlugin",
            "type": "sync",
          },
        ],
      },
      "environment": SyncHook {
        "_args": Array [],
        "_call": [Function],
        "_callAsync": [Function],
        "_promise": [Function],
        "_x": Array [],
        "call": [Function],
        "callAsync": [Function],
        "interceptors": Array [],
        "promise": [Function],
        "taps": Array [],
      },
      "failed": SyncHook {
        "_args": Array [
          "error",
        ],
        "_call": [Function],
        "_callAsync": [Function],
        "_promise": [Function],
        "_x": undefined,
        "call": [Function],
        "callAsync": [Function],
        "interceptors": Array [],
        "promise": [Function],
        "taps": Array [],
      },
      "invalid": SyncHook {
        "_args": Array [
          "filename",
          "changeTime",
        ],
        "_call": [Function],
        "_callAsync": [Function],
        "_promise": [Function],
        "_x": undefined,
        "call": [Function],
        "callAsync": [Function],
        "interceptors": Array [],
        "promise": [Function],
        "taps": Array [
          Object {
            "fn": [Function],
            "name": "WebpackHotClient",
            "type": "sync",
          },
          Object {
            "fn": [Function],
            "name": "WebpackDevMiddleware",
            "type": "sync",
          },
        ],
      },
      "make": AsyncParallelHook {
        "_args": Array [
          "compilation",
        ],
        "_call": undefined,
        "_callAsync": [Function],
        "_promise": [Function],
        "_x": Array [
          [Function],
          [Function],
        ],
        "call": undefined,
        "callAsync": [Function],
        "interceptors": Array [],
        "promise": [Function],
        "taps": Array [
          Object {
            "fn": [Function],
            "name": "MultiEntryPlugin",
            "type": "async",
          },
          Object {
            "fn": [Function],
            "name": "MultiEntryPlugin",
            "type": "async",
          },
        ],
      },
      "normalModuleFactory": SyncHook {
        "_args": Array [
          "normalModuleFactory",
        ],
        "_call": [Function],
        "_callAsync": [Function],
        "_promise": [Function],
        "_x": Array [
          [Function],
        ],
        "call": [Function],
        "callAsync": [Function],
        "interceptors": Array [],
        "promise": [Function],
        "taps": Array [
          Object {
            "fn": [Function],
            "name": "SideEffectsFlagPlugin",
            "type": "sync",
          },
        ],
      },
      "run": AsyncSeriesHook {
        "_args": Array [
          "compilation",
        ],
        "_call": undefined,
        "_callAsync": [Function],
        "_promise": [Function],
        "_x": undefined,
        "call": undefined,
        "callAsync": [Function],
        "interceptors": Array [],
        "promise": [Function],
        "taps": Array [
          Object {
            "fn": [Function],
            "name": "WebpackDevMiddleware",
            "type": "sync",
          },
        ],
      },
      "shouldEmit": SyncBailHook {
        "_args": Array [
          "compilation",
        ],
        "_call": [Function],
        "_callAsync": [Function],
        "_promise": [Function],
        "_x": undefined,
        "call": [Function],
        "callAsync": [Function],
        "interceptors": Array [],
        "promise": [Function],
        "taps": Array [
          Object {
            "fn": [Function],
            "name": "NoEmitOnErrorsPlugin",
            "type": "sync",
          },
        ],
      },
      "thisCompilation": SyncHook {
        "_args": Array [
          "compilation",
          "params",
        ],
        "_call": [Function],
        "_callAsync": [Function],
        "_promise": [Function],
        "_x": Array [
          [Function],
          [Function],
          [Function],
          [Function],
        ],
        "call": [Function],
        "callAsync": [Function],
        "interceptors": Array [],
        "promise": [Function],
        "taps": Array [
          Object {
            "fn": [Function],
            "name": "JsonpTemplatePlugin",
            "type": "sync",
          },
          Object {
            "fn": [Function],
            "name": "FetchCompileWasmTemplatePlugin",
            "type": "sync",
          },
          Object {
            "fn": [Function],
            "name": "WarnNoModeSetPlugin",
            "type": "sync",
          },
          Object {
            "fn": [Function],
            "name": "SplitChunksPlugin",
            "type": "sync",
          },
        ],
      },
      "watchClose": SyncHook {
        "_args": Array [],
        "_call": [Function],
        "_callAsync": [Function],
        "_promise": [Function],
        "_x": undefined,
        "call": [Function],
        "callAsync": [Function],
        "interceptors": Array [],
        "promise": [Function],
        "taps": Array [],
      },
      "watchRun": AsyncSeriesHook {
        "_args": Array [
          "compiler",
        ],
        "_call": undefined,
        "_callAsync": [Function],
        "_promise": [Function],
        "_x": Array [
          [Function],
          [Function],
        ],
        "call": undefined,
        "callAsync": [Function],
        "interceptors": Array [],
        "promise": [Function],
        "taps": Array [
          Object {
            "fn": [Function],
            "name": "time-fix-plugin",
            "type": "sync",
          },
          Object {
            "fn": [Function],
            "name": "WebpackDevMiddleware",
            "type": "sync",
          },
        ],
      },
    },
    "hotClient": Object {
      "optionsDefined": true,
    },
    "inputFileSystem": CachedInputFileSystem {
      "_readFile": [Function],
      "_readFileStorage": Storage {
        "count": 0,
        "data": Map {},
        "duration": 60000,
        "interval": null,
        "levels": Array [
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
        ],
        "needTickCheck": false,
        "nextTick": null,
        "passive": false,
        "running": Map {
          "<PROJECT_ROOT>/package.json" => Array [
            [Function],
          ],
        },
        "tick": [Function],
      },
      "_readFileSync": [Function],
      "_readJson": [Function],
      "_readJsonStorage": Storage {
        "count": 0,
        "data": Map {},
        "duration": 60000,
        "interval": null,
        "levels": Array [
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
        ],
        "needTickCheck": false,
        "nextTick": null,
        "passive": false,
        "running": Map {
          "<PROJECT_ROOT>/package.json" => Array [
            [Function],
            [Function],
            [Function],
          ],
        },
        "tick": [Function],
      },
      "_readJsonSync": [Function],
      "_readdir": [Function],
      "_readdirStorage": Storage {
        "count": 0,
        "data": Map {},
        "duration": 60000,
        "interval": null,
        "levels": Array [
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
        ],
        "needTickCheck": false,
        "nextTick": null,
        "passive": true,
        "running": Map {},
        "tick": [Function],
      },
      "_readdirSync": [Function],
      "_readlink": [Function],
      "_readlinkStorage": Storage {
        "count": 0,
        "data": Map {},
        "duration": 60000,
        "interval": null,
        "levels": Array [
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
        ],
        "needTickCheck": false,
        "nextTick": null,
        "passive": true,
        "running": Map {},
        "tick": [Function],
      },
      "_readlinkSync": [Function],
      "_stat": [Function],
      "_statStorage": Storage {
        "count": 0,
        "data": Map {},
        "duration": 60000,
        "interval": null,
        "levels": Array [
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
          Set {},
        ],
        "needTickCheck": false,
        "nextTick": null,
        "passive": true,
        "running": Map {},
        "tick": [Function],
      },
      "_statSync": [Function],
      "fileSystem": NodeJsInputFileSystem {},
    },
    "name": undefined,
    "options": Object {
      "cache": false,
      "context": "<PROJECT_ROOT>",
      "devtool": false,
      "entry": Array [
        "./src",
      ],
      "module": Object {
        "defaultRules": Array [
          Object {
            "resolve": Object {},
            "type": "javascript/auto",
          },
          Object {
            "resolve": Object {
              "mainFields": Array [
                "browser",
                "main",
              ],
            },
            "test": /\\\\\\.mjs\\$/i,
            "type": "javascript/esm",
          },
          Object {
            "test": /\\\\\\.json\\$/i,
            "type": "json",
          },
          Object {
            "test": /\\\\\\.wasm\\$/i,
            "type": "webassembly/experimental",
          },
        ],
        "exprContextCritical": true,
        "exprContextRecursive": true,
        "exprContextRegExp": false,
        "exprContextRequest": ".",
        "rules": Array [],
        "strictExportPresence": false,
        "strictThisContextOnImports": false,
        "unknownContextCritical": true,
        "unknownContextRecursive": true,
        "unknownContextRegExp": false,
        "unknownContextRequest": ".",
        "unsafeCache": false,
        "wrappedContextCritical": false,
        "wrappedContextRecursive": true,
        "wrappedContextRegExp": /\\.\\*/,
      },
      "node": Object {
        "Buffer": true,
        "__dirname": "mock",
        "__filename": "mock",
        "console": false,
        "global": true,
        "process": true,
        "setImmediate": true,
      },
      "optimization": Object {
        "concatenateModules": true,
        "flagIncludedChunks": true,
        "mergeDuplicateChunks": true,
        "minimize": true,
        "minimizer": Array [
          Object {
            "apply": [Function],
          },
        ],
        "namedChunks": false,
        "namedModules": false,
        "noEmitOnErrors": true,
        "nodeEnv": "production",
        "occurrenceOrder": true,
        "portableRecords": false,
        "providedExports": true,
        "removeAvailableModules": true,
        "removeEmptyChunks": true,
        "runtimeChunk": undefined,
        "sideEffects": true,
        "splitChunks": Object {
          "automaticNameDelimiter": "~",
          "cacheGroups": Object {
            "default": Object {
              "minChunks": 2,
              "priority": -20,
              "reuseExistingChunk": true,
            },
            "vendors": Object {
              "priority": -10,
              "test": /\\[\\\\\\\\\\\\/\\]node_modules\\[\\\\\\\\\\\\/\\]/,
            },
          },
          "chunks": "async",
          "maxAsyncRequests": 5,
          "maxInitialRequests": 3,
          "minChunks": 1,
          "minSize": 30000,
          "name": true,
        },
        "usedExports": true,
      },
      "output": Object {
        "chunkCallbackName": "webpackChunk",
        "chunkFilename": "[name].js",
        "chunkLoadTimeout": 120000,
        "crossOriginLoading": false,
        "devtoolLineToLine": false,
        "devtoolNamespace": "",
        "filename": "[name].js",
        "globalObject": "window",
        "hashDigest": "hex",
        "hashDigestLength": 20,
        "hashFunction": "md4",
        "hotUpdateChunkFilename": "[id].[hash].hot-update.js",
        "hotUpdateFunction": "webpackHotUpdate",
        "hotUpdateMainFilename": "[hash].hot-update.json",
        "jsonpFunction": "webpackJsonp",
        "jsonpScriptType": false,
        "library": "",
        "libraryTarget": "var",
        "path": "<PROJECT_ROOT>/dist",
        "pathinfo": false,
        "sourceMapFilename": "[file].map[query]",
        "strictModuleExceptionHandling": false,
        "webassemblyModuleFilename": "[modulehash].module.wasm",
      },
      "performance": Object {
        "hints": "warning",
        "maxAssetSize": 250000,
        "maxEntrypointSize": 250000,
      },
      "plugins": Array [
        TimeFixPlugin {
          "watchOffset": 11000,
        },
      ],
      "resolve": Object {
        "aliasFields": Array [
          "browser",
        ],
        "cacheWithContext": false,
        "extensions": Array [
          ".wasm",
          ".mjs",
          ".js",
          ".json",
        ],
        "mainFields": Array [
          "browser",
          "module",
          "main",
        ],
        "mainFiles": Array [
          "index",
        ],
        "modules": Array [
          "node_modules",
        ],
        "unsafeCache": true,
      },
      "resolveLoader": Object {
        "cacheWithContext": false,
        "extensions": Array [
          ".js",
          ".json",
        ],
        "mainFields": Array [
          "loader",
          "main",
        ],
        "mainFiles": Array [
          "index",
        ],
        "unsafeCache": true,
      },
      "target": "web",
    },
    "outputFileSystem": MemoryFileSystem {
      "data": Object {},
    },
    "outputPath": "<PROJECT_ROOT>/dist",
    "parentCompilation": undefined,
    "records": Object {},
    "recordsInputPath": undefined,
    "recordsOutputPath": undefined,
    "requestShortener": RequestShortener {
      "buildinsAsModule": true,
      "buildinsRegExp": /\\(\\^\\|!\\)\\\\/Users\\\\/powella\\\\/code\\\\/webpack\\\\-serve\\\\/node_modules\\\\/webpack/g,
      "cache": Map {},
      "currentDirectoryRegExp": /\\(\\^\\|!\\)\\\\/Users\\\\/powella\\\\/code\\\\/webpack\\\\-serve/g,
      "parentDirectoryRegExp": /\\(\\^\\|!\\)\\\\/Users\\\\/powella\\\\/code/g,
    },
    "resolverFactory": ResolverFactory {
      "_pluginCompat": SyncBailHook {
        "_args": Array [
          "options",
        ],
        "_call": [Function],
        "_callAsync": [Function],
        "_promise": [Function],
        "_x": undefined,
        "call": [Function],
        "callAsync": [Function],
        "interceptors": Array [],
        "promise": [Function],
        "taps": Array [
          Object {
            "fn": [Function],
            "name": "ResolverFactory",
            "type": "sync",
          },
          Object {
            "fn": [Function],
            "name": "Tapable camelCase",
            "stage": 100,
            "type": "sync",
          },
          Object {
            "fn": [Function],
            "name": "Tapable this.hooks",
            "stage": 200,
            "type": "sync",
          },
        ],
      },
      "cache1": WeakMap {},
      "cache2": Map {
        "normal|{}" => Resolver {
          "_pluginCompat": SyncBailHook {
            "_args": Array [
              "options",
            ],
            "_call": [Function],
            "_callAsync": [Function],
            "_promise": [Function],
            "_x": undefined,
            "call": [Function],
            "callAsync": [Function],
            "interceptors": Array [],
            "promise": [Function],
            "taps": Array [
              Object {
                "fn": [Function],
                "name": "Resolver: before/after",
                "type": "sync",
              },
              Object {
                "fn": [Function],
                "name": "Resolver: step hooks",
                "type": "sync",
              },
              Object {
                "fn": [Function],
                "name": "Tapable camelCase",
                "stage": 100,
                "type": "sync",
              },
              Object {
                "fn": [Function],
                "name": "Tapable this.hooks",
                "stage": 200,
                "type": "sync",
              },
            ],
          },
          "fileSystem": CachedInputFileSystem {
            "_readFile": [Function],
            "_readFileStorage": Storage {
              "count": 0,
              "data": Map {},
              "duration": 60000,
              "interval": null,
              "levels": Array [
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
              ],
              "needTickCheck": false,
              "nextTick": null,
              "passive": false,
              "running": Map {
                "<PROJECT_ROOT>/package.json" => Array [
                  [Function],
                ],
              },
              "tick": [Function],
            },
            "_readFileSync": [Function],
            "_readJson": [Function],
            "_readJsonStorage": Storage {
              "count": 0,
              "data": Map {},
              "duration": 60000,
              "interval": null,
              "levels": Array [
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
              ],
              "needTickCheck": false,
              "nextTick": null,
              "passive": false,
              "running": Map {
                "<PROJECT_ROOT>/package.json" => Array [
                  [Function],
                  [Function],
                  [Function],
                ],
              },
              "tick": [Function],
            },
            "_readJsonSync": [Function],
            "_readdir": [Function],
            "_readdirStorage": Storage {
              "count": 0,
              "data": Map {},
              "duration": 60000,
              "interval": null,
              "levels": Array [
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
              ],
              "needTickCheck": false,
              "nextTick": null,
              "passive": true,
              "running": Map {},
              "tick": [Function],
            },
            "_readdirSync": [Function],
            "_readlink": [Function],
            "_readlinkStorage": Storage {
              "count": 0,
              "data": Map {},
              "duration": 60000,
              "interval": null,
              "levels": Array [
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
              ],
              "needTickCheck": false,
              "nextTick": null,
              "passive": true,
              "running": Map {},
              "tick": [Function],
            },
            "_readlinkSync": [Function],
            "_stat": [Function],
            "_statStorage": Storage {
              "count": 0,
              "data": Map {},
              "duration": 60000,
              "interval": null,
              "levels": Array [
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
              ],
              "needTickCheck": false,
              "nextTick": null,
              "passive": true,
              "running": Map {},
              "tick": [Function],
            },
            "_statSync": [Function],
            "fileSystem": NodeJsInputFileSystem {},
          },
          "hooks": Object {
            "describedRelative": AsyncSeriesBailHook {
              "_args": Array [
                "request",
                "resolveContext",
              ],
              "_call": undefined,
              "_callAsync": [Function],
              "_promise": [Function],
              "_x": undefined,
              "call": undefined,
              "callAsync": [Function],
              "interceptors": Array [],
              "name": "describedRelative",
              "promise": [Function],
              "taps": Array [
                Object {
                  "fn": [Function],
                  "name": "FileKindPlugin",
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "TryNextPlugin",
                  "type": "async",
                },
              ],
            },
            "describedResolve": AsyncSeriesBailHook {
              "_args": Array [
                "request",
                "resolveContext",
              ],
              "_call": undefined,
              "_callAsync": [Function],
              "_promise": [Function],
              "_x": undefined,
              "call": undefined,
              "callAsync": [Function],
              "interceptors": Array [],
              "name": "describedResolve",
              "promise": [Function],
              "taps": Array [
                Object {
                  "fn": [Function],
                  "name": "AliasFieldPlugin",
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "AliasPlugin",
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "AliasPlugin",
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "AliasPlugin",
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "AliasPlugin",
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "AliasPlugin",
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "AliasPlugin",
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "AliasPlugin",
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "AliasPlugin",
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "AliasPlugin",
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "AliasPlugin",
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "AliasPlugin",
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "AliasPlugin",
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "AliasPlugin",
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "AliasPlugin",
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "AliasPlugin",
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "AliasPlugin",
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "AliasPlugin",
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "AliasPlugin",
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "AliasPlugin",
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "AliasPlugin",
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "AliasPlugin",
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "AliasPlugin",
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "AliasPlugin",
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "AliasPlugin",
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "AliasPlugin",
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "AliasPlugin",
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "AliasPlugin",
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "AliasPlugin",
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "AliasPlugin",
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "AliasPlugin",
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "AliasPlugin",
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "AliasPlugin",
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "AliasPlugin",
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "AliasPlugin",
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "AliasPlugin",
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "AliasPlugin",
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "AliasPlugin",
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "AliasPlugin",
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "AliasPlugin",
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "AliasPlugin",
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "ModuleKindPlugin",
                  "stage": 10,
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "JoinRequestPlugin",
                  "stage": 10,
                  "type": "async",
                },
              ],
            },
            "directory": AsyncSeriesBailHook {
              "_args": Array [
                "request",
                "resolveContext",
              ],
              "_call": undefined,
              "_callAsync": [Function],
              "_promise": [Function],
              "_x": undefined,
              "call": undefined,
              "callAsync": [Function],
              "interceptors": Array [],
              "name": "directory",
              "promise": [Function],
              "taps": Array [
                Object {
                  "fn": [Function],
                  "name": "DirectoryExistsPlugin",
                  "type": "async",
                },
              ],
            },
            "existingDirectory": AsyncSeriesBailHook {
              "_args": Array [
                "request",
                "resolveContext",
              ],
              "_call": undefined,
              "_callAsync": [Function],
              "_promise": [Function],
              "_x": undefined,
              "call": undefined,
              "callAsync": [Function],
              "interceptors": Array [],
              "name": "existingDirectory",
              "promise": [Function],
              "taps": Array [
                Object {
                  "fn": [Function],
                  "name": "MainFieldPlugin",
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "MainFieldPlugin",
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "MainFieldPlugin",
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "UseFilePlugin",
                  "type": "async",
                },
              ],
            },
            "existingFile": AsyncSeriesBailHook {
              "_args": Array [
                "request",
                "resolveContext",
              ],
              "_call": undefined,
              "_callAsync": [Function],
              "_promise": [Function],
              "_x": undefined,
              "call": undefined,
              "callAsync": [Function],
              "interceptors": Array [],
              "name": "existingFile",
              "promise": [Function],
              "taps": Array [
                Object {
                  "fn": [Function],
                  "name": "NextPlugin",
                  "type": "async",
                },
              ],
            },
            "file": AsyncSeriesBailHook {
              "_args": Array [
                "request",
                "resolveContext",
              ],
              "_call": undefined,
              "_callAsync": [Function],
              "_promise": [Function],
              "_x": undefined,
              "call": undefined,
              "callAsync": [Function],
              "interceptors": Array [],
              "name": "file",
              "promise": [Function],
              "taps": Array [
                Object {
                  "fn": [Function],
                  "name": "AliasFieldPlugin",
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "SymlinkPlugin",
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "FileExistsPlugin",
                  "type": "async",
                },
              ],
            },
            "module": AsyncSeriesBailHook {
              "_args": Array [
                "request",
                "resolveContext",
              ],
              "_call": undefined,
              "_callAsync": [Function],
              "_promise": [Function],
              "_x": undefined,
              "call": undefined,
              "callAsync": [Function],
              "interceptors": Array [],
              "name": "module",
              "promise": [Function],
              "taps": Array [
                Object {
                  "fn": [Function],
                  "name": "ModulesInHierachicDirectoriesPlugin",
                  "type": "async",
                },
              ],
            },
            "newResolve": AsyncSeriesBailHook {
              "_args": Array [
                "request",
                "resolveContext",
              ],
              "_call": undefined,
              "_callAsync": [Function],
              "_promise": [Function],
              "_x": Array [
                [Function],
              ],
              "call": undefined,
              "callAsync": [Function],
              "interceptors": Array [],
              "name": "newResolve",
              "promise": [Function],
              "taps": Array [
                Object {
                  "fn": [Function],
                  "name": "ParsePlugin",
                  "type": "async",
                },
              ],
            },
            "noResolve": SyncHook {
              "_args": Array [
                "request",
                "error",
              ],
              "_call": [Function],
              "_callAsync": [Function],
              "_promise": [Function],
              "_x": undefined,
              "call": [Function],
              "callAsync": [Function],
              "interceptors": Array [],
              "name": "noResolve",
              "promise": [Function],
              "taps": Array [],
            },
            "parsedResolve": AsyncSeriesBailHook {
              "_args": Array [
                "request",
                "resolveContext",
              ],
              "_call": undefined,
              "_callAsync": [Function],
              "_promise": [Function],
              "_x": Array [
                [Function],
                [Function],
              ],
              "call": undefined,
              "callAsync": [Function],
              "interceptors": Array [],
              "name": "parsedResolve",
              "promise": [Function],
              "taps": Array [
                Object {
                  "fn": [Function],
                  "name": "DescriptionFilePlugin",
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "NextPlugin",
                  "stage": 10,
                  "type": "async",
                },
              ],
            },
            "rawFile": AsyncSeriesBailHook {
              "_args": Array [
                "request",
                "resolveContext",
              ],
              "_call": undefined,
              "_callAsync": [Function],
              "_promise": [Function],
              "_x": undefined,
              "call": undefined,
              "callAsync": [Function],
              "interceptors": Array [],
              "name": "rawFile",
              "promise": [Function],
              "taps": Array [
                Object {
                  "fn": [Function],
                  "name": "TryNextPlugin",
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "AppendPlugin",
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "AppendPlugin",
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "AppendPlugin",
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "AppendPlugin",
                  "type": "async",
                },
              ],
            },
            "rawModule": AsyncSeriesBailHook {
              "_args": Array [
                "request",
                "resolveContext",
              ],
              "_call": undefined,
              "_callAsync": [Function],
              "_promise": [Function],
              "_x": undefined,
              "call": undefined,
              "callAsync": [Function],
              "interceptors": Array [],
              "name": "rawModule",
              "promise": [Function],
              "taps": Array [
                Object {
                  "fn": [Function],
                  "name": "TryNextPlugin",
                  "type": "async",
                },
              ],
            },
            "relative": AsyncSeriesBailHook {
              "_args": Array [
                "request",
                "resolveContext",
              ],
              "_call": undefined,
              "_callAsync": [Function],
              "_promise": [Function],
              "_x": undefined,
              "call": undefined,
              "callAsync": [Function],
              "interceptors": Array [],
              "name": "relative",
              "promise": [Function],
              "taps": Array [
                Object {
                  "fn": [Function],
                  "name": "DescriptionFilePlugin",
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "NextPlugin",
                  "stage": 10,
                  "type": "async",
                },
              ],
            },
            "resolve": AsyncSeriesBailHook {
              "_args": Array [
                "request",
                "resolveContext",
              ],
              "_call": undefined,
              "_callAsync": [Function],
              "_promise": [Function],
              "_x": Array [
                [Function],
              ],
              "call": undefined,
              "callAsync": [Function],
              "interceptors": Array [],
              "name": "resolve",
              "promise": [Function],
              "taps": Array [
                Object {
                  "fn": [Function],
                  "name": "UnsafeCachePlugin",
                  "type": "async",
                },
              ],
            },
            "resolveStep": SyncHook {
              "_args": Array [
                "hook",
                "request",
              ],
              "_call": [Function],
              "_callAsync": [Function],
              "_promise": [Function],
              "_x": Array [],
              "call": [Function],
              "callAsync": [Function],
              "interceptors": Array [],
              "name": "resolveStep",
              "promise": [Function],
              "taps": Array [],
            },
            "resolved": AsyncSeriesBailHook {
              "_args": Array [
                "request",
                "resolveContext",
              ],
              "_call": undefined,
              "_callAsync": [Function],
              "_promise": [Function],
              "_x": undefined,
              "call": undefined,
              "callAsync": [Function],
              "interceptors": Array [],
              "name": "resolved",
              "promise": [Function],
              "taps": Array [
                Object {
                  "fn": [Function],
                  "name": "ResultPlugin",
                  "type": "async",
                },
              ],
            },
            "result": AsyncSeriesHook {
              "_args": Array [
                "result",
                "resolveContext",
              ],
              "_call": undefined,
              "_callAsync": [Function],
              "_promise": [Function],
              "_x": undefined,
              "call": undefined,
              "callAsync": [Function],
              "interceptors": Array [],
              "promise": [Function],
              "taps": Array [],
            },
            "undescribedRawFile": AsyncSeriesBailHook {
              "_args": Array [
                "request",
                "resolveContext",
              ],
              "_call": undefined,
              "_callAsync": [Function],
              "_promise": [Function],
              "_x": undefined,
              "call": undefined,
              "callAsync": [Function],
              "interceptors": Array [],
              "name": "undescribedRawFile",
              "promise": [Function],
              "taps": Array [
                Object {
                  "fn": [Function],
                  "name": "DescriptionFilePlugin",
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "NextPlugin",
                  "stage": 10,
                  "type": "async",
                },
              ],
            },
          },
        },
        "loader|{}" => Resolver {
          "_pluginCompat": SyncBailHook {
            "_args": Array [
              "options",
            ],
            "_call": [Function],
            "_callAsync": [Function],
            "_promise": [Function],
            "_x": undefined,
            "call": [Function],
            "callAsync": [Function],
            "interceptors": Array [],
            "promise": [Function],
            "taps": Array [
              Object {
                "fn": [Function],
                "name": "Resolver: before/after",
                "type": "sync",
              },
              Object {
                "fn": [Function],
                "name": "Resolver: step hooks",
                "type": "sync",
              },
              Object {
                "fn": [Function],
                "name": "Tapable camelCase",
                "stage": 100,
                "type": "sync",
              },
              Object {
                "fn": [Function],
                "name": "Tapable this.hooks",
                "stage": 200,
                "type": "sync",
              },
            ],
          },
          "fileSystem": CachedInputFileSystem {
            "_readFile": [Function],
            "_readFileStorage": Storage {
              "count": 0,
              "data": Map {},
              "duration": 60000,
              "interval": null,
              "levels": Array [
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
              ],
              "needTickCheck": false,
              "nextTick": null,
              "passive": false,
              "running": Map {
                "<PROJECT_ROOT>/package.json" => Array [
                  [Function],
                ],
              },
              "tick": [Function],
            },
            "_readFileSync": [Function],
            "_readJson": [Function],
            "_readJsonStorage": Storage {
              "count": 0,
              "data": Map {},
              "duration": 60000,
              "interval": null,
              "levels": Array [
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
              ],
              "needTickCheck": false,
              "nextTick": null,
              "passive": false,
              "running": Map {
                "<PROJECT_ROOT>/package.json" => Array [
                  [Function],
                  [Function],
                  [Function],
                ],
              },
              "tick": [Function],
            },
            "_readJsonSync": [Function],
            "_readdir": [Function],
            "_readdirStorage": Storage {
              "count": 0,
              "data": Map {},
              "duration": 60000,
              "interval": null,
              "levels": Array [
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
              ],
              "needTickCheck": false,
              "nextTick": null,
              "passive": true,
              "running": Map {},
              "tick": [Function],
            },
            "_readdirSync": [Function],
            "_readlink": [Function],
            "_readlinkStorage": Storage {
              "count": 0,
              "data": Map {},
              "duration": 60000,
              "interval": null,
              "levels": Array [
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
              ],
              "needTickCheck": false,
              "nextTick": null,
              "passive": true,
              "running": Map {},
              "tick": [Function],
            },
            "_readlinkSync": [Function],
            "_stat": [Function],
            "_statStorage": Storage {
              "count": 0,
              "data": Map {},
              "duration": 60000,
              "interval": null,
              "levels": Array [
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
                Set {},
              ],
              "needTickCheck": false,
              "nextTick": null,
              "passive": true,
              "running": Map {},
              "tick": [Function],
            },
            "_statSync": [Function],
            "fileSystem": NodeJsInputFileSystem {},
          },
          "hooks": Object {
            "describedRelative": AsyncSeriesBailHook {
              "_args": Array [
                "request",
                "resolveContext",
              ],
              "_call": undefined,
              "_callAsync": [Function],
              "_promise": [Function],
              "_x": undefined,
              "call": undefined,
              "callAsync": [Function],
              "interceptors": Array [],
              "name": "describedRelative",
              "promise": [Function],
              "taps": Array [
                Object {
                  "fn": [Function],
                  "name": "FileKindPlugin",
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "TryNextPlugin",
                  "type": "async",
                },
              ],
            },
            "describedResolve": AsyncSeriesBailHook {
              "_args": Array [
                "request",
                "resolveContext",
              ],
              "_call": undefined,
              "_callAsync": [Function],
              "_promise": [Function],
              "_x": undefined,
              "call": undefined,
              "callAsync": [Function],
              "interceptors": Array [],
              "name": "describedResolve",
              "promise": [Function],
              "taps": Array [
                Object {
                  "fn": [Function],
                  "name": "ModuleKindPlugin",
                  "stage": 10,
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "JoinRequestPlugin",
                  "stage": 10,
                  "type": "async",
                },
              ],
            },
            "directory": AsyncSeriesBailHook {
              "_args": Array [
                "request",
                "resolveContext",
              ],
              "_call": undefined,
              "_callAsync": [Function],
              "_promise": [Function],
              "_x": undefined,
              "call": undefined,
              "callAsync": [Function],
              "interceptors": Array [],
              "name": "directory",
              "promise": [Function],
              "taps": Array [
                Object {
                  "fn": [Function],
                  "name": "DirectoryExistsPlugin",
                  "type": "async",
                },
              ],
            },
            "existingDirectory": AsyncSeriesBailHook {
              "_args": Array [
                "request",
                "resolveContext",
              ],
              "_call": undefined,
              "_callAsync": [Function],
              "_promise": [Function],
              "_x": undefined,
              "call": undefined,
              "callAsync": [Function],
              "interceptors": Array [],
              "name": "existingDirectory",
              "promise": [Function],
              "taps": Array [
                Object {
                  "fn": [Function],
                  "name": "MainFieldPlugin",
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "MainFieldPlugin",
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "UseFilePlugin",
                  "type": "async",
                },
              ],
            },
            "existingFile": AsyncSeriesBailHook {
              "_args": Array [
                "request",
                "resolveContext",
              ],
              "_call": undefined,
              "_callAsync": [Function],
              "_promise": [Function],
              "_x": undefined,
              "call": undefined,
              "callAsync": [Function],
              "interceptors": Array [],
              "name": "existingFile",
              "promise": [Function],
              "taps": Array [
                Object {
                  "fn": [Function],
                  "name": "NextPlugin",
                  "type": "async",
                },
              ],
            },
            "file": AsyncSeriesBailHook {
              "_args": Array [
                "request",
                "resolveContext",
              ],
              "_call": undefined,
              "_callAsync": [Function],
              "_promise": [Function],
              "_x": undefined,
              "call": undefined,
              "callAsync": [Function],
              "interceptors": Array [],
              "name": "file",
              "promise": [Function],
              "taps": Array [
                Object {
                  "fn": [Function],
                  "name": "SymlinkPlugin",
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "FileExistsPlugin",
                  "type": "async",
                },
              ],
            },
            "module": AsyncSeriesBailHook {
              "_args": Array [
                "request",
                "resolveContext",
              ],
              "_call": undefined,
              "_callAsync": [Function],
              "_promise": [Function],
              "_x": undefined,
              "call": undefined,
              "callAsync": [Function],
              "interceptors": Array [],
              "name": "module",
              "promise": [Function],
              "taps": Array [
                Object {
                  "fn": [Function],
                  "name": "ModulesInHierachicDirectoriesPlugin",
                  "type": "async",
                },
              ],
            },
            "newResolve": AsyncSeriesBailHook {
              "_args": Array [
                "request",
                "resolveContext",
              ],
              "_call": undefined,
              "_callAsync": [Function],
              "_promise": [Function],
              "_x": undefined,
              "call": undefined,
              "callAsync": [Function],
              "interceptors": Array [],
              "name": "newResolve",
              "promise": [Function],
              "taps": Array [
                Object {
                  "fn": [Function],
                  "name": "ParsePlugin",
                  "type": "async",
                },
              ],
            },
            "noResolve": SyncHook {
              "_args": Array [
                "request",
                "error",
              ],
              "_call": [Function],
              "_callAsync": [Function],
              "_promise": [Function],
              "_x": undefined,
              "call": [Function],
              "callAsync": [Function],
              "interceptors": Array [],
              "name": "noResolve",
              "promise": [Function],
              "taps": Array [],
            },
            "parsedResolve": AsyncSeriesBailHook {
              "_args": Array [
                "request",
                "resolveContext",
              ],
              "_call": undefined,
              "_callAsync": [Function],
              "_promise": [Function],
              "_x": undefined,
              "call": undefined,
              "callAsync": [Function],
              "interceptors": Array [],
              "name": "parsedResolve",
              "promise": [Function],
              "taps": Array [
                Object {
                  "fn": [Function],
                  "name": "DescriptionFilePlugin",
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "NextPlugin",
                  "stage": 10,
                  "type": "async",
                },
              ],
            },
            "rawFile": AsyncSeriesBailHook {
              "_args": Array [
                "request",
                "resolveContext",
              ],
              "_call": undefined,
              "_callAsync": [Function],
              "_promise": [Function],
              "_x": undefined,
              "call": undefined,
              "callAsync": [Function],
              "interceptors": Array [],
              "name": "rawFile",
              "promise": [Function],
              "taps": Array [
                Object {
                  "fn": [Function],
                  "name": "TryNextPlugin",
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "AppendPlugin",
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "AppendPlugin",
                  "type": "async",
                },
              ],
            },
            "rawModule": AsyncSeriesBailHook {
              "_args": Array [
                "request",
                "resolveContext",
              ],
              "_call": undefined,
              "_callAsync": [Function],
              "_promise": [Function],
              "_x": undefined,
              "call": undefined,
              "callAsync": [Function],
              "interceptors": Array [],
              "name": "rawModule",
              "promise": [Function],
              "taps": Array [
                Object {
                  "fn": [Function],
                  "name": "TryNextPlugin",
                  "type": "async",
                },
              ],
            },
            "relative": AsyncSeriesBailHook {
              "_args": Array [
                "request",
                "resolveContext",
              ],
              "_call": undefined,
              "_callAsync": [Function],
              "_promise": [Function],
              "_x": undefined,
              "call": undefined,
              "callAsync": [Function],
              "interceptors": Array [],
              "name": "relative",
              "promise": [Function],
              "taps": Array [
                Object {
                  "fn": [Function],
                  "name": "DescriptionFilePlugin",
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "NextPlugin",
                  "stage": 10,
                  "type": "async",
                },
              ],
            },
            "resolve": AsyncSeriesBailHook {
              "_args": Array [
                "request",
                "resolveContext",
              ],
              "_call": undefined,
              "_callAsync": [Function],
              "_promise": [Function],
              "_x": undefined,
              "call": undefined,
              "callAsync": [Function],
              "interceptors": Array [],
              "name": "resolve",
              "promise": [Function],
              "taps": Array [
                Object {
                  "fn": [Function],
                  "name": "UnsafeCachePlugin",
                  "type": "async",
                },
              ],
            },
            "resolveStep": SyncHook {
              "_args": Array [
                "hook",
                "request",
              ],
              "_call": [Function],
              "_callAsync": [Function],
              "_promise": [Function],
              "_x": undefined,
              "call": [Function],
              "callAsync": [Function],
              "interceptors": Array [],
              "name": "resolveStep",
              "promise": [Function],
              "taps": Array [],
            },
            "resolved": AsyncSeriesBailHook {
              "_args": Array [
                "request",
                "resolveContext",
              ],
              "_call": undefined,
              "_callAsync": [Function],
              "_promise": [Function],
              "_x": undefined,
              "call": undefined,
              "callAsync": [Function],
              "interceptors": Array [],
              "name": "resolved",
              "promise": [Function],
              "taps": Array [
                Object {
                  "fn": [Function],
                  "name": "ResultPlugin",
                  "type": "async",
                },
              ],
            },
            "result": AsyncSeriesHook {
              "_args": Array [
                "result",
                "resolveContext",
              ],
              "_call": undefined,
              "_callAsync": [Function],
              "_promise": [Function],
              "_x": undefined,
              "call": undefined,
              "callAsync": [Function],
              "interceptors": Array [],
              "promise": [Function],
              "taps": Array [],
            },
            "undescribedRawFile": AsyncSeriesBailHook {
              "_args": Array [
                "request",
                "resolveContext",
              ],
              "_call": undefined,
              "_callAsync": [Function],
              "_promise": [Function],
              "_x": undefined,
              "call": undefined,
              "callAsync": [Function],
              "interceptors": Array [],
              "name": "undescribedRawFile",
              "promise": [Function],
              "taps": Array [
                Object {
                  "fn": [Function],
                  "name": "DescriptionFilePlugin",
                  "type": "async",
                },
                Object {
                  "fn": [Function],
                  "name": "NextPlugin",
                  "stage": 10,
                  "type": "async",
                },
              ],
            },
          },
        },
      },
      "hooks": Object {
        "resolveOptions": HookMap {
          "_factory": [Function],
          "_interceptors": Array [],
          "_map": Map {
            "normal" => SyncWaterfallHook {
              "_args": Array [
                "resolveOptions",
              ],
              "_call": [Function],
              "_callAsync": [Function],
              "_promise": [Function],
              "_x": Array [
                [Function],
              ],
              "call": [Function],
              "callAsync": [Function],
              "interceptors": Array [],
              "promise": [Function],
              "taps": Array [
                Object {
                  "fn": [Function],
                  "name": "WebpackOptionsApply",
                  "type": "sync",
                },
              ],
            },
            "context" => SyncWaterfallHook {
              "_args": Array [
                "resolveOptions",
              ],
              "_call": [Function],
              "_callAsync": [Function],
              "_promise": [Function],
              "_x": undefined,
              "call": [Function],
              "callAsync": [Function],
              "interceptors": Array [],
              "promise": [Function],
              "taps": Array [
                Object {
                  "fn": [Function],
                  "name": "WebpackOptionsApply",
                  "type": "sync",
                },
              ],
            },
            "loader" => SyncWaterfallHook {
              "_args": Array [
                "resolveOptions",
              ],
              "_call": [Function],
              "_callAsync": [Function],
              "_promise": [Function],
              "_x": Array [
                [Function],
              ],
              "call": [Function],
              "callAsync": [Function],
              "interceptors": Array [],
              "promise": [Function],
              "taps": Array [
                Object {
                  "fn": [Function],
                  "name": "WebpackOptionsApply",
                  "type": "sync",
                },
              ],
            },
          },
        },
        "resolver": HookMap {
          "_factory": [Function],
          "_interceptors": Array [],
          "_map": Map {
            "normal" => SyncHook {
              "_args": Array [
                "resolver",
                "resolveOptions",
              ],
              "_call": [Function],
              "_callAsync": [Function],
              "_promise": [Function],
              "_x": Array [
                [Function],
                [Function],
                [Function],
                [Function],
                [Function],
                [Function],
                [Function],
                [Function],
                [Function],
                [Function],
                [Function],
                [Function],
                [Function],
                [Function],
                [Function],
                [Function],
                [Function],
                [Function],
                [Function],
                [Function],
                [Function],
                [Function],
                [Function],
                [Function],
                [Function],
                [Function],
                [Function],
                [Function],
                [Function],
                [Function],
                [Function],
                [Function],
                [Function],
                [Function],
                [Function],
                [Function],
                [Function],
                [Function],
              ],
              "call": [Function],
              "callAsync": [Function],
              "interceptors": Array [],
              "promise": [Function],
              "taps": Array [
                Object {
                  "fn": [Function],
                  "name": "NodeSourcePlugin",
                  "type": "sync",
                },
                Object {
                  "fn": [Function],
                  "name": "NodeSourcePlugin",
                  "type": "sync",
                },
                Object {
                  "fn": [Function],
                  "name": "NodeSourcePlugin",
                  "type": "sync",
                },
                Object {
                  "fn": [Function],
                  "name": "NodeSourcePlugin",
                  "type": "sync",
                },
                Object {
                  "fn": [Function],
                  "name": "NodeSourcePlugin",
                  "type": "sync",
                },
                Object {
                  "fn": [Function],
                  "name": "NodeSourcePlugin",
                  "type": "sync",
                },
                Object {
                  "fn": [Function],
                  "name": "NodeSourcePlugin",
                  "type": "sync",
                },
                Object {
                  "fn": [Function],
                  "name": "NodeSourcePlugin",
                  "type": "sync",
                },
                Object {
                  "fn": [Function],
                  "name": "NodeSourcePlugin",
                  "type": "sync",
                },
                Object {
                  "fn": [Function],
                  "name": "NodeSourcePlugin",
                  "type": "sync",
                },
                Object {
                  "fn": [Function],
                  "name": "NodeSourcePlugin",
                  "type": "sync",
                },
                Object {
                  "fn": [Function],
                  "name": "NodeSourcePlugin",
                  "type": "sync",
                },
                Object {
                  "fn": [Function],
                  "name": "NodeSourcePlugin",
                  "type": "sync",
                },
                Object {
                  "fn": [Function],
                  "name": "NodeSourcePlugin",
                  "type": "sync",
                },
                Object {
                  "fn": [Function],
                  "name": "NodeSourcePlugin",
                  "type": "sync",
                },
                Object {
                  "fn": [Function],
                  "name": "NodeSourcePlugin",
                  "type": "sync",
                },
                Object {
                  "fn": [Function],
                  "name": "NodeSourcePlugin",
                  "type": "sync",
                },
                Object {
                  "fn": [Function],
                  "name": "NodeSourcePlugin",
                  "type": "sync",
                },
                Object {
                  "fn": [Function],
                  "name": "NodeSourcePlugin",
                  "type": "sync",
                },
                Object {
                  "fn": [Function],
                  "name": "NodeSourcePlugin",
                  "type": "sync",
                },
                Object {
                  "fn": [Function],
                  "name": "NodeSourcePlugin",
                  "type": "sync",
                },
                Object {
                  "fn": [Function],
                  "name": "NodeSourcePlugin",
                  "type": "sync",
                },
                Object {
                  "fn": [Function],
                  "name": "NodeSourcePlugin",
                  "type": "sync",
                },
                Object {
                  "fn": [Function],
                  "name": "NodeSourcePlugin",
                  "type": "sync",
                },
                Object {
                  "fn": [Function],
                  "name": "NodeSourcePlugin",
                  "type": "sync",
                },
                Object {
                  "fn": [Function],
                  "name": "NodeSourcePlugin",
                  "type": "sync",
                },
                Object {
                  "fn": [Function],
                  "name": "NodeSourcePlugin",
                  "type": "sync",
                },
                Object {
                  "fn": [Function],
                  "name": "NodeSourcePlugin",
                  "type": "sync",
                },
                Object {
                  "fn": [Function],
                  "name": "NodeSourcePlugin",
                  "type": "sync",
                },
                Object {
                  "fn": [Function],
                  "name": "NodeSourcePlugin",
                  "type": "sync",
                },
                Object {
                  "fn": [Function],
                  "name": "NodeSourcePlugin",
                  "type": "sync",
                },
                Object {
                  "fn": [Function],
                  "name": "NodeSourcePlugin",
                  "type": "sync",
                },
                Object {
                  "fn": [Function],
                  "name": "NodeSourcePlugin",
                  "type": "sync",
                },
                Object {
                  "fn": [Function],
                  "name": "NodeSourcePlugin",
                  "type": "sync",
                },
                Object {
                  "fn": [Function],
                  "name": "NodeSourcePlugin",
                  "type": "sync",
                },
                Object {
                  "fn": [Function],
                  "name": "NodeSourcePlugin",
                  "type": "sync",
                },
                Object {
                  "fn": [Function],
                  "name": "NodeSourcePlugin",
                  "type": "sync",
                },
                Object {
                  "fn": [Function],
                  "name": "AMDPlugin",
                  "type": "sync",
                },
              ],
            },
            "loader" => SyncHook {
              "_args": Array [
                "resolver",
                "resolveOptions",
              ],
              "_call": [Function],
              "_callAsync": [Function],
              "_promise": [Function],
              "_x": Array [],
              "call": [Function],
              "callAsync": [Function],
              "interceptors": Array [],
              "promise": [Function],
              "taps": Array [],
            },
          },
        },
      },
    },
    "resolvers": Object {
      "context": Object {
        "apply": [Function],
        "plugins": [Function],
      },
      "loader": Object {
        "apply": [Function],
        "plugins": [Function],
      },
      "normal": Object {
        "apply": [Function],
        "plugins": [Function],
      },
    },
    "running": true,
    "watch": [Function],
    "watchFileSystem": NodeWatchFileSystem {
      "inputFileSystem": CachedInputFileSystem {
        "_readFile": [Function],
        "_readFileStorage": Storage {
          "count": 0,
          "data": Map {},
          "duration": 60000,
          "interval": null,
          "levels": Array [
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
          ],
          "needTickCheck": false,
          "nextTick": null,
          "passive": false,
          "running": Map {
            "<PROJECT_ROOT>/package.json" => Array [
              [Function],
            ],
          },
          "tick": [Function],
        },
        "_readFileSync": [Function],
        "_readJson": [Function],
        "_readJsonStorage": Storage {
          "count": 0,
          "data": Map {},
          "duration": 60000,
          "interval": null,
          "levels": Array [
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
          ],
          "needTickCheck": false,
          "nextTick": null,
          "passive": false,
          "running": Map {
            "<PROJECT_ROOT>/package.json" => Array [
              [Function],
              [Function],
              [Function],
            ],
          },
          "tick": [Function],
        },
        "_readJsonSync": [Function],
        "_readdir": [Function],
        "_readdirStorage": Storage {
          "count": 0,
          "data": Map {},
          "duration": 60000,
          "interval": null,
          "levels": Array [
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
          ],
          "needTickCheck": false,
          "nextTick": null,
          "passive": true,
          "running": Map {},
          "tick": [Function],
        },
        "_readdirSync": [Function],
        "_readlink": [Function],
        "_readlinkStorage": Storage {
          "count": 0,
          "data": Map {},
          "duration": 60000,
          "interval": null,
          "levels": Array [
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
          ],
          "needTickCheck": false,
          "nextTick": null,
          "passive": true,
          "running": Map {},
          "tick": [Function],
        },
        "_readlinkSync": [Function],
        "_stat": [Function],
        "_statStorage": Storage {
          "count": 0,
          "data": Map {},
          "duration": 60000,
          "interval": null,
          "levels": Array [
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
          ],
          "needTickCheck": false,
          "nextTick": null,
          "passive": true,
          "running": Map {},
          "tick": [Function],
        },
        "_statSync": [Function],
        "fileSystem": NodeJsInputFileSystem {},
      },
      "watcher": EventEmitter {
        "_events": Object {},
        "_eventsCount": 0,
        "_maxListeners": undefined,
        "_onTimeout": [Function],
        "aggregateTimeout": 0,
        "aggregatedChanges": Array [],
        "aggregatedRemovals": Array [],
        "dirWatchers": Array [],
        "fileWatchers": Array [],
        "mtimes": Object {},
        "options": Object {
          "aggregateTimeout": 200,
        },
        "paused": false,
        "watcherOptions": Object {
          "ignored": undefined,
          "poll": undefined,
        },
      },
      "watcherOptions": Object {
        "aggregateTimeout": 200,
      },
    },
  },
  "content": Array [
    "<PROJECT_ROOT>",
  ],
  "devMiddleware": Object {
    "logLevel": "silent",
    "publicPath": "/",
  },
  "host": "localhost",
  "hotClient": Object {
    "host": "localhost",
    "logLevel": "silent",
  },
  "http2": false,
  "https": null,
  "logLevel": "silent",
  "logTime": false,
  "open": false,
  "port": 8080,
  "protocol": "http",
}
`;
